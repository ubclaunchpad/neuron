This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-15T00:51:54.751Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  api/
    adminService.js
    api.js
    authService.js
    classesPageService.js
    homePageService.js
    imageService.js
    shiftService.js
    volunteerService.js
  assets/
    images/
      button-icons/
        clock-icon.svg
        plus-icon.svg
        x-icon.svg
  components/
    AddEditInstructorModal/
      index.css
      index.js
    AuthenticationFormWrapper/
      index.css
      index.js
    CalendarView/
      index.css
      index.js
    Checkbox/
      index.css
      index.js
    CheckInCard/
      index.js
    ClassCard/
      index.css
      index.js
    ClassCategoryContainer/
      index.css
      index.js
    ClassPreferencesCard/
      index.css
      index.js
    CustomButton/
      index.css
      index.js
    DashboardCoverage/
      index.css
      index.js
    DashCoverShifts/
      index.js
    DashShifts/
      index.css
      index.js
    DateToolbar/
      index.css
      index.js
    Deactivate-Reactivate-Modal/
      index.css
      index.js
    DetailsPanel/
      index.css
      index.js
    ForgotPassForm/
      index.css
      index.js
    ImgFallback/
      index.js
    LeftSideBarWithLogo/
      index.css
      index.js
    LoginForm/
      index.css
      index.js
    MemberList/
      index.css
      index.js
    Modal/
      index.css
      index.js
    NavProfileCard/
      index.css
      index.js
    Notifications/
      index.css
      index.js
    ResetPasswordForm/
      index.css
      index.js
    ShiftCard/
      index.css
      index.js
    ShiftStatusToolbar/
      index.css
      index.js
    SidebarLayout/
      index.css
      index.js
    SignUpForm/
      index.css
      index.js
    TextInput/
      index.css
      index.js
    userProfileForm/
      UserProfileForm.js
    utils/
      Permission/
        index.js
    volunteerProfile/
      availabilityGrid/
        index.css
        index.js
      changePasswordCard/
        index.css
        index.js
      classPreferencesCard/
        index.css
        index.js
      volunteerDetailsCard/
        index.css
        index.js
  contexts/
    authContext.js
  data/
    constants.js
  hooks/
    useComponentVisible.js
  pages/
    AdminVerify - ToDelete/
      index.css
      index.js
    AdminVolunterProfile/
      index.js
    Classes/
      index.css
      index.js
    ClassPreferences/
      index.css
      index.js
    CoverageRequests/
      index.js
    Dashboard/
      index.css
      index.js
    ForgotPassword/
      index.css
      index.js
    Login/
      index.css
      index.js
    MemberManagement/
      index.css
      index.js
    ResetPassword/
      index.js
    Schedule/
      index.css
      index.js
    Settings/
      index.js
    Signup/
      index.css
      index.js
    VolunteerProfile/
      index.css
      index.js
  utils/
    buttonConfig.js
    cleanInitials.js
    notyf.js
  App.js
  index.js
  styles.css
.example.env
.gitignore
.prettierrc
docker-compose.yml
Dockerfile
eslint.config.mjs
package.json
rsbuild.config.mjs

================================================================
Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="<%= assetPrefix %>/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Laboratory Management System" />
    <link rel="apple-touch-icon" href="<%= assetPrefix %>/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="<%= assetPrefix %>/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEURON</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <div id="modal-root"></div> 
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
  <script src="https://cdn.lordicon.com/lordicon.js"></script>
  <script
    src="https://kit.fontawesome.com/29f94b1b71.js"
    crossorigin="anonymous"
  ></script>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *

================
File: src/api/adminService.js
================
import api from "./api";

const request = async (path, props) => {
    const authToken = localStorage.getItem("neuronAuthToken");

    if (!authToken) {
        return {
            volunteers: null,
        };
    } else {
        try {
            let response = {};
            if (props) {
                response = await api.post(path, {
                    token: authToken,
                    ...props,
                });
            } else {
                response = await api.post(path, {
                    token: authToken,
                });
            }
            

            return response.data;
        } catch (error) {
            throw error;
        }
    }
}

// Get all volunteers
const getVolunteers = async () => await request("/admin/all-volunteers");

// Get all instructors
const getInstructors = async () => await request("/admin/all-instructors");

// Add an instructor
const addInstructor = async (instructor) => await request("/admin/add-instructor", instructor);

// Edit an instructor
const editInstructor = async (instructor) => await request("/admin/edit-instructor", instructor);

// Delete an instructor
const deleteInstructor = async (instructor_id) => await request("/admin/delete-instructor", instructor_id);

// Get all unverified volunteers
const getUnverifiedVolunteers = async () => await request("/admin/unverified-volunteers");

// Verify/Activate a volunteer
const verifyVolunteer = async ({volunteer_id: volunteerId}) => await request("/admin/verify-volunteer", volunteerId);

// Deactivate a volunteer
const deactivateVolunteer = async ({volunteer_id: volunteerId}) => await request("/admin/deactivate-volunteer", volunteerId);

export { getVolunteers, getInstructors, addInstructor, editInstructor, deleteInstructor, getUnverifiedVolunteers, verifyVolunteer, deactivateVolunteer };

================
File: src/api/api.js
================
import axios from 'axios';
import { backend } from '../data/constants';

const api = axios.create({
    baseURL: backend
});

// Attach auth token to each req
api.interceptors.request.use(
    (config) => {
      const token = localStorage.getItem('neuronAuthToken');

      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      return config;
    },
    (error) => {
      return Promise.reject(error);
    }
);

export default api;

================
File: src/api/authService.js
================
import api from "./api";

// Update a user's password
export const changePassword = async (passwordUpdateData) => {
    const { currentPassword, newPassword } = passwordUpdateData

    try {
        const resetResponse = await api.post("/auth/update-password", {
            currentPassword: currentPassword,
            newPassword: newPassword
        });
        return resetResponse.data;
    } catch (error) {
        console.error('Error updating volunteer data:', error);
        throw error;
    }
};

// Sign up a new user
const signUp = (data) =>
    api
        .post("/auth/register", data)
        .then((response) => {
            return response.data;
        })
        .catch((error) => {
            throw error;
        });

// Send reset password instructions
const sendResetPasswordInstructions = (data) =>
    api
        .post("/auth/send-reset-password-email", data)
        .then((response) => {
            return response.data;
        })
        .catch((error) => {
            throw error;
        });

// Reset password
const resetPassword = (data) =>
    api
        .post("/auth/reset-password", data)
        .then((response) => {
            return response.data;
        })
        .catch((error) => {
            throw error;
        });

// Check if the user is logged in with a valid token
const checkAuth = () => 
    api.get("/auth/is-authenticated")
            .then((response) => {
                return response.data;
            })
            .catch((error) => {
                throw error;
            });

export {
    checkAuth, resetPassword, sendResetPasswordInstructions, signUp
};

================
File: src/api/classesPageService.js
================
// This file groups all the API calls related to the neuron Classes page.
import api from "./api";

const getAllClasses = () =>
  api
    .get("/classes")
    .then((response) => {
      return response.data;
    })
    .catch((error) => {
      console.error(error);
      throw error;
    });

const getAllClassImages = () =>
  api
    .get("/classes/images")
    .then((response) => {
      return response.data;
    })
    .catch((error) => {
      console.error(error);
      throw error;
    });

const getAllClassSchedules = () =>
  api
    .get("/schedules")
    .then((response) => {
      return response.data;
    })
    .catch((error) => {
      console.error(error);
      throw error;
    });

const getClassById = (class_id) =>
  api
    .get("/classes/" + class_id)
    .then((response) => {
      return response.data;
    })
    .catch((error) => {
      console.error(error);
    });

export { getAllClasses, getClassById, getAllClassImages, getAllClassSchedules };

================
File: src/api/homePageService.js
================
//homePageService.js
// This file groups all the API calls related to the neuron home page.
import api from './api';

const getHelloWorld = () => api.get('/')
    .then((response) => {
        console.log(response.data);
        return response.data;
    }).catch((error) => {
        console.error(error);
    });

export { getHelloWorld };

================
File: src/api/imageService.js
================
import { backend } from '../data/constants';

export const formatImageUrl = (image_id) => {
  return image_id ? `${backend}/image/${image_id}` : undefined;
}

================
File: src/api/shiftService.js
================
// This file groups all the API calls related to getting shift information page.
import api from "./api";

const getShift = async (shift_id) => {
  try {
    const response = await api.get(`/shifts/${shift_id}`);

    const res = response.data;
    return res;
  } catch (error) {
    console.error("Error fetching shift info:", error);
    throw error;
  }
};

/**
 * Retrieves shifts from the database with optional filtering.
 *
 * @param {string} [params.volunteer_id] - The ID of the volunteer.
 *   - When omitted or when `type` is not 'coverage', returns only shifts assigned to the volunteer.
 *   - When `type` is 'coverage', excludes shifts assigned to the volunteer (i.e., returns shifts available for coverage).
 * @param {Date} [params.before] - Upper bound for the shift date. Shifts with a shift_date less than or equal to this date are included.
 * @param {Date} [params.after] - Lower bound for the shift date. Shifts with a shift_date greater than or equal to this date are included.
 * @param {'coverage'|'absence'} [params.type] - The type of filtering for coverage requests:
 *   - `'coverage'`: Only include shifts with an associated absence request not belonging to the specified volunteer.
 *   - `'absence'`: Only include shifts with an associated absence request belonging to the volunteer.
 * @param {'absence-pending'|'open'|'coverage-pending'|'resolved' or []} [params.status] - The status for coverage requests either as a single string  or string array.
 * This is only checked when params.type is coverage or requesting, and includes all when not set:
 *   - `'open'`: Include open coverage shifts
 *   - `'pending'`: Include coverage shifts which have a pending coverage request associated
 *   - `'resolved'`: Include coverage shifts which have been resolved.
 *
 * @returns {Promise<any[]>} A promise that resolves to an array of shift records.
 */
const getShifts = async (params) => {
  try {
    const response = await api.get("/shifts", {
      params: params,
      paramsSerializer: {
        indexes: null, // no brackets at all
      }
    });

    return response.data;
  } catch (error) {
    console.error("Error fetching shift info:", error);
    throw error;
  }
};

// Retrieves all shifts for the volunteer monthly schedule view.
// The shift data includes the following shift_type values:
// -- 1. 'my-shifts' - shifts assigned to the volunteer.
// -- 2. 'coverage' - shifts available for coverage by other volunteers.
// -- 3. 'my-coverage-requests' - coverage requests made by the volunteer.
// -- Returns shift details such as date, time, class, duration, and coverage status.
const getVolunteerShiftsForMonth = async (body) => {
  console.error("getVolunteerShiftsForMonth is deprecated: switch to using getShifts in shiftService.js");

  try {
    const response = await api.post("/shifts/volunteer-month", {
      fk_volunteer_id: body.volunteer_id,
      shift_date: body.shiftDate,
    });

    return response.data;
  } catch (error) {
    console.error("Error fetching shift info:", error);
    throw error;
  }
};

// Creates a request to check in for a shift
const checkInShift = async (shift_id) => {
  try {
    const response = await api.patch(`/shifts/check-in/${shift_id}`);

    return response.data;
  } catch (error) {
    console.error("Error checking in for shift: ", error);
    throw error;
  }
};

// Creates a request to cover a shift by a volunteer.
const requestToCoverShift = async (body) => {
  try {
    const response = await api.post("/shifts/cover-shift", {
      request_id: body.request_id,
      volunteer_id: body.volunteer_id,
    });

    return response.data;
  } catch (error) {
    console.error("Error generating request to cover shift:", error);
    throw error;
  }
};

// Cancels a request to cover a shift from another volunteer. An error is thrown if the request is not found or already approved
const cancelCoverShift = async (body) => {
  try {
    const response = await api.delete("/shifts/cover-shift", { 
      data: {
        request_id: body.request_id,
        volunteer_id: body.volunteer_id,
      }
    });

    return response.data;
  } catch (error) {
    console.error("Error cancelling shift coverage:", error);
    throw error;
  }
};

// Creates a request for shift coverage
const requestShiftCoverage = async (body) => {
  try {
    const response = await api.put(`/shifts/shift-coverage-request`, {
      shift_id: body.shift_id
    });

    return response.data;
  } catch (error) {
    console.error("Error requesting coverage for shift: ", error);
    throw error;
  }
}

// Cancels a shift coverage request. An error is thrown if we try to cancel a request that has already been fulfilled or isn't found
const cancelCoverRequest = async (body) => {
  try {
    const response = await api.delete("/shifts/shift-coverage-request", {
      data: {
        request_id: body.request_id,
        shift_id: body.shift_id,
      }
    });

    return response.data;
  } catch (error) {
    console.error("Error cancelling shift coverage request:", error);
    throw error;
  }
}

export {
  cancelCoverRequest, cancelCoverShift, checkInShift, getShift, getShifts,
  getVolunteerShiftsForMonth, requestShiftCoverage, requestToCoverShift
};

================
File: src/api/volunteerService.js
================
import api from './api';

export const fetchVolunteerData = async (volunteer_id) => {
  try {
    const response = await api.get(`/volunteer/${volunteer_id}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching volunteer data:', error);
    throw error;
  }
};

export const fetchUserData = async (user_id) => {
  try {
    const response = await api.get(`/user/${user_id}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching volunteer data:', error);
    throw error;
  }
};

export const updateVolunteerData = async (volunteerData, volunteer_id) => {
  try {
    const response = await api.put(`/volunteer/${volunteer_id}`, volunteerData);
    return response.data;
  } catch (error) {
    console.error('Error updating volunteer data:', error);
    throw error;
  }
};

export const uploadProfilePicture = async (userId, profilePicData) => {
  try {
    const response = await api.post(`/user/${userId}/upload`, profilePicData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    return response.data;
  } catch (error) {
    console.error('Error updating profile picture:', error);
    throw error;
  }
}

export const fetchVolunteerAvailability = async (volunteer_id) => {
  try {
    const response = await api.get(`/volunteer/availability/${volunteer_id}`);
    return response.data; // Assuming API returns an array of time slots
  } catch (error) {
    console.error('Error fetching volunteer availability:', error);
    throw error;
  }
};

export const setVolunteerAvailability = async (volunteer_id, availability) => {
  try {
    const response = await api.post(`/volunteer/availability/${volunteer_id}`, availability);
    return response.data; // Assuming API returns success or updated data
  } catch (error) {
    console.error('Error setting volunteer availability:', error);
    throw error;
  }
};

export const updateVolunteerAvailability = async (volunteer_id, availability) => {
  try {
    const response = await api.put(`/volunteer/availability/${volunteer_id}`, availability);
    return response.data; // Assuming API returns success or updated data
  } catch (error) {
    console.error('Error updating volunteer availability:', error);
    throw error;
  }
};

export const fetchUserPreferredClasses = async (volunteer_id) => {
  try {
    const response = await api.get(`/volunteer/class-preferences/${volunteer_id}`);
    return response.data; // Assuming API returns success or updated data
  } catch (error) {
    console.error('Error fetching volunteer class preferences data:', error);
    throw error;
  }
};

export const fetchAllClassPreferences = async () => {
  try {
    const response = await api.get(`/volunteer/class-preferences/`);
    return response.data; // Assuming API returns success or updated data
  } catch (error) {
    console.error('Error fetching all class preferences data:', error);
    throw error;
  }
};

export const updateUserPreferredClasses = async (volunteer_id, preferredClasses) => {
  try {
    const response = await api.put(`/volunteer/class-preferences/${volunteer_id}`, preferredClasses);
    return response.data; // Assuming API returns success or updated data
  } catch (error) {
    console.error('Error updating volunteer class preferences data:', error);
    throw error;
  }
};

================
File: src/assets/images/button-icons/clock-icon.svg
================
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.5 8C14.5 9.72391 13.8152 11.3772 12.5962 12.5962C11.3772 13.8152 9.72391 14.5 8 14.5C6.27609 14.5 4.62279 13.8152 3.40381 12.5962C2.18482 11.3772 1.5 9.72391 1.5 8C1.5 6.27609 2.18482 4.62279 3.40381 3.40381C4.62279 2.18482 6.27609 1.5 8 1.5C9.72391 1.5 11.3772 2.18482 12.5962 3.40381C13.8152 4.62279 14.5 6.27609 14.5 8ZM0 8C0 10.1217 0.842855 12.1566 2.34315 13.6569C3.84344 15.1571 5.87827 16 8 16C10.1217 16 12.1566 15.1571 13.6569 13.6569C15.1571 12.1566 16 10.1217 16 8C16 5.87827 15.1571 3.84344 13.6569 2.34315C12.1566 0.842855 10.1217 0 8 0C5.87827 0 3.84344 0.842855 2.34315 2.34315C0.842855 3.84344 0 5.87827 0 8ZM7.25 3.75V8C7.25 8.25 7.375 8.48438 7.58437 8.625L10.5844 10.625C10.9281 10.8562 11.3938 10.7625 11.625 10.4156C11.8562 10.0687 11.7625 9.60625 11.4156 9.375L8.75 7.6V3.75C8.75 3.33437 8.41562 3 8 3C7.58437 3 7.25 3.33437 7.25 3.75Z" fill="#808080"/>
</svg>

================
File: src/assets/images/button-icons/plus-icon.svg
================
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.23077 1.23077C9.23077 0.55 8.68077 0 8 0C7.31923 0 6.76923 0.55 6.76923 1.23077V6.76923H1.23077C0.55 6.76923 0 7.31923 0 8C0 8.68077 0.55 9.23077 1.23077 9.23077H6.76923V14.7692C6.76923 15.45 7.31923 16 8 16C8.68077 16 9.23077 15.45 9.23077 14.7692V9.23077H14.7692C15.45 9.23077 16 8.68077 16 8C16 7.31923 15.45 6.76923 14.7692 6.76923H9.23077V1.23077Z" fill="#808080"/>
</svg>

================
File: src/assets/images/button-icons/x-icon.svg
================
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.5265 2.73247C16.1512 2.10776 16.1512 1.09324 15.5265 0.46853C14.9018 -0.156177 13.8872 -0.156177 13.2625 0.46853L8 5.73606L2.73247 0.473528C2.10776 -0.151179 1.09324 -0.151179 0.46853 0.473528C-0.156177 1.09824 -0.156177 2.11276 0.46853 2.73747L5.73606 8L0.473528 13.2675C-0.151179 13.8922 -0.151179 14.9068 0.473528 15.5315C1.09824 16.1562 2.11276 16.1562 2.73747 15.5315L8 10.2639L13.2675 15.5265C13.8922 16.1512 14.9068 16.1512 15.5315 15.5265C16.1562 14.9018 16.1562 13.8872 15.5315 13.2625L10.2639 8L15.5265 2.73247Z" fill="#808080"/>
</svg>

================
File: src/components/AddEditInstructorModal/index.css
================
.add-instructor-form {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.add-instructor-inputs {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.admin-add-instructor-button {
    margin-top: 2vw;
    width: 100%;
    height: 2.7vw !important;
    border: none;
    color: var(--white);
    background-color: var(--button-blue);
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}

.edit-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
}

.delete-button {
    background: white;
    color: var(--error-red);
    border: 1px solid var(--error-red);
}

================
File: src/components/AddEditInstructorModal/index.js
================
import TextInput from "../TextInput"
import { Formik } from "formik";
import * as Yup from "yup";
import "./index.css";
import { useAuth } from "../../contexts/authContext";
import notyf from "../../utils/notyf";
import { addInstructor, editInstructor } from "../../api/adminService";
import cleanInitials from "../../utils/cleanInitials";
import { useEffect, useState } from "react";
import Modal from "../Modal";
import DeactivateReactivateModal from "../Deactivate-Reactivate-Modal";

const AddEditInstructorModal = ({ closeEvent, instructor_data = null }) => {

    const { user } = useAuth();
    const [instructorData, setInstructorData] = useState({
        instructor_name: "",
        instructor_email: "",
        initials: "",
    });
    const [loading, setLoading] = useState(true);
    const [showDeleteModal, setShowDeleteModal] = useState(false);

    useEffect(() => {
        if (instructor_data) {
            setInstructorData({
                instructor_name: instructor_data.f_name + " " + instructor_data.l_name,
                instructor_email: instructor_data.email,
                initials: "",
            });
        }
        setLoading(false);
    }, [instructor_data]);

    const AddInstructorSchema = Yup.object().shape({
        instructor_name: Yup.string()
            .required("Please enter instructor's name.")
            .matches(/^[a-zA-Z]+ [a-zA-Z]+$/, "Please enter instructor's full name."),
        instructor_email: Yup.string()
            .required("Please enter instructor's email.")
            .email("Please enter a valid email."),
        initials: Yup.string()
            .required("Please enter your admin initials.")
            .matches(/^[a-zA-Z][^a-zA-Z]*[a-zA-Z][^a-zA-Z]*$/, "Please enter only two letters."), 
    });

    return (
        <div>
            {!loading && 
                <Formik
                    initialValues={instructorData}
                    validationSchema={AddInstructorSchema}
                    onSubmit={(values, { setSubmitting }) => {
                        const initials = cleanInitials(values.initials);
                        // if (initials !== user.f_name[0].toUpperCase() + "" + user.l_name[0].toUpperCase()) {
                        //     notyf.error("Initials don't match your admin initials.");
                        //     setSubmitting(false);
                        //     return;
                        // }
                        const instructor_name = values.instructor_name.split(" ");
                        const data = {
                            f_name: instructor_name[0],
                            l_name: instructor_name[1],
                            email: values.instructor_email
                        }

                        if (instructor_data !== null) {
                            data.instructor_id = instructor_data.instructor_id;

                            editInstructor(data)
                                .then(() => {
                                    notyf.success("Instructor details updated successfully.");
                                    closeEvent();
                                })
                                .catch((error) => {
                                    notyf.error("Failed to update instructor details.");
                                });
                        } else {
                            addInstructor(data)
                                .then(() => {
                                    notyf.success("Instructor added successfully.");
                                    closeEvent();
                                })
                                .catch((error) => {
                                    notyf.error("Failed to add instructor.");
                                });
                        }
                        setSubmitting(false);
                    }}>
                    {({
                        values,
                        errors,
                        touched,
                        handleChange,
                        handleBlur,
                        handleSubmit,
                        isSubmitting,
                    }) => (
                        <form onSubmit={handleSubmit} className="add-instructor-form">
                            <div className="add-instructor-inputs">
                                <TextInput
                                    label="Instructor Name"
                                    hint="(Required)"
                                    name="instructor_name"
                                    type="text"
                                    placeholder="Enter instructor's full name"
                                    value={values.instructor_name}
                                    handleChange={handleChange}
                                    handleBlur={handleBlur}
                                    errors={errors}
                                    touched={touched}
                                    />
                                <TextInput
                                    label="Instructor Email"
                                    hint="(Required)"
                                    name="instructor_email"
                                    type="email"
                                    placeholder="Enter instructor's email"
                                    value={values.instructor_email}
                                    handleChange={handleChange}
                                    handleBlur={handleBlur}
                                    errors={errors}
                                    touched={touched}
                                    />
                                <TextInput
                                    label="Your admin initials (for logging purposes)"
                                    hint="(Required)"
                                    name="initials"
                                    type="text"
                                    placeholder="M.U"
                                    value={values.initials}
                                    handleChange={handleChange}
                                    handleBlur={handleBlur}
                                    errors={errors}
                                    touched={touched}
                                    />
                            </div>
                            {instructor_data === null && <button className="admin-add-instructor-button" type="submit" disabled={isSubmitting}>Add Instructor</button>}
                            {instructor_data !== null && <div className="edit-buttons">
                                <button onClick={() => setShowDeleteModal(true)} type="button" className="admin-add-instructor-button delete-button">Delete</button>
                                <button className="admin-add-instructor-button" type="submit" disabled={isSubmitting}>Save</button>
                                </div>}
                        </form>
                    )}
                </Formik>
                }
                
                {instructor_data !== null &&
                    <Modal title="Delete instructor profile" isOpen={showDeleteModal} onClose={() => setShowDeleteModal(false)} width="500px" height="fit-content">
                        <DeactivateReactivateModal id={instructor_data.instructor_id} closeEvent={() => {
                            setShowDeleteModal(false);
                            closeEvent();
                        }} type={2} />
                    </Modal>
                }
        </div>
    )
}

export default AddEditInstructorModal

================
File: src/components/AuthenticationFormWrapper/index.css
================
.rightSideWithForm {
    height: 100vh;
    width: 60vw;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.welcomeHeading {
    font-family: var(--font-secondary);
    width: 35.5vw;
}

.welcomeHeading h1 {
    font-size: 2.5vw;
    font-weight: 400;
    color: var(--primary-blue);
}

.welcomeHeading p {
    font-weight: 400;
    font-size: 0.9vw;
    margin-top: -1vw;
    margin-bottom: 2vw;
}

================
File: src/components/AuthenticationFormWrapper/index.js
================
import SignUpForm from "../SignUpForm";
import LoginForm from "../LoginForm";
import ForgotPassForm from "../ForgotPassForm";
import ResetPasswordForm from "../ResetPasswordForm";
import { useState } from "react";
import "./index.css";

const RightSideWithForm = ({ type, heading, subHeading = "" }) => {
    const [newHeading, setNewHeading] = useState(heading);
    const [newSubHeading, setNewSubHeading] = useState(subHeading);

    return (
        <div className="rightSideWithForm">
            <div className="welcomeHeading">
                <h1>{newHeading}</h1>
                {newSubHeading.length > 0 && (
                    <p dangerouslySetInnerHTML={{ __html: newSubHeading }} />
                )}
            </div>
            {type === "login" && <LoginForm />}
            {type === "signup" && <SignUpForm />}
            {type === "forgotPass" && (
                <ForgotPassForm
                    setNewHeading={setNewHeading}
                    setNewSubHeading={setNewSubHeading}
                />
            )}
            {type === "resetPass" && <ResetPasswordForm />}
        </div>
    );
};

export default RightSideWithForm;

================
File: src/components/CalendarView/index.css
================
.calendar-container {
    padding-left: 36px;
    height: 100%;
    overflow: scroll;
}

.calendar-nav {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.calendar-btn {
    border: none;
    background: white;
    cursor: pointer;
    display: flex;
    align-items: center;
}

.calendar-btn i {
    color: var(--dark-grey);
}

.calendar-grid {
    width: 100%;
    table-layout: fixed;
    min-width: 768px;
}

.calendar-grid thead th {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: var(--white);
}

.calendar-grid th:first-child,
.calendar-grid td:first-child {
    min-width: 6vw;
}

.calendar-grid thead tr th:nth-child(n+2):nth-child(even) {
    background-color: #f9f9f9;
}

.calendar-grid thead tr th:nth-child(n+2):nth-child(odd).day-header {
    background-color: var(--white);
}

.calendar-grid tbody tr td:nth-child(n+2):nth-child(even) {
    background-color: #f9f9f9;
}

.calendar-grid thead th.day-header {
    padding: 8px;
    padding-top: 12px;
    text-align: left;
    font-weight: var(--regular) !important;
    vertical-align: top;
    border-bottom: 1px solid var(--grey);
}

.calendar-grid thead.shadow th.day-header {
    border-bottom: none;
}

.day-header:last-child {
    border-right: none;
}

.calendar-grid thead.shadow::before {
    box-shadow: inset 0 1px 1px 0 rgba(0, 0, 0, .14), inset 0 2px 1px -1px rgba(0, 0, 0, .12);
    content: "";
    height: 4px;
    bottom: -4px;
    position: absolute;
    width: 100%;
}

.calendar-grid thead.shadow th.time-header::before {
    background-image: linear-gradient(to right, var(--white), rgba(255, 255, 255, 0));
    content: "";
    height: 2px;
    left: 0px;
    bottom: -2px;
    position: absolute;
    width: 80px;
    z-index: 5;
}

.day-number {
    font-size: 28px;
}

.day-name {
    font-family: var(--font-secondary);
}

.time-column {
    width: 68px;
}

.time-slot {
    height: 36px;
    vertical-align: top;
    position: relative;
}

.time-label-calendar {
    font-size: 16px;
}

.event {
    position: absolute;
    left: 2px;
    right: 2px;
    margin-top: 2px;
    padding: 6px;
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--white);
    cursor: pointer;
    box-shadow: 0px 4px 16px rgba(15, 17, 17, 0.1);
    border: 1px solid var(--bg-grey-outline, #D9D9D9);
}

.event-title {
    font-weight: 500;
    display: -webkit-box;
    line-clamp: 2;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.event-time {
    font-size: 0.75rem;
}

.calendar-grid th,
.calendar-grid td {
    border: none;
}

.calendar-grid thead th:nth-child(n+3),
.calendar-grid tbody td:nth-child(n+3) {
    border-left: 1px solid var(--grey);
}

.calendar-grid thead th:nth-child(2),
.calendar-grid tbody td:nth-child(2) {
    border-left: none;
}

.calendar-grid tbody tr:nth-child(even) td {
    border-bottom: 1px solid var(--grey);
}

.calendar-grid tbody tr:nth-child(even) td:first-child {
    border-bottom: none;
}

.calendar-grid thead {
    position: sticky;
    top: 0;
    z-index: 2;
}

================
File: src/components/CalendarView/index.js
================
import dayjs from "dayjs";
import { useState } from "react";
import { SHIFT_TYPES } from "../../data/constants";
import "./index.css";

const timeSlots = Array.from({ length: 26 }, (_, i) => {
  const hour = Math.floor(i / 2) + 8; // Start at 08:00
  const minutes = (i % 2) * 30; // Alternate between 0 and 30
  return `${hour.toString().padStart(2, "0")}:${minutes
    .toString()
    .padStart(2, "0")}:00`;
});

const CalendarView = ({ days, shifts, onShiftSelect }) => {
  const [scrollTop, setScrollTop] = useState(0);
  // only mon to sat
  days = days.slice(0, 6);

  const colors = {
    [SHIFT_TYPES.MY_SHIFTS]: "var(--green)",
    [SHIFT_TYPES.COVERAGE]: "var(--red)",
    [SHIFT_TYPES.MY_COVERAGE_REQUESTS]: "var(--yellow)",
    [SHIFT_TYPES.DEFAULT]: "var(--grey)",
  };

  const handleShiftSelection = (shift) => {
    onShiftSelect(shift);
  };

  return (
    <div 
      className="calendar-container"
      onScroll={(e) => setScrollTop(e?.target?.scrollTop)}
    >
      <table className="calendar-grid" cellSpacing="0" cellPadding="0">
        <colgroup>
          <col className="time-column"/>
          {Array.from({ length: 6 }).map((_, idx) => (
            <col key={idx} className="day-column" />
          ))}
        </colgroup>
        <thead
          className={scrollTop > 0 ? 'shadow' : ''}
        >
          <tr>
            <th className="time-header"></th>
            {days.map((day) => (
              <th className="day-header" key={day.dayOfMonthWithZero}>
                <div className="day-number" s>
                  {day.dayOfMonthWithZero}
                </div>
                <div className="day-name">{day.name}</div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {timeSlots.map((time) => (
            <tr key={time}>
              {/* Time column */}
              <td className="time-slot">
                {time.endsWith("00:00") && (
                  <span className="time-label-calendar">
                    {dayjs(time, "HH:mm:ss").format("h A")}
                  </span>
                )}
              </td>
              {/* Day columns */}
              {days.map((day) => (
                <td key={day.dayOfMonthWithZero + time} className="time-slot">
                  {shifts
                    .filter(
                      (shift) =>
                        shift.shift_date === dayjs(day.date).toISOString() &&
                        shift.start_time === time
                    )
                    .map((shift) => (
                      <div
                        key={shift.shift_id}
                        className="event"
                        onClick={() => handleShiftSelection(shift)}
                        style={{
                          zIndex: 1,
                          top: 0,
                          borderLeft: colors[shift.shift_type] + " 6px solid",
                          height:
                            dayjs(shift.end_time, "HH:mm:ss").diff(
                              dayjs(shift.start_time, "HH:mm:ss"),
                              "hour",
                              true
                            ) *
                              73 -
                            19 +
                            "px",
                        }}
                      >
                        <div className="event-title">{shift.class_name}</div>
                        <div className="event-time">
                          {dayjs(shift.start_time, "HH:mm:ss").format("h:mm A")}{" "}
                          - {dayjs(shift.end_time, "HH:mm:ss").format("h:mm A")}
                        </div>
                      </div>
                    ))}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CalendarView;

================
File: src/components/Checkbox/index.css
================
@import '../../styles.css';  /*Imports custom fonts*/

.check-box {
     background-color: white;
     width: 16px;
     height: 16px;
     border: 1px solid var(--primary-blue);
     border-radius: 2px;
     padding: 0;
     position: relative;
}

.check-box:hover {
     cursor: pointer;
     filter:brightness(0.85);
}

.check-box > img {
     width: 17px;
     height: 17px;
     position: relative;
     top: -1px;
     left: -1px;
}

================
File: src/components/Checkbox/index.js
================
import "./index.css";
import React, {useState, useEffect} from 'react';
import checkbox from "../../assets/checkbox.png";

function CheckBox({onClicked, active}) {
     const [chosen, setChosen] = useState(active);

     useEffect(()=>{setChosen(active)}, [active]);

     const handleBoxClicked = () => {
          onClicked();
          setChosen(!chosen);
     }

     return (
          <button className="check-box" onClick={handleBoxClicked}>
               {chosen ? <img src={checkbox} alt="Checkbox"/> : null}
          </button>

     );
}

export default CheckBox;

================
File: src/components/CheckInCard/index.js
================
import React, { useState, useEffect } from "react";
import ArrowForwardIcon from "@mui/icons-material/ArrowForwardIos";
import dayjs from "dayjs";

export default function CheckInCard({ shift }) {
  const currentDate = dayjs();
  const shiftDay = dayjs(shift.shift_date).format("YYYY-MM-DD");
  const shiftStart = dayjs(`${shiftDay} ${shift.start_time}`);
  const checkIn = dayjs(shift.shift_date).isSame(currentDate, "day");

  return checkIn ? (
    <div className="dash-check-in">
      <div className="dash-check-in-content">
        <div className="dash-check-in-title">Check In</div>
        <div className="dash-check-in-content">{shift.class_name}</div>
      </div>
      <ArrowForwardIcon sx={{ fontSize: 30 }} />
    </div>
  ) : (
    <div className="dash-next-check-in">
      <div className="dash-next-title">Next Check-In in</div>
      <div className="dash-next-time">
        <span className="dash-next-time-num">
          {shiftStart.diff(currentDate, "d")}
        </span>{" "}
        days{" "}
        <span className="dash-next-time-num">
          {shiftStart.diff(currentDate, "h") % 24}
        </span>{" "}
        hours{" "}
        <span className="dash-next-time-num">
          {shiftStart.diff(currentDate, "m") % 60}
        </span>{" "}
        minutes
      </div>
    </div>
  );
}

================
File: src/components/ClassCard/index.css
================
.class-card {
  display: flex;
  flex-direction: column;
  min-width: 200px;
  width: 25%;
  border: 1px solid var(--grey);
  border-radius: 8px;
  padding: 16px;
  padding-bottom: 32px;
  cursor: pointer;
}

.class-image {
  width: auto;
  height: auto;
  aspect-ratio: 1 / 1;
  border-radius: 4px;
}

.class-info {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding-top: 0.5rem;
}

.class-level {
  margin: 0;
  color: var(--primary-blue);
  font-size: var(--small-text);
  font-weight: var(--regular);
}

.class-title {
  margin: 0;
  font-size: var(--medium-text);
  font-weight: var(--semi-bold);
}

.class-schedule-container {
  display: flex;
  flex-direction: column;
}

.class-schedule {
  margin: 0;
  font-size: var(--small-text);
  font-weight: var(--regular);
}

================
File: src/components/ClassCard/index.js
================
import "./index.css";

const formatSchedules = (schedules) => {
  const formatTime = (time) => {
    if (time === null || time === undefined || time === "") return "";
    const [hour, minute] = time.split(":").map(Number);
    const period = hour >= 12 ? "PM" : "AM";
    const formattedHour = hour % 12 || 12;
    return `${formattedHour}:${minute.toString().padStart(2, "0")} ${period}`;
  };

  const dayMap = {
    0: "Sunday",
    1: "Monday",
    2: "Tuesday",
    3: "Wednesday",
    4: "Thursday",
    5: "Friday",
    6: "Saturday",
  };

  // sort by day of week then start time
  const sortedSchedules = schedules.sort((a, b) => {
    if (a.day !== b.day) {
      return a.day - b.day;
    }
    return a.start_time.localeCompare(b.start_time);
  });

  return sortedSchedules.map((schedule) => {
    const day = dayMap[schedule.day];
    const startTime = formatTime(schedule.start_time);
    const endTime = formatTime(schedule.end_time);
    return `${day}, ${startTime} - ${endTime}`;
  });
};

const ClassCard = ({ classData, onClassSelect }) => {
  const { class_id, class_name, category, subcategory, image_url, schedules } =
    classData;

  const formattedSchedules = formatSchedules(schedules);

  return (
    <div className="class-card" onClick={() => onClassSelect(classData)}>
      <img className="class-image" src={image_url} />
      <div className="class-info">
        <h4 className="class-title">{class_name}</h4>
        <div className="class-schedule-container">
          {formattedSchedules.map((schedule, index) => (
            <p key={index} className="class-schedule">
              {schedule}
            </p>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ClassCard;

================
File: src/components/ClassCategoryContainer/index.css
================
.category-container {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.category-header {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
  border-bottom: 1px solid var(--grey);
  margin-top: 48px;
  padding-bottom: 8px;
}

.category-title {
  margin: 0;
  font-size: var(--title-text);
  font-weight: var(--semi-bold);
}

.more-info-icon {
  margin-left: 0.75rem;
  height: 1rem;
  width: 1rem;
  aspect-ratio: 1 / 1;
  cursor: pointer;
}

.sub-category-container {
  padding: 0 20px;
}

.sub-category-title {
  margin: 28px 0 12px 0;
  font-size: var(--title-text);
  font-weight: var(--semi-bold);
}

.class-cards {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 20px;
}

================
File: src/components/ClassCategoryContainer/index.js
================
import "./index.css";
import React from "react";
import ClassCard from "../ClassCard";
import moreInfo from "../../assets/more-info.png";

const ClassCategoryContainer = React.forwardRef(
  ({ category, classData, onClassSelect, ...props }, ref) => {
    const groupedBySubcategory = classData.reduce((acc, classItem) => {
      const subcategory = classItem.subcategory || ""; // Handle no subcategory case
      if (!acc[subcategory]) {
        acc[subcategory] = [];
      }
      acc[subcategory].push(classItem);
      return acc;
    }, {});
    // console.log("Grouped by subcategory:", groupedBySubcategory);

    return (
      <div className="category-container" ref={ref} {...props}>
        <div className="category-header">
          <h2 className="category-title">{category}</h2>
          <img className="more-info-icon" src={moreInfo} alt="More Info" />
        </div>
        {Object.entries(groupedBySubcategory).map(
          ([subcategory, subcategoryClasses]) => (
            <div key={subcategory} className="sub-category-container">
              <h3 className="sub-category-title">{subcategory}</h3>
              <div className="class-cards">
                {subcategoryClasses.map((classItem) => (
                  <ClassCard
                    key={classItem.class_id}
                    classData={classItem}
                    onClassSelect={onClassSelect}
                  />
                ))}
              </div>
            </div>
          )
        )}
      </div>
    );
  }
);

export default ClassCategoryContainer;

================
File: src/components/ClassPreferencesCard/index.css
================
@import '../../styles.css';

/* General Card Styles */
.class-pref-card {
    display: flex;
    margin: .5rem;
    padding: .5rem .8rem;
    border: 1px solid #ccc;
    border-radius: .8rem;
    box-shadow: 0px 4px 16px rgba(15, 17, 17, 0.1);
    min-height: 3.5rem;
    align-items: center;
    background-color: white;
}

.class-pref-card:hover {
    filter: brightness(0.95);
}

/* Vertical Line Styles */
.vertical-line {
    width: .5rem;
    background-color: var(--grey);
    border-radius: 1.5rem;
    height: 80%;
    min-height: 3rem;
    margin-right: 1rem;
}

/* Card Content Layout */
.card-content {
    display: flex;
    width: 100%;
    align-items: center;
    height: 80%;
}


.card-content .segment-1 {
    flex: 1;
    display: flex;
    flex-direction: column;
    margin-right: 8px;
}

.class-pref-time {
    width: 70px;
}

.card-content .segment-2 {
    flex: 4;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

/* Text and Typography */
.card-text {
    margin: 0;
    font-family: var(--font-primary);
}

.card-text h2 {
    margin: .25rem 0;
    font-size: 1rem;
    font-weight: 400;
    color: var(--text-dark, #0F1111);
}

.card-text p {
    margin: 0;
    font-size: var(--small-text);
    font-weight: 400;
    color: var(--text-grey, #808080);
}

.segment-1 > .card-text > h2 {
    font-weight: 500;
}



/* Responsive Adjustments */
@media (max-width: 1000px) {
    .segment-1 {
        display: none;
    }

    .segment-2 {
        flex: 1;
        flex-direction: column;
    }
}

================
File: src/components/ClassPreferencesCard/index.js
================
import './index.css'; 

function ClassPreferencesCard({ classData, fullWith }) {
    let card_width;
    if (fullWith) {
        card_width = "90%";
    } else {
        card_width = "40%";
    }

    const RANK1_COLOR = "rgba(67, 133, 172, 1)";
    const RANK2_COLOR = "rgba(67, 133, 172, 0.7)";
    const RANK3_COLOR = "rgba(67, 133, 172, 0.3)";

    const rank = classData.class_rank;
    const name = classData.class_name;
    const instruction = classData.instructions;
    const start_time = classData.start_time;
    const end_time = classData.end_time;

    const timeDifference = (end, start) => {
        // Assume classes are done within one day, end time > start time 
        if (end === null || end === undefined || end ==="" || start === null || start === undefined || start === "") return "";

        const e = end.split(":");
        const s = start.split(":");
        if (e[1] < s[1]) {
            return `${Number(e[0]) - 1 - Number(s[0])} hour ${-(Number(e[1]) - Number(s[1]))} min`;
        } else if (e[1] > s[1]) {
            return `${Number(e[0]) - Number(s[0])} hour ${(Number(e[1]) - Number(s[1]))} min`;
        } else {
            return `${Number(e[0]) - Number(s[0])} hour`;
        }
    };

    let lineColor; 
    if (rank === 1) {
        lineColor = RANK1_COLOR;
    } else if (rank === 2) {
        lineColor = RANK2_COLOR;
    } else {
        lineColor = RANK3_COLOR;
    }

    const formatTime = (time) => {
        if (time === null || time === undefined || time === "") return "";

        const [hour, minute] = time.split(":").map(Number);
        const period = hour >= 12 ? "PM" : "AM";
        const formattedHour = hour % 12 || 12;
        return `${formattedHour}:${minute.toString().padStart(2, "0")} ${period}`;
    };

    return (
        <div className="class-pref-card" style={{width: card_width}} >
            <div className="vertical-line" style={{ backgroundColor: lineColor }} />
            <div className="card-content">
                <div className="column segment-1">
                    <div className="card-text">
                        <h2 className="class-pref-time">{formatTime(start_time)}</h2>
                        <p>{timeDifference(end_time, start_time)}</p>
                    </div>
                </div>
                <div className="column segment-2">
                    <div className="card-text">
                        <h2>{name}</h2>
                        <p>{instruction.substring(0, 50)}{instruction.length > 40 ? '...' : ''}</p>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default ClassPreferencesCard;

================
File: src/components/CustomButton/index.css
================
.custom-button{
    width: 100%;
    padding: 0.9vw;
    border-radius: 8px;
    border: none;
    background-color: var(--button-blue);
    font-family: var(--font-primary);
    box-shadow: 0px 4px 16px #0F111205;
    cursor: pointer;
    margin-top: 0.5vw;
    color: white;
    font-size: 1vw;
}

.custom-button:disabled {
    background-color: var(--grey);
    cursor: not-allowed;
}

================
File: src/components/CustomButton/index.js
================
import "./index.css";

const CustomButton = ({ text, isSubmitting }) => {
    return (
        <button className="custom-button" type="submit" disabled={isSubmitting}>
            {text}
        </button>
    );
};

export default CustomButton;

================
File: src/components/DashboardCoverage/index.css
================
.dash-hours-to-complete {
    font-size: 40px;
    font-weight: 500;
    color: #952018;
    margin: 0px;
}

.dash-progress-bar {
    width: 100%;
    height: 28px;
    border-radius: 4px;
    display: flex;
    flex-direction: row;
    border: var(--primary-blue) 2px solid;
    margin-top: 1rem;
}

.dash-progress-completed, .dash-progress-upcoming {
    height: 100%;
}

.dash-progress-completed {
    background-color: var(--primary-blue);
    border-top-left-radius: 2px;
    border-bottom-left-radius: 2px;
}

.dash-progress-upcoming {
    background-color: #808080;
}

.dash-progress-legend {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 18px;
}

.dash-progress-indicator {
    display: flex;
    flex-direction: row;
    gap: 0.4rem;
    align-items: center;
}

.dash-indicator-blue {
    width: 14px;
    height: 14px;
    background-color: var(--primary-blue);
    border-radius: 4px;
}

.dash-indicator-grey {
    width: 14px;
    height: 14px;
    background-color: #808080;
    border-radius: 4px;
}

.dash-indicator-white {
    width: 12px;
    height: 12px;
    border: var(--primary-blue) 2px solid;
    border-radius: 4px;
}

================
File: src/components/DashboardCoverage/index.js
================
import "./index.css";
import React, { useState, useEffect, useRef } from "react";

export default function DashboardCoverage({
  completed,
  upcoming,
  requested,
  future,
}) {
  const progressCompleted = useRef(null);
  const progressUpcoming = useRef(null);
  const totalHours = completed + upcoming + requested;
  useEffect(() => {
    if (progressCompleted.current) {
      progressCompleted.current.style.width = `${
        (completed / totalHours) * 100
      }%`;
    }
    if (progressUpcoming.current) {
      progressUpcoming.current.style.width = `${
        (upcoming / totalHours) * 100
      }%`;
    }
  }, [completed, upcoming, requested, future]);

  return (
    <>
      <div>
        <span className="dash-hours-to-complete">{upcoming}</span> to be
        completed
      </div>
      <div className="dash-progress-bar">
        <div ref={progressCompleted} className="dash-progress-completed"></div>
        {future && (
          <div ref={progressUpcoming} className="dash-progress-upcoming"></div>
        )}
      </div>
      <div className="dash-progress-legend">
        <div className="dash-progress-indicator">
          <div className="dash-indicator-blue"></div>
          <span>Completed</span>
        </div>
        {future && (
          <div className="dash-progress-indicator">
            <div className="dash-indicator-grey"></div>
            <span>Upcoming</span>
          </div>
        )}

        <div className="dash-progress-indicator">
          <div className="dash-indicator-white"></div>
          <span>Requested</span>
        </div>
      </div>
    </>
  );
}

================
File: src/components/DashCoverShifts/index.js
================
import "./index.css";
import React, { useState } from "react";
import ArrowForwardIcon from "@mui/icons-material/ArrowForwardIos";
import dayjs from "dayjs";
import ShiftCard from "../ShiftCard";
import { getButtonConfig } from "../../utils/buttonConfig";

export default function DashShifts({
  groupedShifts,
  future,
  handleShiftUpdate,
  volunteerID
}) {
  const currentDate = dayjs();

  return (
    <div className="dash-shifts-container">
      <div className="dash-card-title">
        {future ? "Shifts In Need of Coverage" : "Shifts Covered"}{" "}
        <ArrowForwardIcon sx={{ fontSize: "16px", color: "#808080" }} />
      </div>
      <div className="dash-schedule-container">
        {Object.keys(groupedShifts).length > 0 ? (
          Object.keys(groupedShifts).map((date) => (
            <div key={date} className="dash-schedule-date">
              {/* Date Header */}
              <div
                className={`${
                  dayjs(date).isSame(currentDate, "day")
                    ? "selected-date"
                    : "non-selected-date"
                }`}
              >
                {dayjs(date).format("MMM D")}
                {dayjs(date).isSame(currentDate, "day") && " | Today"}
              </div>

              {/* Shift List for this date */}
              <div className="dash-shift-list">
                {groupedShifts[date].map((shift) => (
                  <ShiftCard
                    key={shift.fk_schedule_id}
                    shift={shift}
                    shiftType={shift.shift_type}
                    onShiftSelect={handleShiftUpdate} // Pass the handler
                    buttonConfig={getButtonConfig(shift, handleShiftUpdate, volunteerID)}
                  />
                ))}
              </div>
            </div>
          ))
        ) : (
          <p>No shifts to display for this month.</p>
        )}
      </div>
    </div>
  );
}

================
File: src/components/DashShifts/index.css
================
.dash-shifts-container {
    display: flex;
    flex-direction: column;
    width: 100%;
}

.dash-schedule-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
}

.dash-shift-list {
    display: flex; 
    flex-direction: column;
    width: 92%;
}

================
File: src/components/DashShifts/index.js
================
import ArrowForwardIcon from "@mui/icons-material/ArrowForwardIos";
import dayjs from "dayjs";
import React from "react";
import { useNavigate } from "react-router-dom";
import { getButtonConfig } from "../../utils/buttonConfig";
import ShiftCard from "../ShiftCard";
import "./index.css";

export default function DashShifts({
  groupedShifts,
  future,
  handleShiftUpdate,
  volunteerID,
}) {
  const currentDate = dayjs();
  const navigate = useNavigate();

  return (
    <div className="dash-shifts-container">
      <div
        className="dash-card-title"
        onClick={() => navigate("/schedule")}
      >
        My {future ? "Upcoming" : "Completed"} Shifts{" "}
        <ArrowForwardIcon sx={{ fontSize: "16px", color: "#808080" }} />
      </div>
      <div className="dash-schedule-container">
        {Object.keys(groupedShifts).length > 0 ? (
          Object.keys(groupedShifts).map((date) => (
            <div key={date} className="dash-schedule-date">
              {/* Date Header */}
              <div
                className={`${
                  dayjs(date).isSame(currentDate, "day")
                    ? "selected-date"
                    : "non-selected-date"
                }`}
              >
                {dayjs(date).format("MMM D")}
                {dayjs(date).isSame(currentDate, "day") && " | Today"}
              </div>

              {/* Shift List for this date */}
              <div className="dash-shift-list">
                {groupedShifts[date].map((shift) => (
                  <ShiftCard
                    key={shift.shift_id}
                    shift={shift}
                    shiftType={shift.shift_type}
                    onShiftSelect={handleShiftUpdate} // Pass the handler
                    buttonConfig={getButtonConfig(
                      shift,
                      handleShiftUpdate,
                      volunteerID
                    )}
                  />
                ))}
              </div>
            </div>
          ))
        ) : (
          <p>No shifts to display for this month.</p>
        )}
      </div>
    </div>
  );
}

================
File: src/components/DateToolbar/index.css
================
@import "../../styles.css";

.date-toolbar {
    display: flex;
    justify-content: space-between;
    width: 100%;
}

.nav-group {
    display: flex;
    align-items: center;
    gap: 16px;
    /* margin-right: 8px; */
}

.date-toolbar .left-nav {
    display: flex;
}

/* Override default button styles */
.date-toolbar .MuiButton-root {
    color: var(--dark);
    text-transform: none;
}

.day-navigation {
    display: flex;
}

button {
    color: var(--dark);
}

/* Override default icon colors */
.date-toolbar .MuiSvgIcon-root {
    color: var(--dark); /* Set icon color to dark */
}

/* StaticDatePicker Custom Styles */

/* Styling for the day cells in the date picker */
.MuiPickersDay-root {
    transition: none !important;
}

/* Styling for the hovered day cell */
.MuiPickersDay-root:hover {
    background-color: transparent !important;
    transform: none !important;
}

/* Styling for the selected day cell */
.MuiPickersDay-root.Mui-selected {
    border: 1px solid #1976d2 !important;
    border-radius: 10px;
    background-color: #e3f2fd !important;
    color: #000 !important;
    transform: none !important;
}

/* Hover effect for selected day cell */
.MuiPickersDay-root.Mui-selected:hover {
    background-color: rgba(25, 118, 210, 0.1) !important;
}

/* Styling for today's date (dot beneath the number) */
.MuiPickersDay-root.MuiPickersDay-today {
    position: relative;
    border: none !important;
    color: #000 !important;
}

.MuiPickersDay-root.MuiPickersDay-today::after {
    content: "";
    position: absolute;
    bottom: 4px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background-color: #1976d2;
    border-radius: 50%;
}

/* Select button to toggle between list and calendar view */
.view-mode-select {
    z-index: 3;
}

.viewMode__control {
    border: none !important;
    box-shadow: none !important;
}

.viewMode__indicator-separator {
    display: none;
}

.viewMode__value-container {
    text-align: right;
}

.viewMode__menu {
    border-radius: 8px !important;
    margin-top: -4px !important;
    right: 0 !important;
    min-width: fit-content !important;
}

.viewMode__menu-list {
    padding: 8px !important;
    border: 1px solid var(--primary-blue) !important;
    border-radius: 8px !important;
}

.viewMode__option:nth-child(2) {
    margin-top: 4px !important;
}

.viewMode__option {
    border-radius: 3px;
    color: var(--dark) !important;
    cursor: pointer;
}

.viewMode__option--is-selected {
    border: 1px solid var(--primary-blue) !important;
    background-color: var(--light-grey) !important;
}

================
File: src/components/DateToolbar/index.js
================
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { Button, Popover } from "@mui/material";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { StaticDatePicker } from "@mui/x-date-pickers/StaticDatePicker";
import dayjs from "dayjs";
import React, { useState } from "react";
import Select from "react-select";
import "./index.css";

function DateToolbar({ selectedDate, setSelectedDate, viewMode, setViewMode, nextWeek, previousWeek, goToToday }) {
    const [anchorEl, setAnchorEl] = useState(null);
    const handleDatePickerOpen = (event) => {
        setAnchorEl(event.currentTarget);
    };
    const handleDatePickerClose = () => {
        setAnchorEl(null);
    };
    const open = Boolean(anchorEl);
    const datePickerId = open ? "date-picker-popover" : undefined;

    return (
        <div className="date-toolbar">
            <div className="left-nav nav-group">
                {viewMode === "week" && (<>
                        <button className="calendar-btn" onClick={goToToday}>
                            Today
                        </button>
                        <div className="nav-group">
                            <button className="calendar-btn calendar-btn-icon" onClick={previousWeek}>
                                <i className="fa-solid fa-chevron-left"></i>
                            </button>
                            <button className="calendar-btn calendar-btn-icon" onClick={nextWeek}>
                                <i className="fa-solid fa-chevron-right"></i>
                            </button>
                        </div>
                    </>
                )}
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <Button onClick={handleDatePickerOpen} endIcon={<ExpandMoreIcon />}>
                        {selectedDate.format("MMMM YYYY")}
                    </Button>
                    <Popover
                        id={datePickerId}
                        open={open}
                        anchorEl={anchorEl}
                        onClose={handleDatePickerClose}
                        anchorOrigin={{
                            vertical: "bottom",
                            horizontal: "left",
                        }}
                    >
                        <StaticDatePicker
                            displayStaticWrapperAs="desktop"
                            value={selectedDate}
                            onChange={(newDate) => setSelectedDate(newDate)}
                            minDate={dayjs().subtract(1, "year")}
                            maxDate={dayjs().add(1, "year")}
                        />
                    </Popover>
                </LocalizationProvider>
            </div>
            <div className="right-nav">
                <Select
                    options={[
                        {
                            value: "list",
                            label: (
                                <span>
                                    <i className="fa-solid fa-table-list"></i>&nbsp;List
                                </span>
                            ),
                        },
                        {
                            value: "week",
                            label: (
                                <span>
                                    <i className="fa-solid fa-calendar-week"></i>&nbsp;Week
                                </span>
                            ),
                        },
                    ]}
                    defaultValue={{
                        value: "list",
                        label: (
                            <span>
                                <i className="fa-solid fa-table-list"></i>&nbsp;List
                            </span>
                        ),
                    }}
                    isSearchable={false}
                    onChange={(selectedOption) => setViewMode(selectedOption.value)}
                    className="view-mode-select"
                    classNamePrefix={"viewMode"}
                    name="viewMode"
                />
            </div>
        </div>
    );
}

export default DateToolbar;

================
File: src/components/Deactivate-Reactivate-Modal/index.css
================
.deactivate-reactivate-modal {
    font-weight: 300;
    margin-top: -1vw;
}

.deactivate-reactivate-modal p {
    margin-bottom: 2vw;
}

.inactive-account span {
    color: var(--inactive-red);
}

.active-account span {
    color: var(--active-green);
}

.act-deact-btn {
    margin-top: 1vw;
    width: 100%;
    height: 2.7vw;
    border: none;
    color: var(--white);
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}

================
File: src/components/Deactivate-Reactivate-Modal/index.js
================
import TextInput from "../TextInput"
import { Formik } from "formik";
import * as Yup from "yup";
import "./index.css";
import { deactivateVolunteer, verifyVolunteer, deleteInstructor } from "../../api/adminService";
import { useAuth } from "../../contexts/authContext";
import notyf from "../../utils/notyf";
import cleanInitials from "../../utils/cleanInitials";

const VerificationSchema = Yup.object().shape({
    initials: Yup.string()
                .required("Please enter your admin initials.")
                .matches(/^[a-zA-Z][^a-zA-Z]*[a-zA-Z][^a-zA-Z]*$/, "Please enter only two letters."),
});


const DeactivateReactivateModal = ({ id, closeEvent, type }) => {

    const {user} = useAuth();

    return (
        <div className="deactivate-reactivate-modal" style={type === 2 && {zIndex: "3"}}>
            {type === 1 && <p className="inactive-account">Deactivating this account will mark the account as <span>Inactive</span>. This volunteer will no longer be able to sign in or volunteer for classes until their account is reactivated.
            </p>}
            {type === 0 && <p className="active-account">Re-activating this account will mark the account as <span>Active</span>. This will restore access for the volunteer, allowing them to sign in and volunteer for classes again.</p>}
            {type === 2 && <p>Deleting this profile will delete the instructor name and email data, but saved classes under this instructor will remain.</p>}

            <Formik
                initialValues={{
                    initials: "",
                }}
                validationSchema={VerificationSchema}
                onSubmit={(values, { setSubmitting }) => {
                    const initials = cleanInitials(values.initials);
                    if (type === 1) {
                        deactivateVolunteer(id)
                            .then(() => {
                                notyf.success("Account deactivated.");
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000);
                            })
                            .catch((error) => {
                                notyf.error("Failed to deactivate volunteer's account.");
                                console.error(error);
                            });
                    } else if (type === 0) {
                        verifyVolunteer(id)
                            .then(() => {
                                notyf.success("Account reactivated.");
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000);
                            })
                            .catch((error) => {
                                notyf.error("Failed to reactivate volunteer's account.");
                                console.error(error);
                            });
                    } else if (type === 2) {
                        deleteInstructor({
                            instructor_id: id
                        })
                            .then(() => {
                                notyf.success("Instructor profile deleted.");
                                closeEvent();
                            })
                            .catch((error) => {
                                notyf.error("Failed to delete instructor profile.");
                                console.error(error);
                            });
                    }
                    setSubmitting(false);
                }}>
                    {({
                        values,
                        errors,
                        touched,
                        handleChange,
                        handleBlur,
                        handleSubmit,
                        isSubmitting,
                    }) => (
                        <form onSubmit={handleSubmit}>
                            <TextInput
                                label="Your admin initials (for logging purposes)"
                                hint="(Required)"
                                name="initials"
                                type="text"
                                placeholder="M.U"
                                value={values.initials}
                                handleChange={handleChange}
                                handleBlur={handleBlur}
                                errors={errors}
                                touched={touched}
                            />
                            <button style={{
                                backgroundColor: type === 0 ? "var(--button-blue)" : "var(--red)"
                            }} className="act-deact-btn" type="submit" disabled={isSubmitting}>
                                {type === 1 && "Deactivate Account"} 
                                {type === 0 && "Reactivate Account"}
                                {type === 2 && "Delete Instructor Profile"}
                            </button>
                        </form>
                    )}
                </Formik>
        </div>
    )
}

export default DeactivateReactivateModal

================
File: src/components/DetailsPanel/index.css
================
@import '../../styles.css';  /*Imports custom fonts*/

.main-container {
     height: 100%;
     transition: 0.2s width ease-in-out;
}

.panel-container {
     position: fixed;
     height: 100vh;
     top: 0px;
     right: 0px;
     z-index: 1;
     transition: 0.2s all ease-in-out;
     border-left: 1px solid #e3e3e3;
     padding-top: 50px;
     overflow: hidden;
     background: white;
}

.panel-content {
     min-width: min(calc(100dvw - var(--sidebar-width)), 854px);
     width: 100%;
     max-width: 100%;
}

.panel-header {
     width: 87%;
     height: auto;
     margin-right: 36px; 
     margin-left: 20px;
     position: relative;
     padding-bottom: 20px;
     border-bottom: 1px solid #e3e3e3;
     display: flex;
     flex-direction: column;
     gap: 4px;
}

.panel-header-date-details {
     font-family: var(--font-primary);
     font-size: var(--medium-text);
     color: var(--dark-grey);
     display: flex;
     flex-direction: column;
     gap: 4px;
}

.panel-header-class-name {
     font-family: 'Montserrat';
     font-weight: 600;
     font-size: 20px;
     line-height: 27px;
     color: #0f1111;
}

.panel-button-icon {
     padding: 0px;
     background-color: transparent;
     border: none;
     cursor: pointer;
}

.panel-button-icon-close {
     position: absolute;
     right: 0px;
     top: 0px;
     width: fit-content;
     height: fit-content;
}

.panel-header-time {
     width: 100%;
}

.panel-button-icon:hover {
     filter:brightness(0.6);
}

.panel-details {
     margin-right: 36px; 
     margin-left: 20px;
     padding: 32px 0px;
}

.panel-titles {
     min-width: 120px;
     font-family: 'Roboto';
     font-weight: 400;
     font-size: 16px;
     line-height: 21.6px;
     color: #808080;
}

.my-shifts {
     padding: 4px 12px;
     width: fit-content;
     border-radius: 4px;
     background: rgba(24, 149, 49, 0.1);
     color: var(--green);
     font-weight: bold;
     text-align: center;
 }
 
 .my-coverage-requests {
     padding: 4px 12px;
     width: fit-content;
     border-radius: 4px;
     background: rgba(203, 131, 36, 0.1);
     color: var(--yellow);
     font-weight: bold;
     text-align: center;
 }
 
 .coverage {
     padding: 4px 12px;
     width: fit-content;
     border-radius: 4px;
     background: rgba(149, 32, 24, 0.1);
     color: var(--error-red);
     font-weight: bold;
     text-align: center;
 }

.classTaken {
     padding: 4px 12px;
     width: fit-content;
     border-radius: 4px;
     background: rgb(211, 211, 211);
     color: rgb(111, 111, 111);
     font-weight: bold;
     text-align: center;
}

.volunteersNeeded {
     padding: 4px 12px;
     width: fit-content;
     border-radius: 4px;
     background: rgba(89, 165, 213, 0.1);
     color: var(--primary-blue);
     font-weight: bold;
     text-align: center;
}

.panel-details-shift {
     display: flex;
     flex-direction: column;
     gap: 12px;
}

.panel-details-shift-row {
     display: flex;
     flex-direction: row;
     align-items: center;
}

.panel-details-shift-right {
     width: 264px;
     font-family: 'Roboto';
     font-weight: 400;
     font-size: 16px;
     display: flex; 
     align-items: center;
}

.volunteer-profile {
     width: 28px;
     height: 28px;
     border-radius: 4px;
     margin-right: 6px;
}

.panel-details-description {
     margin-top: 20px;
}

.panel-description {
     margin-top: 0.5rem;
     font-family: 'Roboto';
     font-weight: 400;
     font-size: 16px;
     line-height: 21.6px;
}

.button-icons {
     display: flex;
     flex-direction: row;
     gap: 4px;
     width: fit-content;
     margin-left: auto;
     margin-right: 36px;
     margin-top: 20px;
}

 /* Shift Details Panel */
/* Dynamic Button Styling based on Shift Type */
.panel-buttons {
     margin-top: 4vh;
     height: 4.5vh;
     display: flex;
     flex-direction: row;
     gap: 12px;
}

.dynamic-button {
     position: relative;
     height: 100%;
     border-radius: 8px;
     border: 1px solid var(--primary-blue);
     background: #FFF;
     box-shadow: 0px 4px 16px 0px rgba(15, 17, 17, 0.05);
     padding: 0 0.75rem;
     display: flex;
     align-items: center;
 }
 
 .dynamic-button:not(:disabled):hover {
     cursor: pointer;
     background: var(--button-blue);
     border: none;
 }
 
 .dynamic-button:disabled {
     background-color: #d3d3d3;
     border: 1px solid #d3d3d3;
     box-shadow: none;
 }

 .dynamic-button.primary-action {
     background-color: var(--button-blue);
     color: var(--white);
     border: var(--button-blue);
 }

 .dynamic-button.primary-action:hover {
     background-color: var(--button-blue-hover);
 }

 .dynamic-button.cancel-action {
     background-color: var(--red);
     color: var(--white);
     border: var(--red);
 }

 .dynamic-button.cancel-action:hover {
     background-color: var(--red-hover);
 }
 
 /* Icon within Button */
 .card-button-icon {
     width: 1rem;
     height: 1rem;
     margin-right: .5rem;
 }

 .zoom-icon {
     height: 1.5rem;
     width: 1.5rem;
     margin-right: 0.5rem; 
 }

 .email-icon {
     margin-left: 0.5rem;
 }
 
 .join-class-button {
     display: flex; 
     flex-direction: row; 
     align-items: center; 
     padding: 0.5rem 1rem;
     margin-top: 1rem;
     text-decoration: none;
     border-radius: 8px;
     border: 1px solid var(--primary-blue);
     background: #FFF;
     cursor: pointer;
     transition: background-color 0.3s ease;
 }
 
 .join-class-button a {
     text-decoration: none;
     color: var(--dark);
     display: flex; 
     flex-direction: row;
     align-items: center; 
 }
 
 .join-class-button:hover {
     cursor: pointer;
     background: var(--button-blue);
     border: none;
 }

================
File: src/components/DetailsPanel/index.js
================
import dayjs from "dayjs";
import React, { useEffect, useState } from "react";
import { getClassById } from "../../api/classesPageService";
import { formatImageUrl } from "../../api/imageService";
import email from "../../assets/email.png";
import button_icon_next from "../../assets/images/button-icons/button-icon-next.png";
import button_icon_prev from "../../assets/images/button-icons/button-icon-prev.png";
import button_icon_close from "../../assets/images/button-icons/x-icon.svg";
import zoom_icon from "../../assets/zoom.png";
import { useAuth } from "../../contexts/authContext";
import { COVERAGE_STATUSES, SHIFT_TYPES } from "../../data/constants";
import ProfileImg from "../ImgFallback";
import "./index.css";

function DetailsPanel({
  classId,
  classList,
  setClassId,
  children,
  dynamicShiftButtons = [],
  shiftDetails,
}) {
  const openPanelWidth = '448px'
  const [panelWidth, setPanelWidth] = useState("0px");
  const [panelInfo, setPanelInfo] = useState(null);
  const [myClass, setMyClass] = useState(false);
  const [classTaken, setClassTaken] = useState(false);

  const { user } = useAuth();

  useEffect(() => {
    if (classId) {
      getClassById(classId)
        .then((data) => {
          setPanelInfo(data);
          setPanelWidth(openPanelWidth);
          myClassCheck(data);
        })
        .catch((error) => {
          console.error(error);
          setPanelWidth("0px");
        });
    } else {
      setPanelWidth("0px");
    }
  }, [classId]);

  const myClassCheck = async (data) => {
    const volunteers = data.schedules.flatMap(
      (schedule) => schedule.volunteers || []
    );
    setMyClass(
      volunteers.some((volunteer) => volunteer.user_id === user?.volunteer.volunteer_id)
    );
    setClassTaken(volunteers.length !== 0);
  };

  const formatTime = (time) => {
    if (time === null || time === undefined || time === "") return "";
    const [hour, minute] = time.split(":").map(Number);
    const period = hour >= 12 ? "PM" : "AM";
    const formattedHour = hour % 12 || 12;
    return `${formattedHour}:${minute.toString().padStart(2, "0")} ${period}`;
  };

  const renderSchedules = () => {
    if (!panelInfo?.schedules) {
      return <div className="panel-header-dow panel-titles">Not Scheduled</div>;
    }

    // to stay consistent with the javascript Date getDay() function, we start at 0 for Sunday
    const dow = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];

    return panelInfo.schedules.map((schedule, idx) => (
      <div key={idx} className="panel-header-dow panel-titles">
        {dow[schedule.day]}, {formatTime(schedule.start_time)} -{" "}
        {formatTime(schedule.end_time)}
      </div>
    ));
  };

  const renderVolunteers = () => {
    const volunteers = panelInfo?.schedules.flatMap(
      (schedule) => schedule.volunteers || []
    );

    // same volunteer may be assigned to multiple schedules within a class
    const uniqueIds = [],
      uniqueVolunteers = [];
    volunteers?.forEach((volunteer) => {
      if (!uniqueIds.includes(volunteer.volunteer_id)) {
        uniqueIds.push(volunteer.volunteer_id);
        uniqueVolunteers.push(volunteer);
      }
    });

    if (!uniqueVolunteers || uniqueVolunteers.length === 0) {
      return <>No volunteer for this class</>;
    }

    return (
      <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
        {uniqueVolunteers.map((volunteer, idx) => {
          const name = volunteer.p_name ?? `${volunteer.f_name} ${volunteer.l_name}`
          
          return (
          <div
            key={idx}
            style={{
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
            }}
          >
            <ProfileImg
              src={formatImageUrl(volunteer?.fk_image_id)}
              name={name}
              className="volunteer-profile"
            ></ProfileImg>
            <div>{name}</div>
          </div>
        );
      })}
      </div>
    );
  };

  const handleToPrev = () => {
    if (!classList || !classId) return;
    const currentIndex = classList.findIndex((c) => c.class_id === classId);
    if (currentIndex > 0) {
      const prevClass = classList[currentIndex - 1];
      setClassId(prevClass.class_id);
    }
  };

  const handleToNext = () => {
    if (!classList || !classId) return;
    const currentIndex = classList.findIndex((c) => c.class_id === classId);
    if (currentIndex < classList.length - 1) {
      const nextClass = classList[currentIndex + 1];
      setClassId(nextClass.class_id);
    }
  };

  const renderInstructorInfo = () => {
    if (!panelInfo?.instructor_email) return;

    return (
      <>
        {panelInfo?.instructor_f_name && panelInfo?.instructor_l_name
          ? `${panelInfo.instructor_f_name} ${panelInfo.instructor_l_name}`
          : "No instructor available"}
        {shiftDetails &&
        shiftDetails.shift_type &&
        (shiftDetails.shift_type === SHIFT_TYPES.MY_SHIFTS ||
          shiftDetails.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS) ? (
          <button
            className="email-icon panel-button-icon"
            onClick={() => {
              window.open(`mailto:${panelInfo.instructor_email}`);
            }}
          >
            <img alt="Email" style={{ width: 16, height: 16 }} src={email} />
          </button>
        ) : null}
      </>
    );
  };

  return (
    <>
      <div
        className="main-container"
        style={{ width: `calc(100% - ${panelWidth})`, overflow: "hidden" }}
      >
        <div className="panel-content">
          {children}
        </div>
      </div>
      <div className="panel-container" style={{ width: openPanelWidth, right: `calc(-${openPanelWidth} + ${panelWidth})` }}>
        <div className="panel-header">
          {shiftDetails ? (
            <span className="panel-header-date-details">
              <div>{dayjs(shiftDetails.shift_date).format("dddd, MMMM D")}</div>
              <div>
                {dayjs(shiftDetails.start_time, "HH:mm").format("h:mm A")} -{" "}
                {dayjs(shiftDetails.end_time, "HH:mm").format("h:mm A")}
              </div>
            </span>
          ) : (
            renderSchedules()
          )}
          <div className="panel-header-class-name">
            {panelInfo?.class_name || "N/A"}
          </div>
          <button
            className="panel-button-icon panel-button-icon-close"
            onClick={() => {
              setPanelWidth("0px");
              setClassId(null);
            }}
          >
            <img
              alt="Close"
              style={{ width: 16, height: 16 }}
              src={button_icon_close}
            />
          </button>
        </div>
        <div className="panel-details">
          <div className="panel-details-shift">
            <div className="panel-details-shift-row">
              <div className="panel-titles">Status</div>
              {shiftDetails ? (
                <div className={shiftDetails.shift_type}>
                  {shiftDetails.shift_type === "my-shifts"
                    ? "My Class"
                    : shiftDetails.shift_type === "my-coverage-requests" &&
                      shiftDetails.coverage_status === COVERAGE_STATUSES.OPEN
                    ? "Requested Coverage"
                    : shiftDetails.shift_type === "my-coverage-requests" &&
                      shiftDetails.coverage_status ===
                        COVERAGE_STATUSES.RESOLVED
                    ? "Shift Filled"
                    : shiftDetails.shift_type === "coverage" &&
                      shiftDetails.coverage_status === COVERAGE_STATUSES.OPEN
                    ? "Needs Coverage"
                    : shiftDetails.shift_type === "coverage" &&
                      shiftDetails.coverage_status === COVERAGE_STATUSES.PENDING
                    ? "Requested to Cover"
                    : ""}
                </div>
              ) : myClass ? (
                <div className="my-shifts">My Class</div>
              ) : classTaken ? (
                <div className="classTaken">Class Taken</div>
              ) : (
                <div className="volunteersNeeded">Volunteers Needed</div>
              )}
            </div>
            <div className="panel-details-shift-row">
              <div className="panel-titles">Instructor</div>
              <div className="panel-details-shift-right">
                {renderInstructorInfo()}
              </div>
            </div>
            <div className="panel-details-shift-row">
              <div className="panel-titles">Volunteers</div>
              <div className="panel-details-shift-right">
                {renderVolunteers()}
              </div>
            </div>
          </div>
          <div className="panel-details-shift-row">
            {shiftDetails && shiftDetails.shift_type === "my-shifts" && (
              <>
                <div className="panel-titles">Zoom Link</div>
                <div className="panel-details-shift-right">
                  <button className="join-class-button">
                    <a href={shiftDetails.zoom_link}>
                      <img src={zoom_icon} alt="Zoom" className="zoom-icon" />
                      Join Class
                    </a>
                  </button>
                </div>
              </>
            )}
          </div>

          <div className="panel-details-description">
            <div className="panel-titles">Description</div>
            <div className="panel-description">
              {panelInfo?.instructions || "No instructions available"}
            </div>
          </div>
          {/* Conditionally render buttons based on Shift Card Type*/}
          <div className="panel-buttons">
            {dynamicShiftButtons.map((button, index) => (
              <button
                key={index}
                className={`dynamic-button ${button.buttonClass || ""}`}
                disabled={button.disabled}
                onClick={() => button.onClick(shiftDetails)}
              >
                {button.icon && (
                  <img
                    src={button.icon}
                    className={`card-button-icon ${
                      button.iconColourClass || ""
                    }`}
                  />
                )}
                {button.label}
              </button>
            ))}
          </div>
          <div className="button-icons">
            <button className="panel-button-icon" onClick={handleToPrev}>
              <img
                alt="Previous"
                src={button_icon_prev}
                style={{ width: 16, height: 16 }}
              />
            </button>
            <button className="panel-button-icon" onClick={handleToNext}>
              <img
                alt="Next"
                src={button_icon_next}
                style={{ width: 16, height: 16 }}
              />
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default DetailsPanel;

================
File: src/components/ForgotPassForm/index.css
================
.forgotPassForm {
    width: 35vw;
    font-family: var(--font-primary);
}

.forgot-helper {
    text-align: center;
    font-family: var(--font-primary);
    font-weight: 300;
    font-size: 1vw;
    margin-top: 1.5vw;
    display: flex;
    justify-content: center;
    align-items: center;
}

.forgot-helper a {
    color: black;
    text-decoration: none;
}

.helperTextAfterForgotSubmit {
    width: 40vw;
    font-size: 1vw;
}

.timer, .resendButton {
    width: 35vw;
    padding: 0.1vw;
    border-radius: 8px;
    border: none;
    background-color: var(--grey);
    font-family: var(--font-primary);
    box-shadow: 0px 4px 16px #0F111205;
    cursor: not-allowed;
    margin-top: 1.3vw;
    color: black;
    font-size: 1vw;
    text-align: center;
    font-weight: bold;
}

.resendButton {
    background-color: var(--button-blue);
    cursor: pointer;
    width: 100%;
    padding: 0.9vw;
    color: white;
    font-weight: 400;
}

#go-back-icon {
    margin-right: 0.3vw;
    transform: rotate(90deg);
}

================
File: src/components/ForgotPassForm/index.js
================
import { Formik } from "formik";
import { useRef, useState } from "react";
import { Link } from "react-router-dom";
import { useTimer } from "react-timer-hook";
import * as Yup from "yup";
import { sendResetPasswordInstructions } from "../../api/authService";
import notyf from "../../utils/notyf";
import CustomButton from "../CustomButton";
import TextInput from "../TextInput";
import "./index.css";

const ForgotPassSchema = Yup.object().shape({
    email: Yup.string()
        .email("Please enter a valid email address.")
        .required("Please fill out this field."),
});

const ForgotPassForm = ({ setNewHeading, setNewSubHeading }) => {
    const formRef = useRef();
    const [hideForm, setHideForm] = useState(false);
    const [showResendButton, setShowResendButton] = useState(false);
    const [email, setEmail] = useState("");
    const { minutes, seconds, restart } = useTimer({
        onExpire: () => {
            setShowResendButton(true);
        },
    });

    return (
        <>
            <Formik
                initialValues={{
                    email: "",
                }}
                validationSchema={ForgotPassSchema}
                onSubmit={(values, { setSubmitting }) => {
                    sendResetPasswordInstructions(values)
                        .then(() => {
                            notyf.success("Instructions sent successfully.");
                            setEmail(values.email);
                            setNewHeading("Check your mail");
                            setNewSubHeading(
                                `We have sent the password reset instructions to <b>${values.email}</b>.`
                            );
                            setHideForm(true);
                            restart(new Date().getTime() + 1000 * 59);
                        })
                        .catch((error) => {
                            console.error(error);
                            notyf.error(error.response.data.error);
                        });
                    setSubmitting(false);
                }}>
                {({
                    values,
                    errors,
                    touched,
                    handleChange,
                    handleBlur,
                    handleSubmit,
                    isSubmitting,
                }) => (
                    <>
                        {!hideForm && (
                            <form
                                ref={formRef}
                                className="forgotPassForm"
                                onSubmit={handleSubmit}>
                                <TextInput
                                    type="email"
                                    placeholder="Enter your email"
                                    label="Email"
                                    name="email"
                                    value={values.email}
                                    handleChange={handleChange}
                                    handleBlur={handleBlur}
                                    errors={errors}
                                    touched={touched}
                                />
                                <br />
                                <CustomButton
                                    text={"Send Instructions"}
                                    isSubmitting={isSubmitting}
                                />
                            </form>
                        )}
                        {hideForm && (
                            <div className="forgotPassForm">
                                <p className="helperTextAfterForgotSubmit">
                                    Did not receive the email? Check your spam
                                    folder or click below to resend
                                    instructions.
                                </p>
                                {showResendButton && (
                                    <button
                                        className="resendButton"
                                        onClick={() => {
                                            sendResetPasswordInstructions({
                                                email,
                                            })
                                                .then(() => {
                                                    notyf.success(
                                                        "Instructions sent successfully."
                                                    );
                                                    setShowResendButton(false);
                                                    // reset timer
                                                    restart(
                                                        new Date().getTime() +
                                                            1000 * 59
                                                    );
                                                })
                                                .catch((error) => {
                                                    console.error(error);
                                                    notyf.error(
                                                        error.response.data
                                                            .error
                                                    );
                                                });
                                        }}>
                                        Resend Instructions
                                    </button>
                                )}
                                {!showResendButton && (
                                    <div className="timer">
                                        <p>
                                            {minutes}
                                            {0} :{" "}
                                            {
                                                // format the seconds to have a leading zero
                                                seconds < 10
                                                    ? `0${seconds}`
                                                    : seconds
                                            }
                                        </p>
                                    </div>
                                )}
                            </div>
                        )}
                    </>
                )}
            </Formik>
            <p className="forgot-helper">
                <lord-icon
                    id="go-back-icon"
                    src="https://cdn.lordicon.com/rmkahxvq.json"
                    trigger="hover"
                    style={{ width: "1.5vw", height: "1.5vw" }}></lord-icon>
                <Link to={"/auth/login"}>Back to log in</Link>
            </p>
        </>
    );
};

export default ForgotPassForm;

================
File: src/components/ImgFallback/index.js
================
import React from "react";
import "./index.css";


export default function ProfileImg({
  src,
  name,
  className,
}) {
  const fallbackUrl = `https://api.dicebear.com/9.x/initials/svg?seed=${encodeURIComponent(name)}`;

  const handleImageError = (e) => {
    if (e.target.src !== fallbackUrl) {
      e.target.src = fallbackUrl;
    }
  };

  if (name)
    return <img
    className={className}
      src={src || fallbackUrl}
      alt={name}
      width={40}
      height={40}
      onError={handleImageError}
    />
  else
    return null
}

================
File: src/components/LeftSideBarWithLogo/index.css
================
.leftSideBar{
    height: 100vh;
    width: 40vw;
    background-color: var(--light-grey);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-right: 2px solid var(--grey);
}

.logo {
    height: 13vw;
    width: 13vw;
    background: url('../../assets/logo-icon.png') no-repeat center center;
    background-size: cover;
    margin-top: -5vh;
    margin-bottom: 3vh;
}

.text {
    font-family: var(--font-secondary);
    text-align: center;
    color: #4385AC;
    font-size: 2vw;
    font-weight: normal;
}

================
File: src/components/LeftSideBarWithLogo/index.js
================
import "./index.css";

const LeftSideBarWithLogo = () => {
    return (
        <div className="leftSideBar">
            <div className="logo"></div>
            <div className="text">
                BC Brain Wellness <br /> Program
            </div>
        </div>
    );
};

export default LeftSideBarWithLogo;

================
File: src/components/LoginForm/index.css
================
.loginForm {
    width: 35vw;
    font-family: var(--font-primary);
}

.loginForm > * {
    margin-bottom: 1vw;
}

.forgotPass{
    text-align: right;
    font-size: 0.9vw;
}

.forgotPass a {
    text-decoration: none;
    color: black;
}

.helper {
    text-align: center;
    font-family: var(--font-primary);
    font-weight: 300;
    font-size: 1vw;
}

.helper a {
    color: black;
    text-decoration: none;
}

================
File: src/components/LoginForm/index.js
================
import { Formik } from "formik";
import { Link } from "react-router-dom";
import * as Yup from "yup";
import { useAuth } from "../../contexts/authContext";
import notyf from "../../utils/notyf";
import CustomButton from "../CustomButton";
import TextInput from "../TextInput";
import "./index.css";

const LoginSchema = Yup.object().shape({
    email: Yup.string()
        .email("Please enter a valid email address.")
        .required("Please fill out this field."),
    password: Yup.string().required("Please fill out this field."),
});

const LoginForm = () => {
    const { login } = useAuth();

    return (
        <>
            <Formik
                initialValues={{
                    email: "",
                    password: "",
                }}
                validationSchema={LoginSchema}
                onSubmit={(values, { setSubmitting }) => {
                    login(values)
                        .then(() => {
                            notyf.success("Logged in successfully");
                        })
                        .catch((error) => {
                            notyf.error(error.response.data.error);
                        })
                        .finally(() => 
                            setSubmitting(false)
                        );
                }}>
                {({
                    values,
                    errors,
                    touched,
                    handleChange,
                    handleBlur,
                    handleSubmit,
                    isSubmitting,
                }) => (
                    <form className="loginForm" onSubmit={handleSubmit}>
                        <TextInput
                            type="email"
                            placeholder="Enter your email"
                            label="Email"
                            name="email"
                            value={values.email}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <TextInput
                            type="password"
                            placeholder="Enter your password"
                            label="Password"
                            name="password"
                            value={values.password}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <div className="forgotPass">
                            <Link to={"/auth/forgot-password"}>
                                Forgot Password?
                            </Link>
                        </div>
                        <CustomButton
                            text={"Log In"}
                            isSubmitting={isSubmitting}
                        />
                    </form>
                )}
            </Formik>
            <p className="helper">
                Don't have an account?{" "}
                <strong>
                    <Link to={"/auth/signup"}>Sign Up</Link>
                </strong>
            </p>
        </>
    );
};

export default LoginForm;

================
File: src/components/MemberList/index.css
================
.volunteer-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
    width: 71vw;
    height: 65vh;
    margin: auto;
    margin-top: 2vw;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 2vw;
    overflow-y: scroll;
}

.no-volunteers {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    font-size: 24px;
    font-weight: 500;
    color: #666;
}

.member-card {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 16px;
}

.volunteer-card {
    cursor: pointer;
}

.volunteer-card:hover {
    background: var(--light-grey);
}

.member-info {
    display: flex;
    align-items: center;
    gap: 16px;
}

.avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-position: center;
    background-size: cover;
    font-weight: 500;
    color: #666;
}

.member-details {
    flex: 1;
}

.member-name {
    font-weight: 400;
    margin-bottom: 4px;
}

.member-email {
    font-size: 14px;
    color: #666;
    font-weight: 300;
}

.member-badges {
    display: flex;
    gap: 8px;
}

.badge {
    padding: 10px 12px;
    border-radius: 4px;
    font-size: 14px;
    font-family: var(--primary-font);
    color: white;
}

.badge-status.active {
    background-color: var(--active-green);
}

.badge-status.inactive {
    background-color: var(--inactive-red);
}

.badge-role.regular-volunteer {
    background-color: var(--regular-volunteer);
}
  
.badge-role.coverage-volunteer {
    background-color: var(--coverage-volunteer);
}

.right-arrow-icon {
    width: 2.5vw;
    height: 2.5vw;
    background: url('../../assets/right-arrow-icon.png') no-repeat center center/contain;
}

================
File: src/components/MemberList/index.js
================
import "./index.css";
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import BorderColorRoundedIcon from '@mui/icons-material/BorderColorRounded';
import Modal from "../Modal";
import AddEditInstructorModal from "../AddEditInstructorModal";

const MemberList = ({data, fetchData, type}) => {
    const navigate = useNavigate();
    const [editInstructorModal, setEditInstructorModal] = useState(false);
    const [selectedInstructor, setSelectedInstructor] = useState(null);

    return (
        <div className="volunteer-list">
            {data.length > 0 && data.map((member) => (
                <div key={type === "volunteers" ? member.volunteer_id : member.instructor_id} className={type === "volunteers" ? "member-card volunteer-card" : "member-card"} onClick={() => {
                    if (type === "volunteers") {
                        navigate(`/volunteer-profile?volunteer_id=${member.volunteer_id}`);
                    } else if (type === "instructors") {
                        return;
                    }
                }}>
                    <div className="member-info">
                        <div className="avatar" style={{backgroundImage: member.fk_image_id !== undefined ? `url(http://localhost:3001/image/${member.fk_image_id})` : `url('https://api.dicebear.com/9.x/initials/svg?seed=${member.f_name}+${member.l_name}')`}}>
                        </div>
                        <div className="member-details">
                            <div className="member-name">{member.f_name} {member.l_name}</div>
                            <div className="member-email">{member.email}</div>
                        </div>
                        {type === "volunteers" && (
                            <div className="member-badges">
                                <span className={`badge badge-status ${member.active === 1 ? 'active' : 'inactive'}`}>{member.active === 1 ? 'Active' : 'Inactive'}</span>
                                <span className={`badge badge-role regular-volunteer`}>Regular Volunteer</span>
                            </div>
                        )}
                        {type === "volunteers" && (<div className="right-arrow-icon"></div>)}
                        {type === "instructors" && (
                            <div onClick={() => {
                                setSelectedInstructor(member)
                                setEditInstructorModal(true)
                            }}>
                                <BorderColorRoundedIcon fontSize="small" sx={{color: "#808080", paddingRight: "15px", cursor: "pointer"}} />
                            </div>
                        )}
                    </div>
                </div>
            ))}
            {data.length === 0 && (
                <div className="no-volunteers">No {type} found</div>
            )}

        <Modal title="Edit instructor details" isOpen={editInstructorModal} onClose={() => setEditInstructorModal(false)} width="500px" height="fit-content">
            <AddEditInstructorModal closeEvent={() => {
                setEditInstructorModal(false);
                fetchData();
            }} instructor_data={selectedInstructor} />
        </Modal>
        </div>
    )
}

export default MemberList;

================
File: src/components/Modal/index.css
================
@import "../../styles.css";

.modal-overlay {
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     background: rgba(0, 0, 0, 0.7);
     display: flex;
     justify-content: center;
     align-items: center;
     z-index: 2;
}
   
.modal-content {
     background: var(--white);
     padding: 20px 32px;
     border-radius: 8px;
     position: relative;
     height: 90vh;
}

.modal-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     font-family: var(--font-secondary);
}

.modal-header h2 {
     font-weight: 600;
}
   
.close-button {
     width: 16px;
     height: 16px;
     border: none;
     background: transparent;
     cursor: pointer;
}
.close-button:hover {
     filter: brightness(0.7);
}

================
File: src/components/Modal/index.js
================
import "./index.css";
import React from "react";
import ReactDOM from "react-dom";
import CloseRoundedIcon from '@mui/icons-material/CloseRounded';

function Modal ({ title = "", isOpen, onClose, children, width, height }) {

     if (!isOpen) {
          return null;
     } 
     
     return ReactDOM.createPortal(
          <div className="modal-overlay" >
               <div className="modal-content" style={{width: width, height: height}}>
                    <div className="modal-header">
                         <h2>{title}</h2>
                         <CloseRoundedIcon sx={{color: "#808080"}} className="close-button" onClick={onClose} />
                    </div>
                    {children}
               </div>
          </div>,
          document.getElementById("modal-root") 
     );
};

export default Modal;

================
File: src/components/NavProfileCard/index.css
================
.nav-profile-card {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    background-color: white;
    margin: 0 1rem;
    border-radius: 0.5rem;
    padding: 0.8rem;
    cursor: pointer;
    box-shadow: -4px 4px 8px rgba(0, 0, 0, 0.2);
}

.nav-profile-card:hover, .nav-profile-card:focus, .nav-profile-card__avatar-collapse img:hover, .nav-profile-card__avatar-collapse img:focus {
    outline: 2px solid var(--primary-blue);
}

.nav-profile-card__main {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    align-items: center;
    min-width: 0;
}

.nav-profile-card__avatar, .nav-profile-card__avatar-collapse {
    display: flex;
    justify-content: center;
}

.nav-profile-card__avatar img, .nav-profile-card__avatar-collapse img {
    border-radius: 4px;
}

.nav-profile-card__avatar-collapse {

    margin-bottom: 1rem;
}

.nav-profile-card__avatar img {
    border-radius: 0.5rem;
    object-fit: cover;
}

.nav-profile-card__info {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
    min-width: 0;
}

.nav-profile-card__name, .nav-profile-card__email {
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.nav-profile-card__name {
    font-size: 16px;
}

.nav-profile-card__email {
    color: grey;
    font-size: 12px;
}

================
File: src/components/NavProfileCard/index.js
================
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import React from "react";
import ProfileImg from "../ImgFallback";
import "./index.css";

import { useNavigate } from "react-router-dom";

export default function NavProfileCard({
  image,
  name,
  email,
  collapse,
  link,
}) {
  const navigate = useNavigate();
  const toProfile = () => {
    navigate(link);
  };

  return collapse ? (
    <div className="nav-profile-card__avatar-collapse">
      <ProfileImg
        src={image}
        name={name}
      ></ProfileImg>
    </div>
  ) : (
    <div className="nav-profile-card" onClick={toProfile}>
      <div className="nav-profile-card__main">
        <div className="nav-profile-card__avatar">
          <ProfileImg
            src={image}
            name={name}
          ></ProfileImg>
        </div>
        <div className="nav-profile-card__info">
          <p className="nav-profile-card__name">{name}</p>
          <p className="nav-profile-card__email">{email}</p>
        </div>
      </div>
      <ArrowForwardIcon sx={{ color: "grey", fontSize: 24 }} />
    </div>
  );
}

================
File: src/components/Notifications/index.css
================
.notif-button {
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    font-family: var(--primary-font);
    width: 130px;
    height: 40px;
    border: 1px solid var(--primary-blue);
    border-radius: 8px;
    background: white;
    cursor: pointer;
}

================
File: src/components/Notifications/index.js
================
import notif_icon from "../../assets/notif-icon.png";
import "./index.css";

const Notifications = () => {
  return (
    <button className="notif-button"><img src={notif_icon} alt="notifications button"></img> Notifications</button>
  )
}

export default Notifications

================
File: src/components/ResetPasswordForm/index.css
================
.resetPassForm {
    width: 35vw;
    font-family: var(--font-primary);
}

.resetPassForm > * {
    margin-bottom: 1vw;
}

================
File: src/components/ResetPasswordForm/index.js
================
import TextInput from "../TextInput";
import CustomButton from "../CustomButton";
import { Formik } from "formik";
import * as Yup from "yup";
import { useEffect, useState } from "react";
import { resetPassword } from "../../api/authService";
import notyf from "../../utils/notyf";
import "./index.css";

const ResetPassSchema = Yup.object().shape({
    password: Yup.string()
        .min(8, "Password must be at least 8 characters long.")
        .required("Please fill out this field."),
    confirmPassword: Yup.string()
        .oneOf([Yup.ref("password"), null], "Passwords don't match.")
        .required("Please fill out this field."),
});

const ResetPasswordForm = () => {
    const [id, setId] = useState("");
    const [token, setToken] = useState("");

    useEffect(() => {
        // Get the id and token from the URL queries
        const urlParams = new URLSearchParams(window.location.search);

        if (!urlParams.has("id") || !urlParams.has("token")) {
            window.location.href = "/auth/login";
        }

        setId(urlParams.get("id"));
        setToken(urlParams.get("token"));
    }, []);

    return (
        <>
            <Formik
                initialValues={{
                    password: "",
                    confirmPassword: "",
                }}
                validationSchema={ResetPassSchema}
                onSubmit={(values, { setSubmitting }) => {
                    // Remove confirm password from the data
                    delete values.confirmPassword;
                    resetPassword({ ...values, id, token })
                        .then((response) => {
                            notyf.success("Password reset successfully.");
                            setTimeout(() => {
                                window.location.href = "/auth/login";
                            }, 2500);
                        })
                        .catch((error) => {
                            notyf.error(error.response.data.error);
                            console.error(error);
                        });
                    setSubmitting(false);
                }}>
                {({
                    values,
                    errors,
                    touched,
                    handleChange,
                    handleBlur,
                    handleSubmit,
                    isSubmitting,
                }) => (
                    <form className="resetPassForm" onSubmit={handleSubmit}>
                        <TextInput
                            type="password"
                            placeholder="Create a new password"
                            label="Create Password"
                            name="password"
                            value={values.password}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <TextInput
                            type="password"
                            placeholder="Confirm your password"
                            label="Confirm Password"
                            name="confirmPassword"
                            value={values.confirmPassword}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <CustomButton
                            text={"Reset Password"}
                            isSubmitting={isSubmitting}
                        />
                    </form>
                )}
            </Formik>
        </>
    );
};

export default ResetPasswordForm;

================
File: src/components/ShiftCard/index.css
================
@import '../../styles.css';

/* General Card Styles */
.shift-card {
    display: flex;
    width: 100%;
    margin: .5rem;
    padding: .5rem .8rem;
    border: 1px solid #ccc;
    border-radius: .8rem;
    box-shadow: 0px 4px 16px rgba(15, 17, 17, 0.1);
    min-height: 3.5rem;
    align-items: center;
}

.shift-card:hover {
    cursor: pointer;
}

/* Vertical Line Styles */
.vertical-line {
    width: .5rem;
    background-color: var(--grey);
    border-radius: 1.5rem;
    height: 80%;
    min-height: 3rem;
    margin-right: 2rem;
}

/* Card Content Layout */
.card-content {
    display: flex;
    width: 100%;
    align-items: center;
    height: 80%;
}

.segment-1 {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.segment-2 {
    flex: 4;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

/* Text and Typography */
.card-text {
    margin: 0;
    font-family: var(--font-primary);
}

.card-text h2 {
    margin: .25rem 0;
    font-size: 1rem;
    font-weight: 400;
    color: var(--text-dark, #0F1111);
}

.card-text p {
    margin: 0;
    font-size: var(--small-text);
    font-weight: 400;
    color: var(--text-grey, #808080);
}

/* Button Layout */
.button-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.check-in-button {
    position: relative;
    height: 100%;
    border-radius: 8px;
    border: 1px solid var(--primary-blue);
    background: #FFF;
    box-shadow: 0px 4px 16px 0px rgba(15, 17, 17, 0.05);
    padding: 0 1rem;
    display: flex;
    align-items: center;
}

/* Button Interactions */
.check-in-button:not(:disabled):hover {
    cursor: pointer;
    background: var(--grey);
    border: none;
}

.check-in-button:disabled {
    background-color: #d3d3d3;
    border: 1px solid #d3d3d3;
    box-shadow: none;
}

/* Icon within Button */
.card-button-icon {
    width: 1rem;
    height: 1rem;
    margin-right: .5rem;
}

/* Responsive Adjustments */
@media (max-width: 1000px) {
    .segment-1 {
        display: none;
    }

    .segment-2 {
        flex: 1;
        flex-direction: column;
    }
}

================
File: src/components/ShiftCard/index.js
================
import "./index.css";
import { SHIFT_TYPES, COVERAGE_STATUSES } from "../../data/constants";

function ShiftCard({ shift, shiftType, onShiftSelect, buttonConfig }) {
  const handleShiftSelection = () => {
    onShiftSelect(shift);
  };

  const { lineColor, label, icon, disabled, buttonClass, onClick } =
    buttonConfig?.[shiftType] ||
      buttonConfig?.[SHIFT_TYPES.DEFAULT] || {
        lineColor: "var(--grey)",
        label: "View Details",
        icon: null,
        disabled: false,
        onClick: () => {},
      };

  const parseShiftDuration = (duration) => {
    const hours = Math.round((duration / 60) * 10) / 10;
    if (hours === 1) {
      return `${hours} hour`;
    }
    if (hours > 1) {
      return `${hours} hours`;
    }
    return `${duration} minutes`;
  };

  return (
    <div className="shift-card" onClick={handleShiftSelection}>
      <div className="vertical-line" style={{ backgroundColor: lineColor }} />
      <div className="card-content">
        <div className="column segment-1">
          <div className="card-text">
            <h2 className="shift-time">{shift.start_time}</h2>
            <p>{parseShiftDuration(shift.duration)}</p>
          </div>
        </div>
        <div className="column segment-2">
          <div className="card-text">
            <h2>{shift.class_name}</h2>
            <p>
              {shift.instructions.substring(0, 50)}
              {shift.instructions.length > 40 ? "..." : ""}
            </p>
          </div>
          <div className="button-container">
            <button
              className={`check-in-button ${buttonClass}`}
              disabled={disabled}
              onClick={() => onClick(shift)}
            >
              {icon && (
                <img
                  src={icon}
                  alt="Button Icon"
                  className="card-button-icon"
                />
              )}
              {label}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ShiftCard;

================
File: src/components/ShiftStatusToolbar/index.css
================
@import '../../styles.css';

/* Container and Layout Styles */
.shift-status-container {
    display: flex;
    font-size: var(--small-text);
    align-items: center;
    padding: 0 36px;
}

/* Button Group Layout */
.button-group {
    display: flex;
    gap: 1rem;
    padding: .75rem 2rem;
}

/* Button Styles */
.button-group button {
    padding: 1rem .5rem;
    border-radius: 3px;
    border: 1px solid var(--grey);
    height: 1.5rem;
    display: flex;
    align-items: center;
    gap: 8px;
    background-color: white;
}

.button-group button:hover {
    background: var(--light-grey);
    cursor: pointer;
}

.button-group button.selected {
    border: 1px solid var(--grey);
    background: rgba(217, 217, 217, 0.30);
}

/* Button Icon Styles */
.button-icon {
    width: 7px;
    height: 7px;
    border: 4px solid;
    border-radius: 50%;
    background-color: transparent;
    min-width: 7px;
}

.all-shifts-button .button-icon {
    border-color: var(--dark-grey);
}

.all-shifts-button.selected .button-icon {
    border-color: var(--dark-grey);
    background-color: var(--dark-grey);
}
  
.my-shifts-button .button-icon {
    border-color: var(--green);
}

.my-shifts-button.selected .button-icon {
    border-color: var(--green);
    background-color: var(--green);
}

.requested-coverage-button .button-icon {
    border-color: var(--yellow);
}

.requested-coverage-button.selected .button-icon {
    border-color: var(--yellow);
    background-color: var(--yellow);
}

.needs-coverage-button .button-icon {
    border-color: var(--red);
}

.needs-coverage-button.selected .button-icon {
    border-color: var(--red);
    background-color: var(--red);
}

================
File: src/components/ShiftStatusToolbar/index.js
================
import React from 'react';
import './index.css';

function ShiftStatusToolbar({ setFilter, filter }) {
  return (
    <div className="shift-status-container">
        <div>
            <p>Filter by Status:</p>
        </div>
        <div className="button-group">
            <button
              onClick={() => setFilter('all-shifts')}
              className={`all-shifts-button ${filter === 'all-shifts' ? 'selected' : ''}`}
            >
              <div className="button-icon"></div> All Shifts
            </button>
            <button
              onClick={() => setFilter('my-shifts')}
              className={`my-shifts-button ${filter === 'my-shifts' ? 'selected' : ''}`}
            >
              <div className="button-icon"></div> My Shifts
            </button>
            <button
              onClick={() => setFilter('my-coverage-requests')}
              className={`requested-coverage-button ${filter === 'my-coverage-requests' ? 'selected' : ''}`}
            >
              <div className="button-icon"></div> Requested Coverage
            </button>
            <button
              onClick={() => setFilter('coverage')}
              className={`needs-coverage-button ${filter === 'coverage' ? 'selected' : ''}`}
            >
              <div className="button-icon"></div> Needs Coverage
            </button>
        </div>
    </div>
  );
}

export default ShiftStatusToolbar;

================
File: src/components/SidebarLayout/index.css
================
@import "../../styles.css";

body {
  margin: 0;
  padding: 0;
  font-family: var(--font-primary);
}

.main-container {
  display: flex;
  flex-direction: row;
}

.navbar {
  display: flex;
  flex-direction: column;
  width: 275px;
  flex-shrink: 0;
  min-height: 100vh;
  background: radial-gradient(circle at bottom left, #9bd6fd 5%, #c3e6ff 15%, #F0FAFF 100%);
  border-right: 2px solid var(--grey);
  transition: width 0.3s ease-in-out;
}

.content-container {
  flex-grow: 1;
  background-color: var(--white);
  max-height: 100vh;
  overflow: hidden;
  position: relative;
  display: flex;
  flex-direction: column;
}

.volunteer-dash {
  overflow-y: auto !important;
}

.content-heading {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 36px;
}

.content-title {
  flex: 1;
  color: var(--primary-blue);
  text-decoration: none;
  font-family: var(--font-secondary);
  font-style: normal;
  font-weight: 700;
  font-size: var(--page-title-text);
}

/* NAVBAR STYLING, ON ACTIVE, ON COLLAPSE */
.logo-banner {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 0 15px;
  padding-top: 5px;
  padding-bottom: 30px;
  height: 90px;
}

.nav-item {
  display: flex;
  align-items: center;
  font-size: var(--medium-text);
  font-weight: 400;
  padding-left: 20px;
  padding-top: 14px;
  padding-bottom: 14px;
  position: relative;
  /* Required for positioning the vertical line */
}

.nav-item.active::before {
  content: "";
  /* Creates the line */
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 5px;
  height: 100%;
  border-radius: 0px 8px 8px 0px;
  background: var(--secondary-blue);
}

.nav-item img {
  width: 30px;
  padding-right: 10px;
}

.nav-item svg {
  width: 30px;
  padding-right: 10px;
}

.NavbarText {
  color: var(--dark);
  text-decoration: none;
  font-weight: 400;
  font-size: var(--medium-text);
  min-width: max-content;
}

.navbar.collapsed {
  width: 70px;
}

.nav-profile-card-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  margin-bottom: 1rem;
}

.logout-button {
  height: fit-content;
  padding: 0.6vw 0.85vw;
  background-color: var(--white);
  border: 1px solid var(--primary-blue);
  border-radius: 8px;
  box-shadow: 0px 4px 16px #0f111105;
  cursor: pointer;
  font-family: var(--font-primary);
}

.logout-button i {
  color: var(--dark-grey);
}

================
File: src/components/SidebarLayout/index.js
================
import { React, useEffect, useRef, useState } from "react";
import { NavLink, Outlet } from "react-router-dom";
import BC_brain from "../../assets/bwp-logo-text.png";
import nav_item_classes from "../../assets/nav-item-classes.png";
import nav_item_coverage from "../../assets/nav-item-coverage.png";
import nav_item_dash from "../../assets/nav-item-dash.png";
import nav_item_management from "../../assets/nav-item-management.png";
import nav_item_schedule from "../../assets/nav-item-sched.png";
import nav_item_settings from "../../assets/nav-item-settings.png";
import nav_item_member from "../../assets/nav-item-member.png";
import sidebar_toggle from "../../assets/sidebar-toggle.png";
import "./index.css";

import { formatImageUrl } from "../../api/imageService";
import { useAuth } from "../../contexts/authContext";
import NavProfileCard from "../NavProfileCard";
import Permission from "../utils/Permission";

function SidebarLayout() {
  const [collapsed, setCollapsed] = useState(window.innerWidth <= 800);
  const sidebarRef = useRef(null);
  const { user } = useAuth();

  useEffect(() => {
    if (!sidebarRef.current) return;
  
    let prevWidth;
    const observer = new ResizeObserver((entries) => {
      for (let entry of entries) {
        const width = entry.contentRect.width;
        if (prevWidth !== width) {
          document.documentElement.style.setProperty("--sidebar-width", `${width}px`);
          prevWidth = width;
        }
      }
    });
    observer.observe(sidebarRef.current);
  
    return () => observer.disconnect();
  }, [sidebarRef]);

  // Toggle function for displaying/hiding sidebar
  const toggleSidebar = () => {
    setCollapsed(!collapsed);
  };

  // Automatically collapse/expand sidebar based on screen width
  useEffect(() => {
    const handleResize = () => {
      setCollapsed(window.innerWidth <= 800);
    };

    // Handle with media query, only overwrite the user's choice when switching over/under 800px
    const mediaQuery = window.matchMedia('(min-width: 800px)')
    mediaQuery.addEventListener('change', handleResize);
    handleResize();

    return () => mediaQuery.removeEventListener('change', handleResize);
  }, []);

  return (
    <div className="main-container">
      <aside ref={sidebarRef} className={`navbar ${collapsed ? 'collapsed' : ''}`}>
        <span className="logo-banner">
          {!collapsed && (
            <a href="https://www.bcbrainwellness.ca/">
              <img
                src={BC_brain}
                alt="BC Brain Logo"
                style={{ width: "144px", paddingTop: "8px" }}
              />
            </a>
          )}
          <img
            src={sidebar_toggle}
            alt="Navbar Toggle"
            style={{ width: "40px", cursor: "pointer" }}
            onClick={toggleSidebar}
          />
        </span>
        <div className="nav-list">
          <NavLink
            to="/"
            className={({ isActive }) =>
              isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
            }
          >
            <img src={nav_item_dash} alt="Dashboard" />
            {!collapsed && "Overview"}
          </NavLink>

          <NavLink
            to="/schedule"
            className={({ isActive }) =>
              isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
            }
          >
            <img src={nav_item_schedule} alt="Schedule" />
            {!collapsed && "Schedule"}
          </NavLink>

          <Permission permissions="admin">
            <NavLink
              to="/requests"
              className={({ isActive }) =>
                isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
              }
            >
              <img src={nav_item_coverage} alt="Coverage Requests" />
              {!collapsed && "Coverage Requests"}
            </NavLink>
          </Permission>

          <NavLink
            to="/classes"
            className={({ isActive }) =>
              isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
            }
          >
            <img src={nav_item_classes} alt="Classes" />
            {!collapsed && "Classes"}
          </NavLink>

          <Permission permissions="admin">
            <NavLink
              to="/management"
              className={({ isActive }) =>
                isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
              }
            >
              <img src={nav_item_management} alt="Member Management" />
              {!collapsed && "Member Management"}
            </NavLink>
          </Permission>

          <NavLink
            to="/settings"
            className={({ isActive }) =>
              isActive ? "NavbarText nav-item active" : "NavbarText nav-item"
            }
          >
            <img src={nav_item_settings} alt="Member Management" />
            {!collapsed && "Settings"}
          </NavLink>
        </div>
        <div className="nav-profile-card-container">
          <NavProfileCard
            image={formatImageUrl(user?.fk_image_id)}
            name={user?.volunteer?.p_name || user?.f_name}
            email={user?.email}
            collapse={collapsed}
            link="/profile"
          />
        </div>
      </aside>
      <Outlet />
    </div>
  );
}

export default SidebarLayout;

================
File: src/components/SignUpForm/index.css
================
.signUpForm {
    width: 35vw;
    font-family: var(--font-primary);
}

.twoInputs {
    display: flex;
    gap: 1vw;
}

.signUpForm > * {
    margin-bottom: 1vw;
}

.helper {
    text-align: center;
    font-family: var(--font-primary);
    font-weight: 300;
    font-size: 1vw;
}

.helper a {
    color: black;
    text-decoration: none;
}

================
File: src/components/SignUpForm/index.js
================
import { Formik } from "formik";
import { Link } from "react-router-dom";
import * as Yup from "yup";
import { signUp } from "../../api/authService";
import notyf from "../../utils/notyf";
import CustomButton from "../CustomButton";
import TextInput from "../TextInput";
import "./index.css";

const SignUpSchema = Yup.object().shape({
    firstName: Yup.string().required("Please fill out this field."),
    lastName: Yup.string().required("Please fill out this field."),
    email: Yup.string()
        .email("Please enter a valid email address.")
        .required("Please fill out this field."),
    password: Yup.string()
        .min(8, "Password must be at least 8 characters long.")
        .required("Please fill out this field."),
    confirmPassword: Yup.string()
        .required("Please fill out this field.")
        .oneOf([Yup.ref("password"), null], "Passwords don't match."),
});

const SignUpForm = () => {
    return (
        <>
            <Formik
                initialValues={{
                    firstName: "",
                    lastName: "",
                    email: "",
                    password: "",
                    confirmPassword: "",
                }}
                validationSchema={SignUpSchema}
                onSubmit={(values, { setSubmitting }) => {
                    // remove confirmPassword from the payload
                    delete values.confirmPassword;
                    values.role = "volunteer";
                    signUp(values)
                        .then(() => {
                            notyf.success("Account created successfully.");
                            setSubmitting(false);
                            setTimeout(() => {
                                window.location.href = "/auth/login";
                            }, 2500);
                        })
                        .catch((error) => {
                            notyf.error(error.response.data.error);
                            setSubmitting(false);
                        });
                }}>
                {({
                    values,
                    errors,
                    touched,
                    handleChange,
                    handleBlur,
                    handleSubmit,
                    isSubmitting,
                }) => (
                    <form onSubmit={handleSubmit} className="signUpForm">
                        <div className="twoInputs">
                            <TextInput
                                type="text"
                                placeholder="Enter your first name"
                                label="First Name"
                                name="firstName"
                                value={values.firstName}
                                handleChange={handleChange}
                                handleBlur={handleBlur}
                                errors={errors}
                                touched={touched}
                            />
                            <TextInput
                                type="text"
                                placeholder="Enter your last name"
                                label="Last Name"
                                name="lastName"
                                value={values.lastName}
                                handleChange={handleChange}
                                handleBlur={handleBlur}
                                errors={errors}
                                touched={touched}
                            />
                        </div>
                        <TextInput
                            type="email"
                            placeholder="Enter your email"
                            label="Email"
                            name="email"
                            value={values.email}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <TextInput
                            type="password"
                            placeholder="Create a password"
                            label="Create Password"
                            name="password"
                            value={values.password}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <TextInput
                            type="password"
                            placeholder="Confirm your password"
                            label="Confirm Password"
                            name="confirmPassword"
                            value={values.confirmPassword}
                            handleChange={handleChange}
                            handleBlur={handleBlur}
                            errors={errors}
                            touched={touched}
                        />
                        <CustomButton
                            text={"Create an Account"}
                            isSubmitting={isSubmitting}
                        />
                    </form>
                )}
            </Formik>
            <p className="helper">
                Already have an account?{" "}
                <strong>
                    <Link to={"/auth/login"}>Log In</Link>
                </strong>
            </p>
        </>
    );
};

export default SignUpForm;

================
File: src/components/TextInput/index.css
================
.inputWithLabel {
  display: flex;
  flex-direction: column;
  width: 100%;
  position: relative;
}

label {
    margin-bottom: 0.3vw;
    font-weight: light;
    font-size: 1vw;
}

.inputWithLabel input {
    font-family: var(--font-primary);
    padding: 1vw 0.8vw;
    border-radius: 8px;
    border: 1px solid var(--grey);
    font-size: 1vw;
}

input.error {
    border: 1px solid var(--error-red);
}

.inputWithLabel input::placeholder {
    font-size: 1vw !important;
}

#passwordIcon {
    position: absolute;
    right: 1vw;
    top: 2.1vw;
    cursor: pointer;
}

.hint {
    margin-left: 5px;
    font-style: italic;
    font-size: 0.9vw;
    color: var(--dark-grey);
}

.error-message {
    color: var(--error-red);
    font-size: 0.9vw;
    margin-top: 0.4vw;
    display: flex;
    align-items: center;
    gap: 3px;
}

================
File: src/components/TextInput/index.js
================
import "./index.css";
import { useRef, useState } from "react";
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';

const TextInput = ({
    type,
    placeholder,
    label,
    hint = "",
    name,
    value,
    handleChange,
    handleBlur,
    errors,
    touched,
}) => {
    const playerRef = useRef(null);
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);

    return (
        <div className="inputWithLabel">
            <label>{label}<span className="hint">{hint}</span></label>
            {type !== "password" && (
                <>
                    <input
                        id={name}
                        type={type}
                        placeholder={placeholder}
                        value={value || ""}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors[name] && touched[name] && "error"}
                    />
                    {errors[name] && touched[name] && (
                        <div className="error-message"><ErrorOutlineIcon fontSize="small" /> {errors[name]}</div>
                    )}
                </>
            )}

            {type === "password" && (
                <>
                    <input
                        id={name}
                        type={isPasswordVisible ? "text" : "password"}
                        placeholder={placeholder}
                        value={value || ""}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors[name] && touched[name] && "error"}
                    />
                    {errors[name] && touched[name] && (
                        <div className="error-message">{errors[name]}</div>
                    )}
                    <lord-icon
                        ref={playerRef}
                        id="passwordIcon"
                        src="https://cdn.lordicon.com/dicvhxpz.json"
                        onClick={() => {
                            setIsPasswordVisible(!isPasswordVisible);
                            playerRef.current.playerInstance.play();
                            setTimeout(() => {
                                playerRef.current.playerInstance.direction *=
                                    -1;
                            }, 600);
                        }}
                        stroke="bold"
                        state="morph-lashes"
                        colors="primary:#121331,secondary:#4385ac"
                        style={{
                            width: "1.8vw",
                            height: "1.8vw",
                            cursor: "pointer",
                        }}></lord-icon>
                </>
            )}
        </div>
    );
};

export default TextInput;

================
File: src/components/userProfileForm/UserProfileForm.js
================
import React, { useState, useEffect } from 'react';
import { fetchVolunteerData, updateVolunteerData } from '../../api/volunteerService';

const UserProfileForm = ({ volunteer_id }) => {

  const [volunteerData, setVolunteerData] = useState({
    volunteer_id: "", // Primary key
    user_id: "", // Foreign key
    l_name: "",
    f_name: "",
    total_hours: "",
    class_preferences: "",
    bio: "",
    active: false,
    email: ""
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedVolunteerData = await fetchVolunteerData(volunteer_id);
        setVolunteerData(fetchedVolunteerData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, [volunteer_id]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setVolunteerData({
      ...volunteerData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const updatedData = await updateVolunteerData(volunteerData);
      console.log('Success:', updatedData);

      // Optionally fetch the updated data again
      const refreshedData = await fetchVolunteerData(volunteer_id);
      setVolunteerData(refreshedData);
    } catch (error) {
      console.error('Error updating volunteer data:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* User Data (Read-Only) */}
        <input
        type="text"
        name="email"
        value={volunteerData.email}
        readOnly
        placeholder="Email"
      />

      {/* Volunteer Data (Editable) */}
      <input
        type="text"
        name="f_name"
        value={volunteerData.f_name}
        onChange={handleChange}
        placeholder="First Name"
      />
      <input
        type="text"
        name="l_name"
        value={volunteerData.l_name}
        onChange={handleChange}
        placeholder="Last Name"
      />
      <input
        type="text"
        name="total_hours"
        value={volunteerData.total_hours}
        onChange={handleChange}
        placeholder="Total Hours"
      />
      <input
        type="text"
        name="class_preferences"
        value={volunteerData.class_preferences}
        onChange={handleChange}
        placeholder="Class Preferences"
      />
      <input
        type="text"
        name="bio"
        value={volunteerData.bio}
        onChange={handleChange}
        placeholder="Bio"
      />
      <label>
        Active:
        <input
          type="checkbox"
          name="active"
          checked={volunteerData.active}
          onChange={(e) => handleChange({ target: { name: 'active', value: e.target.checked } })}
        />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
};

export default UserProfileForm;

================
File: src/components/utils/Permission/index.js
================
import { useAuth } from "../../../contexts/authContext";
import "./index.css";

const Permission = ({ children, permissions }) => {
    const { isVolunteer, isAdmin } = useAuth();

    if (!Array.isArray(permissions)) {
        permissions = [permissions];
    }

    if (isAdmin && permissions.includes('admin')) {
        return children;
    } 
    else if (isVolunteer && permissions.includes('volunteer')) {
        return children;
    }
    // else if (isInstructor && permissions.includes('instructor')) {
    //     return children;
    // }

    return <></>;
};

export default Permission;

================
File: src/components/volunteerProfile/availabilityGrid/index.css
================
/* Availability Grid Container */
.availability-grid-container {
    position: relative;
    max-width: 100%;
    height: 100%;
    border-radius: 8px;
    border: 1px solid #D9D9D9;
    box-shadow: 0px 4px 16px 0px #0F11110D;
}

.availability-grid-content {
  padding: 32px;
}

/* Header Section */
.availability-header {
  display: flex;
  justify-content: space-between; /* Align title and buttons horizontally */
  align-items: center; /* Center vertically */
  margin-bottom: 18px;
}

/* Title */
.availability-title {
  font-size: var(--title-text);
  font-weight: var(--semi-bold);
  margin: 0;
}

.edit-icon {
  position: absolute;
  top: 32px;
  right: 32px;
  cursor: pointer;
  height: 16px;
  color: #808080;
}

.edit-options {
  position: absolute;
  top: 32px;
  right: 32px;
  display: flex;
  gap: 12px;
  height: 16px;
}

.check-icon {
  flex: 1;
}

.cancel-icon {
  flex: 1;
}

.icon:hover {
  cursor: pointer;
}

/* Grid Structure */
.availability-grid {
  display: grid;
  grid-template-columns: 60px repeat(7, 1fr); /* First column for time labels, then 7 equally spaced columns */
  grid-template-rows: 15px repeat(20, 16px); /* First row for day labels, rest for time slots with equal height */
}

/* Time Labels */
.time-label {
  display: flex;
  /* align-items: center; */
  /* justify-content: center; */
  font-size: 12px; /* Adjust font size to fit smaller cells */
  font-weight: var(--semi-bold);
  text-align: right; /* Align text to the right for time labels */
  padding-right: 5px; /* Space between time label and slots */
}

/* Day Labels */
.day-label {
  text-align: center;
  font-weight: var(--semi-bold);
  background-color: white; /* Light gray background for headers */
  font-size: 12px; /* Adjust font size */
  color: #333; /* Text color for day labels */
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #e7e7e7; /* White border for day labels */
}

/* Slot Cells */
.slot {
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #e7e7e7; /* White border for availability slots */
  transition: background-color 0.3s ease; /* Smooth color change */
}

/* Saved and unsaved slot styles */
.available.saved {
  background-color: grey; /* Grey for saved slots */
  color: white;
}

.available.unsaved {
  background-color: #4caf50; /* Green for unsaved slots */
  color: white;
}

.unavailable {
  background-color: white; /* Grey for unselected slots */
}

/* Empty slot for top-left corner */
.empty-slot {
  grid-row: 1; /* First row */
  grid-column: 1; /* First column */
  background-color: #fff; /* Match grid background */
}

.my-profile-title {
  font-family: "Montserrat";
  font-size: 20px;
  font-weight: 600;
  line-height: 27px;
  text-align: left;
  text-underline-position: from-font;
  text-decoration-skip-ink: none;    
}

================
File: src/components/volunteerProfile/availabilityGrid/index.js
================
import React, { useEffect, useState } from 'react';
import { fetchVolunteerAvailability, setVolunteerAvailability, updateVolunteerAvailability } from '../../../api/volunteerService';
import './index.css';

import cancel_icon from "../../../assets/cancel-icon.png";
import check_icon from "../../../assets/check-icon.png";
import edit_icon from "../../../assets/edit-icon.png";

const AvailabilityGrid = ({ volunteerId, type = "" }) => {
  const [unsavedTimes, setUnsavedTimes] = useState([]);
  const [savedTimes, setSavedTimes] = useState([]);
  const [isEditing, setIsEditing] = useState(false);

  const timeLabels = ['9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM'];

  useEffect(() => {
    const fetchAvailability = async () => {
      try {
        const availability = await fetchVolunteerAvailability(volunteerId);

        // map slots to slot keys
        const slotKeys = availability.map((slot) => {
          const hourIndex = (Number(String(slot.start_time).substring(0, 2)) - 9) * 2;
          const minuteIndex = (Number(String(slot.start_time).substring(3, 5))) / 30;
          return `${Number(slot.day) - 1}-${hourIndex + minuteIndex}`
        })

        setUnsavedTimes(slotKeys);
        setSavedTimes(slotKeys);
      } catch (error) {
        console.error('Failed to fetch availability:', error);
      }
    };

    fetchAvailability();
  }, [volunteerId]);

  const handleSlotClick = (dayIndex, timeIndex) => {
    if (!isEditing) return;
    const slotKey = `${dayIndex}-${timeIndex}`;
    setUnsavedTimes((prev) =>
      prev.includes(slotKey)
        ? prev.filter((slot) => slot !== slotKey)
        : [...prev, slotKey]
    );
    setIsEditing(true);
  };

  const handleCheck = async () => {
    try {
      // Transform unsavedTimes into the expected format
      console.log(unsavedTimes)
      const availabilities = unsavedTimes.map((slotKey) => {
        const [dayIndex, timeIndex] = slotKey.split('-').map(Number);
        const day = dayIndex + 1;
        const startHour = Math.floor(timeIndex / 2) + 9; // Assuming timeLabels start at 9 AM
        const startMinute = (timeIndex % 2) * 30;
        const start_time = `${String(startHour).padStart(2, '0')}:${String(startMinute).padStart(2, '0')}`;

        let endHour;
        let endMinute;
        if (startMinute === 30) {
          endHour = startHour + 1;
          endMinute = 0;
        } else {
          endHour = startHour;
          endMinute = startMinute + 30;
        }
        const end_time = `${String(endHour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;

        return { day, start_time, end_time };
      });
      console.log('Submitting availability:', availabilities); // Debug log statement

      if (savedTimes.length === 0) {
        console.log("ID", volunteerId)
        await setVolunteerAvailability(volunteerId, availabilities);
      } else {
        await updateVolunteerAvailability(volunteerId, availabilities);
      }
      setSavedTimes(unsavedTimes);
      setIsEditing(false);
    } catch (error) {
      console.error('Failed to update availability:', error);
    }
  };

  const handleCancel = () => {
    setUnsavedTimes(savedTimes);
    setIsEditing(false);
  };

  const handleEdit = () => {
    setIsEditing(true);
  }

  return (
    <div className="availability-grid-container">
      <div className="availability-grid-content">
        <div className="availability-header">
          <h2 className="availability-title">My Availability</h2>
          {type !== "admin" && <>
            {isEditing ? (
              <div className="edit-options"> 
                <img className="icon check-icon" src={check_icon} alt="Check" hidden={!isEditing} onClick={handleCheck}/>          
                <img className="icon cancel-icon" src={cancel_icon} alt="Cancel" hidden={!isEditing} onClick={handleCancel}/>
              </div>
            ) : (
              <img className="icon edit-icon" src={edit_icon} alt="Edit" hidden={isEditing} onClick={handleEdit}/>
          )}
          </>}
        </div>
        <div 
          className="availability-grid"
        >
          {/* Row for day labels */}
          <div className="empty-slot"></div> {/* Empty top-left corner */}
          {["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"].map((day, index) => (
            <div key={`day-${index}`} className="day-label" style={index % 2 === 1 ? { background: "#F7F7F7" } : {}}>
              {day}
            </div>
          ))}
    
          {/* Time labels */}
          {timeLabels.map((time, index) => (
            <div
              key={`time-${index}`}
              className="time-label"
              style={{ gridRow: `${index * 2 + 2} / span 2` }} // Offset by one extra row for headers
            >
              {time}
            </div>
          ))}
    
          {/* Availability slots */}
          {Array(20)
            .fill(null)
            .map((_, timeIndex) =>
              Array(7)
                .fill(null)
                .map((_, dayIndex) => (
                  <div
                    key={`slot-${dayIndex}-${timeIndex}`}
                    className={`slot ${
                      unsavedTimes.includes(`${dayIndex}-${timeIndex}`)
                        ? "available unsaved"
                        : savedTimes.includes(`${dayIndex}-${timeIndex}`)
                        ? "available saved"
                        : "unavailable"
                    }`}
                    onClick={() => handleSlotClick(dayIndex, timeIndex)}
                    style={{ 
                      "background": !unsavedTimes.includes(`${dayIndex}-${timeIndex}`) && 
                      !savedTimes.includes(`${dayIndex}-${timeIndex}`) &&
                      dayIndex % 2 === 1 ? "#F7F7F7" : "",
                      "cursor": isEditing ? "pointer" : ""
                    }}
                  ></div>
                ))
            )}
        </div>
      </div>
    </div>
  );  
};

export default AvailabilityGrid;

================
File: src/components/volunteerProfile/changePasswordCard/index.css
================
@import '../../../styles.css';

.change-password-card-container {
    position: relative;
    max-width: 100%;
    height: 100%;
    border-radius: 8px;
    border: 1px solid #D9D9D9;
    box-shadow: 0px 4px 16px 0px #0F11110D;
}

.change-password-card {
    padding: 32px;
}

.change-password-card h2 {
    margin-top: 0;
    margin-bottom: 24px;
    font-size: 20px;
    font-size: var(--title-text);
    font-weight: var(--semi-bold);
}

.form-group {
    margin-bottom: 16px;
}
  
/* Label styling */
.form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 13px;
}

input::-ms-reveal {
    display: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    pointer-events: none;
    visibility: hidden;
}

/* Input wrapper styling */
.input-wrapper {
    position: relative;
    user-select: none;
}

/* Input field styling */
input {
    width: 100%; /* Make input take up the full width of its container */
    padding: 10px;
    padding-right: 40px; /* Add extra padding on the right for the toggle icon */
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 12px;
    box-sizing: border-box;
    font-family: var(--font-secondary);
}

/* Password toggle icon styling */
.password-toggle {
    position: absolute;
    right: 12px; /* Position icon inside the input field */
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    font-size: 18px;
    color: #666;
}

/* Button styling */
.change-password-btn {
    width: 100%;
    padding: 10px;
    background-color: #1687CA;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 13px;
    cursor: pointer;
    margin-top: 16px;
    font-family: var(--font-secondary);
}

/* Button hover effect */
.change-password-btn:hover {
    background-color: #1a98e1;
}

.my-profile-title {
    font-family: "Montserrat";
    font-size: 20px;
    font-weight: 600;
    line-height: 27px;
    text-align: left;
    text-underline-position: from-font;
    text-decoration-skip-ink: none;    
}

================
File: src/components/volunteerProfile/changePasswordCard/index.js
================
import React from 'react';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import { changePassword } from "../../../api/authService";
import "./index.css";

function ChangePasswordCard({ volunteer }) {
    
    const [passwordForm, setPassword] = React.useState({
        current: "",
        new: "",
        confirm: ""
    })
    const [showPasswordForm, setShowPasswordForm] = React.useState({
        current: false,
        new: false,
        confirm: false,
    });
    const [success, setSuccess] = React.useState("");

    
    const togglePasswordVisibility = (field) => {
        setShowPasswordForm((prevState) => ({
            ...prevState,
            [field]: !prevState[field],
        }));
    };

    const handleChange = (e) => {
        const {name, value} = e.target;
        setPassword({
            ...passwordForm,
            [name]: value
        })
    }

    const handleSubmit = async (e) => {
        console.log("clicked")
        e.preventDefault();
        if (passwordForm.new !== passwordForm.confirm) {
            console.error("Passwords must match.");
            return;
        }
        try {
            const data = await changePassword({
                currentPassword: passwordForm.current,
                newPassword: passwordForm.new
            })
            setSuccess(data.message);
        } catch (error) {
            setSuccess(error.toString());
            console.error(error);
        }
    }
    
    return (
        <div className="change-password-card-container">
            <div className="change-password-card">
                <h2 className="my-profile-title">Change Password</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Current Password</label>
                        <div className="input-wrapper">
                        <input
                            type={showPasswordForm.current ? 'text' : 'password'}
                            placeholder="Enter your current password"
                            name="current"
                            value={passwordForm.current}
                            onChange={handleChange}
                        />
                        <span
                            className="password-toggle"
                            onClick={() => togglePasswordVisibility('current')}
                        >
                            {showPasswordForm.current ? <FaEyeSlash /> : <FaEye />}
                        </span>
                        </div>
                    </div>
                    <div className="form-group">
                        <label>New Password</label>
                        <div className="input-wrapper">
                        <input
                            type={showPasswordForm.new ? 'text' : 'password'}
                            placeholder="Enter your new password"
                            name="new"
                            value={passwordForm.new}
                            onChange={handleChange}
                        />
                        <span
                            className="password-toggle"
                            onMouseDown={() => togglePasswordVisibility('new')}
                        >
                            {showPasswordForm.new ? <FaEyeSlash /> : <FaEye />}
                        </span>
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Confirm New Password</label>
                        <div className="input-wrapper">
                        <input
                            type={showPasswordForm.confirm ? 'text' : 'password'}
                            placeholder="Confirm your new password"
                            name="confirm"
                            value={passwordForm.confirm}
                            onChange={handleChange}
                        />
                        <span
                            className="password-toggle"
                            onClick={() => togglePasswordVisibility('confirm')}
                        >
                            {showPasswordForm.confirm ? <FaEyeSlash /> : <FaEye />}
                        </span>
                        </div>
                    </div>
                    <div><p>{success}</p></div>
                    <button 
                        type="submit" 
                        className="change-password-btn"
                    >
                        Change Password
                    </button>
                </form>
            </div>
        </div>
    );
}

export default ChangePasswordCard;

================
File: src/components/volunteerProfile/classPreferencesCard/index.css
================
@import '../../../styles.css';

.class-preferences-card {
    position: relative;
    max-width: 100%;
    height: fit-content;
    border-radius: 8px;
    border: 1px solid #D9D9D9;
    padding: 32px;
    box-shadow: 0px 4px 16px 0px #0F11110D;
    max-height: 40vh;
    overflow: auto;
}

.class-preferences-card h2 {
    margin-top: 0;
    margin-bottom: 24px;
    font-size: 20px;
}

.edit-icon {
    position: absolute;
    top: 32px;
    right: 32px;
    cursor: pointer;
    height: 25px;
    color: #808080;
    transition: 0.1s transform ease-in-out;
}

.edit-icon:hover {
    transform: scale(1.1);
    filter: brightness(0.6);
}


.class-preferences-column {
    margin: -8px 0;
    user-select: none;
}

.class-preference-box {
    position: relative;
    display: flex;
    margin: 8px 0;
}

.class-preference-box:active {
    cursor: grabbing;
}

.class-preference-index {
    font-size: 16px;
    margin-right: 16px;
    color: #808080;
    display: flex;
    align-items: center;
}

.class-preference {
    display: flex;
    width: 100%;
    height: fit-content;
    padding: 12px 16px;
    gap: 0px;
    border-radius: 8px;
    border: 1px solid #4385AC;
    font-size: 12px;
    justify-content: space-between;
    opacity: 0px;
}

.class-preference:active {
    background-color: #f5f8fc;
}

.class-preference-icon {
    display: flex;
    align-items: center;
    margin-right: 12px;
}

.class-preference-icon:hover {
    cursor: grab;
}

.class-preference-icon:active {
    cursor: grabbing;
}

.class-preference-text {
    flex: 1;
}

.class-preference-dragged .class-preference-box {
    position: absolute;
}











.my-profile-title {
    font-family: var(--font-secondary);
    font-size: 20px;
    font-weight: 600;
    line-height: 27px;
    text-align: left;
    text-decoration-skip-ink: none;    
}

.rank-title {
    font-family: var(--font-primary);
    font-size: 16px;
    font-weight: 400;
    line-height: 21.6px;
    text-align: left;
    text-decoration-skip-ink: none;
    color: var(--dark-grey);
}

.class-preferences-content {
    flex:1;
}

.no-class-preferences-img {
    width: 150px;
}

.no-class-preferences-container {
    min-width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 32px 0;
}

.plus-icon-empty {
    width: 16px;
    height: 16px;
}

.edit-button-empty {
    min-width: 220px;
    gap: 15px;
    padding: 0;
}

.edit-button-empty {
    font-family: var(--font-primary);
    font-size: 16px;
    font-weight: 400;
    line-height: 16px;
    text-decoration: none;
}

================
File: src/components/volunteerProfile/classPreferencesCard/index.js
================
import React, { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import { fetchUserPreferredClasses } from "../../../api/volunteerService";
import edit_icon from "../../../assets/edit-icon.png";
import empty_img from "../../../assets/no-class-preferences.png";
import plus from "../../../assets/plus.jpg";
import ClassPreferencesCard from "../../ClassPreferencesCard";
import "./index.css";

function ClassPreferencesCardMP({volunteer}) {
    const [preferredClasses, setPreferredClasses] = useState(null);

    useEffect(() => {
        const getCurrentUserPreferredClasses = async () => {
            const volunteerID = volunteer.volunteer_id;

            const classes_p = await fetchUserPreferredClasses(volunteerID);
            if (classes_p!=null && classes_p.length > 0) {
                let res = {};
                let rank1 = [];
                let rank2 = [];
                let rank3 = [];
                for (let i = 0; i < classes_p.length; i++) {
                    if (classes_p[i].class_rank === 1) {
                        rank1.push(classes_p[i]);
                    } else if (classes_p[i].class_rank === 2) {
                        rank2.push(classes_p[i]);
                    } else {
                        rank3.push(classes_p[i]);
                    }
                }
                res[1] = rank1;
                res[2] = rank2;
                res[3] = rank3;
                setPreferredClasses(res);
            }
        }; 
        getCurrentUserPreferredClasses();  
    }, []);

    function renderClassRank(rank, item) {
        let rankTitle;
        if (rank === 1) rankTitle = "Most Preferred";
        else if (rank === 2) rankTitle = "More Preferred";
        else rankTitle = "Preferred";

        return <>
            <h3 className="rank-title">{rankTitle}</h3>
            <>
                {item.length===0 ? <p style={{textAlign: "center"}}>No preferences</p> : item.map((class_, index) => (
                            <ClassPreferencesCard classData={class_} fullWith={true}/>
                ))}
            </>
        </>;
    }

    function renderEmpty() {
        return (<>
            <div class="no-class-preferences-container">
                <img className="no-class-preferences-img" src={empty_img} alt="No Preferred Classes"></img>
                <p>Not specified yet.</p>
                <NavLink className="cancel-button edit-rank-button edit-button-empty" to="/profile/preferences">
                    <img src={plus} alt="plus icon" className="plus-icon-empty"/>
                    Add My Preferences
                </NavLink>
            </div> 
        </>);
    }

    function renderPreferredClasses() {
        if (preferredClasses == null) {
            return renderEmpty();
        } else {
            return <>
                {renderClassRank(1, preferredClasses[1])}
                {renderClassRank(2, preferredClasses[2])}
                {renderClassRank(3, preferredClasses[3])}
            </>
        }
    }

    return (
        <div className="class-preferences-card">
            <NavLink to="/profile/preferences">
                    <img className="icon edit-icon" src={edit_icon} alt="Edit"/>
            </NavLink>
            <h2 className="my-profile-title">My Preferences</h2>
            <div className="class-preferences-content">
                {renderPreferredClasses()}
            </div>
        </div>
    )
}

export default ClassPreferencesCardMP;

================
File: src/components/volunteerProfile/volunteerDetailsCard/index.css
================
@import "../../../styles.css";

.profile-card-container {
    position: relative;
    max-width: 100%;
    height: 100%;
    border-radius: 8px;
    border: 1px solid #d9d9d9;
    display: flex;
    align-items: center;
    box-shadow: 0px 4px 16px 0px #0f11110d;
}

.profile-card {
    padding: 48px 32px;
}

.edit-icon {
    position: absolute;
    top: 32px;
    right: 32px;
    cursor: pointer;
    height: 16px;
    color: #808080;
}

.edit-options {
    position: absolute;
    top: 32px;
    right: 32px;
    display: flex;
    gap: 12px;
    height: 16px;
}

.check-icon {
    flex: 1;
}

.cancel-icon {
    flex: 1;
}

.icon:hover {
    cursor: pointer;
}

.profile-content-container {
    position: relative;
    display: flex;
    /* align-items: flex-start; */
    height: auto;
}

.profile-content {
    display: flex;
    /* align-items: flex-start; */
}

.profile-picture-form {
    width: 150px;
    min-width: 150px;
    height: 150px;
    position: relative;
    overflow: hidden;
    border-radius: 5px;
}

.profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 5px;
    background-color: rgba(0, 0, 0, 0.4); /* Semi-transparent overlay */
    color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    opacity: 0; /* Hidden by default */
}

.camera-icon {
    width: 3vw;
    height: 3vw;
    filter: invert(1);
}

.edit-text {
    margin: 0;
    font-size: 14px;
}

.profile-picture-form:hover .overlay {
    opacity: 1; /* Show overlay on hover */
}

.file-input {
    display: none;
}

.profile-info {
    margin-left: 16px;
}

.header {
    margin-bottom: 10px;
}

.header h2 {
    font-size: var(--title-text);
    font-weight: var(--semi-bold);
}

.profile-info h2 {
    margin: 0 0 10px 0;
    font-size: 20px;
}

.profile-table {
    margin-left: 0;
    border-collapse: separate;
    border-spacing: 5px;
    font-size: 13px;
}

.profile-table tr td:nth-child(1) {
    padding-right: 32px;
}

.profile-card tr td:nth-child(1) {
    color: #808080;
}

.profile-card tr td:nth-child(3) {
    padding: 0;
}

.text-input {
    margin: 0;
    padding: 6px;
    font-size: 13px;
    border-radius: 4px;
    font-family: var(--font-secondary)
}

.text-input:focus {
    outline: none;
    border: 1px solid #4385ac;
}

/* remove up and down arrow from phone number input */
/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
/* Firefox */
input[type=number] {
  appearance: textfield;
  -moz-appearance: textfield;

}

.pronouns-editor {
    position: relative;
    display: inline-block;
    width: 100%;
}

.pronouns-button {
    width: 100%;
    padding: 6px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
    text-align: left;
    cursor: pointer;
    font-size: 13px;
}

.select-icon {
    margin: 0;
    padding: 0;
    position: absolute;
    right: 5px; /* Position icon inside the input field */
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    font-size: 18px;
    align-items: center;
    color: #666;
}

.pronouns-menu {
    position: absolute;
    background-color: white;
    border: 1px solid #4385ac;
    border-radius: 5px;
    margin-top: 1px;
    width: 100%;
    padding: 6px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

.pronouns-item {
    border: 1px solid #fff;
    border-radius: 5px;
    padding: 6px 10px;
    cursor: pointer;
}

.pronouns-item:hover {
    border: 1px solid #4385ac;
    border-radius: 5px;
    background-color: #f0faff;
}

.location-editor {
    display: flex;
    justify-content: space-between;
}

.cities-menu {
    max-height: 20.5vw;
    overflow: scroll;
}

.location-editor {
    display: flex;
    justify-content: space-between;
}

.cities-menu {
    max-height: 20.5vw;
    overflow: scroll;
}
  
.my-profile-title {
    font-family: "Montserrat";
    font-size: 20px;
    font-weight: 600;
    line-height: 27px;
    text-align: left;
    text-underline-position: from-font;
    text-decoration-skip-ink: none;    
}


.bold {
    font-weight: var(--semi-bold);
}

.time-commitment-input {
    display: flex;
    align-items: baseline;
}

.time-commitment-units {
    margin-left: 8px;
    color: #808080;
    font-style: italic;
}

.row-gap {
    margin-top: 14px;
    border: red;
    border-radius: 5px;
}

.admin-menu {
    position: absolute;
    top: 4vw;
    right: 2vw;
    height: 5.7vw;
    width: 13vw;
    display: flex;
    flex-direction: column;
    border: 1px solid var(--primary-blue);
    border-radius: 8px;
    background-color: white;
    padding: 0.7vw;
}

.admin-menu-item {
    cursor: pointer;
    border: 1px solid var(--grey);
    border-radius: 8px;
    display: flex;
    align-items: center;
    height: 2.5vw;
}

.admin-menu-item:first-child {
    margin-bottom: 0.4vw;
}

.admin-menu-item .deactivate {
    width: 0.7vw;
    height: 0.7vw;
    margin-left: 0.6vw;
    background: url("../../../assets/cancel-icon.png") no-repeat center center/contain;
}

.admin-menu-item .reactivate {
    width: 0.8vw;
    height: 0.8vw;
    margin-left: 0.6vw;
    background: url("../../../assets/check-icon.png") no-repeat center center/contain;
}

.admin-menu-item .edit-email {
    width: 0.7vw;
    height: 0.7vw;
    margin-left: 0.6vw;
    background: url("../../../assets/edit-email-icon.png") no-repeat center center/contain;
}

.admin-menu-item p {
    margin-left: 0.5vw;
    font-size: 15px;
}

================
File: src/components/volunteerProfile/volunteerDetailsCard/index.js
================
import { useEffect, useState } from "react";
import "./index.css";

import camera_icon from "../../../assets/camera.png";
import cancel_icon from "../../../assets/cancel-icon.png";
import check_icon from "../../../assets/check-icon.png";
import edit_icon from "../../../assets/edit-icon.png";
import settings_icon from "../../../assets/settings-icon.png";
import ProfileImg from "../../ImgFallback";

import { CgSelect } from "react-icons/cg";
import { formatImageUrl } from "../../../api/imageService";
import { updateVolunteerData, uploadProfilePicture } from "../../../api/volunteerService";
import { useAuth } from "../../../contexts/authContext";
import useComponentVisible from "../../../hooks/useComponentVisible";
import {State, City} from 'country-state-city';
import Select from 'react-select';
import notyf from "../../../utils/notyf";
import Modal from "../../Modal";
import DeactivateReactivateModal from "../../Deactivate-Reactivate-Modal";

function VolunteerDetailsCard({ volunteer, type = "" }) {

    const { user, updateUser } = useAuth();

    const [isEditing, setIsEditing] = useState(false);
    const [mutableData, setMutableData] = useState({
        profilePicture: volunteer.profile_picture,
        preferredName: volunteer.p_name,
        pronouns: volunteer.pronouns,
        phoneNumber: volunteer.phone_number,
        city: volunteer.city,
        province: volunteer.province,
        timeCommitment: volunteer.p_time_ctmt
    });
    const [prevMutableData, setPrevMutableData] = useState({});
    const [tempImage, setTempImage] = useState(null);
    const [prevTempImage, setPrevTempImage] = useState(null);
    const provinces = [{value: "None", label: "None"}].concat(State.getStatesOfCountry('CA').map((state) => {
        return {value: state.isoCode, label: state.isoCode};
    }));
    const [selectedProvince, setSelectedProvince] = useState("BC");
    const [cities, setCities] = useState([{value: "None", label: "None"}].concat(City.getCitiesOfState('CA', selectedProvince).map((city) => {
        return {value: city.name, label: city.name};
    })));
    const [showAdminMenu, setShowAdminMenu] = useState(false);
    const [showModal, setShowModal] = useState(false);

    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);
    // const { ref: provinceRef, isComponentVisible: isProvinceVisible, setIsComponentVisible: setisProvinceVisible } = useComponentVisible(false);
    // const { ref: cityRef, isComponentVisible: isCityVisible, setIsComponentVisible: setisCityVisible } = useComponentVisible(false);
    const pronouns = ["None", "He/Him", "She/Her", "They/Them"];

    function sendTcNotif() {
        notyf.error("You may want to update your preferred time commitment.");
    }

    useEffect(() => {
        if (Number(mutableData.timeCommitment) <= 0 && !isEditing) {
            sendTcNotif();
        }
    }, [
        mutableData.timeCommitment,
        isEditing
    ]);

    const handleImageUpload = (event) => {
        const image = event.target.files[0];
        const reader = new FileReader();
        reader.onload = () => {
            setTempImage(reader.result);
            setMutableData({
                ...mutableData,
                profilePicture: image
            });
        };
        reader.readAsDataURL(image);
    };

    useEffect(() => {
        setCities([{value: "None", label: "None"}].concat(City.getCitiesOfState('CA', selectedProvince).map((city) => {
            return {value: city.name, label: city.name};
        })));
    }, [selectedProvince]);


    function formatDate(created_at) {
        const date = new Date(created_at);
        return new Intl.DateTimeFormat('en-US', {
            month: 'long',
            day: 'numeric',
            year: 'numeric'
        }).format(date);
    }

    function formatPhone(phoneNumber) {
        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6)}`;
    }

    function handleEdit(e) {
        e.preventDefault();
        setIsEditing(true);
        setPrevMutableData(mutableData);
        setPrevTempImage(tempImage);
    }

    async function handleSaveVolunteer() {
        // only send request if there are changes
        if (mutableData.preferredName !== prevMutableData.preferredName ||
            mutableData.pronouns !== prevMutableData.pronouns ||
            mutableData.phoneNumber !== prevMutableData.phoneNumber ||
            mutableData.city !== prevMutableData.city ||
            mutableData.province !== prevMutableData.province ||
            mutableData.timeCommitment !== prevMutableData.timeCommitment) {
                
            // store empty strings as null
            const volunteerData = {
                p_name: mutableData.preferredName ?? null,
                pronouns: mutableData.pronouns ?? null,
                phone_number: mutableData.phoneNumber ?? null,
                city: mutableData.city ?? "",
                province: mutableData.province ?? "",
                p_time_ctmt: mutableData.timeCommitment
            }

            const volunteerResult = await updateVolunteerData(volunteerData, volunteer.volunteer_id);
            console.log("Successfully updated volunteer.", volunteerResult);
            notyf.success("Successfully updated data. Please refresh the page to see changes.");
        }
    }

    async function handleSavePicture() {
        // only send request if there are changes
        if (mutableData.profilePicture !== prevMutableData.profilePicture) {
            // insert profile picture
            const profilePicData = new FormData();
            profilePicData.append('image', mutableData.profilePicture);

            const uploadedImageId = await uploadProfilePicture(volunteer.fk_user_id, profilePicData);

            mutableData.profilePicture = formatImageUrl(uploadedImageId);
            setTempImage(null);

            if (user.volunteer.volunteer_id === volunteer.volunteer_id) {
                updateUser({
                    ...user,
                    fk_image_id: uploadedImageId
                });
            }
        }
    }

    async function handleCheck(e) {
        e.preventDefault();

        if (Number(mutableData.timeCommitment) < 0) {
            notyf.error("Time commitment cannot be negative");
            return;
        }

        setIsEditing(false);
        mutableData.timeCommitment = Number(mutableData.timeCommitment);
        // update volunteer
        try {
            await handleSaveVolunteer();
            await handleSavePicture();
        } catch (error) {
            console.log(error)
            setMutableData(prevMutableData);
            setTempImage(prevTempImage);
        }
    }

    function handleCancel(e) {
        e.preventDefault();
        setIsEditing(false);
        setMutableData(prevMutableData);
        setTempImage(prevTempImage);
    }

    function handleInputChange(e) {
        const { name, value } = e.target;
        setMutableData({
            ...mutableData,
            [name]: value
        });
    }

    function handlePronounsClick(option) {
        setMutableData({
            ...mutableData,
            pronouns: option === "None" ? null : option
        });
        setIsComponentVisible(false);
    }

    function handleProvinceClick(option) {
        setSelectedProvince(option.value);
        setMutableData({
            ...mutableData,
            province: option.value === "None" ? null : option.value
        });
    }

    function handleCityClick(option) {
        setMutableData({
            ...mutableData,
            city: option.value === "None" ? null : option.value
        });
    }

    return (
        <div className="profile-card-container">
            <div className="profile-card">
                {type !== "admin" && 
                    <>
                        <img className="icon edit-icon" src={edit_icon} alt="Edit" hidden={isEditing} onClick={handleEdit}/>
                        <div className="edit-options"> 
                            <img className="icon check-icon" src={check_icon} alt="Check" hidden={!isEditing} onClick={handleCheck}/>          
                            <img className="icon cancel-icon" src={cancel_icon} alt="Cancel" hidden={!isEditing} onClick={handleCancel}/>
                        </div>
                    </>
                }
                {type === "admin" && <>
                    <img className="icon edit-icon" src={settings_icon} alt="Settings"      onClick={() => {
                        setShowAdminMenu(!showAdminMenu);
                    }}></img>
                    <Modal title={volunteer.active === 1 ? "Deactivate account" : "Reactivate account"} isOpen={showModal} onClose={() => {setShowModal(false)}} children={"hello"} width={"500px"} height={"fit-content"}>
                        <DeactivateReactivateModal id={volunteer.volunteer_id} type={volunteer.active} />
                    </Modal>
                </>
                }
                {showAdminMenu && 
                    <div className="admin-menu">
                        <div className="admin-menu-item" onClick={() => {
                            setShowModal(true);
                        }}><div className={volunteer.active === 1 ? "deactivate" : "reactivate"}></div><p>{volunteer.active === 1 ? "Deactivate" : "Reactivate"} account</p></div>
                        <div className="admin-menu-item"><div className="edit-email"></div><p>Edit volunteer email</p></div>
                    </div>
                }
                <div className="profile-content">
                    <div 
                        className="profile-picture-form"
                        style={{
                            cursor: isEditing ? 'pointer' : 'default'
                        }}
                        onClick={() => {
                            if (isEditing) 
                                document.getElementById('fileInput').click()
                        }}
                    >
                        <ProfileImg
                            className="profile-image"
                            src={tempImage ?? mutableData.profilePicture}
                            name={mutableData.preferredName || volunteer.f_name}
                        ></ProfileImg>
                        {isEditing && <div className="overlay">
                            <img src={camera_icon} alt="Edit Profile" className="camera-icon" />
                            <p className="edit-text">Edit</p>
                        </div>}
                        {isEditing && <input
                            className="file-input"
                            id="fileInput" 
                            type="file" 
                            accept="image/*" 
                            onChange={handleImageUpload} 
                        />}
                        
                    </div>
                    <div className="profile-info">
                        <div className="header">
                            <h2 className="my-profile-title">{volunteer.f_name} {volunteer.l_name}</h2>
                        </div>
                        <table className="profile-table">
                            <tbody>
                                <tr className="view volunteer-preferred-name">
                                    <td>Preferred Name</td>
                                    <td 
                                        className="mutable-value" 
                                        style={mutableData.preferredName ? {} : {
                                            'color': '#808080',
                                            'fontStyle': 'italic'
                                        }}
                                        hidden={isEditing}>
                                            {mutableData.preferredName ?? "not yet set"}
                                    </td>
                                    <td hidden={!isEditing}>
                                        <input type="text" className="text-input" name="preferredName" value={mutableData.preferredName} onChange={handleInputChange}></input>
                                    </td>
                                </tr>
                                <tr className="row-gap"/>
                                <tr className="view volunteer-pronouns">
                                    <td>Pronouns</td>
                                    <td 
                                        className="mutable-value" 
                                        style={mutableData.pronouns ? {} : {
                                            'color': '#808080',
                                            'fontStyle': 'italic'
                                        }}
                                        hidden={isEditing}>
                                            {mutableData.pronouns ?? "not yet set"}
                                    </td>
                                    {isEditing && (
                                        <td 
                                            className="pronouns-editor" 
                                            ref={ref}
                                        >
                                            <button 
                                                className="pronouns-button"
                                                style={{
                                                    'fontFamily': 'var(--font-secondary)',
                                                    'color': mutableData.pronouns ? '':'#808080',
                                                    'borderColor': isComponentVisible ? '#4385AC':''
                                                }}
                                                onClick={() => {
                                                    setIsComponentVisible(!isComponentVisible)
                                                }}
                                            >
                                                {mutableData.pronouns ? mutableData.pronouns : "None"}
                                                <CgSelect className="select-icon"/>
                                            </button>
                                            {isComponentVisible && (
                                                <div 
                                                    className="pronouns-menu"
                                                >
                                                    {pronouns.map((option, index) => (
                                                        <div
                                                            className="pronouns-item"
                                                            key={index}
                                                            onClick={() => handlePronounsClick(option)}
                                                            style={index === 0 ? {'color': '#808080'} : {}}
                                                        >
                                                            {option}
                                                        </div>
                                                    ))}
                                                </div>
                                            )}
                                        </td>)}
                                </tr>
                                <tr className="row-gap"/>
                                <tr className="view volunteer-time-commitment">
                                    <td>Preferred Time Commitment</td>
                                    <td 
                                        className="mutable-value" 
                                        hidden={isEditing}>
                                            <span className="bold">{mutableData.timeCommitment}</span> hr{mutableData.timeCommitment === 1 ? '':'s'}/week 
                                    </td>
                                    <td hidden={!isEditing}>
                                        <div className="time-commitment-input">
                                            <input 
                                                type="number" 
                                                min={0} 
                                                max={40} 
                                                className="text-input"
                                                name="timeCommitment" 
                                                value={mutableData.timeCommitment} 
                                                onChange={handleInputChange}
                                            />
                                            <div className="time-commitment-units">hrs/week</div>
                                        </div>
                                    </td>
                                </tr>
                                <tr className="row-gap"/>
                                <tr className="view volunteer-phone">
                                    <td>Phone</td>
                                    <td 
                                        className="mutable-value" 
                                        style={mutableData.phoneNumber ? {} : {
                                            'color': '#808080',
                                            'fontStyle': 'italic'
                                        }}
                                        hidden={isEditing}>
                                            {mutableData.phoneNumber ? formatPhone(mutableData.phoneNumber) : "not yet set"}
                                    </td>
                                    <td hidden={!isEditing}>
                                        <input type="number" className="text-input" name="phoneNumber" value={mutableData.phoneNumber} onChange={handleInputChange}></input>
                                    </td>
                                </tr>
                                <tr className="row-gap"/>
                                <tr className="view volunteer-email" hidden={isEditing}>
                                    <td>Email</td>
                                    <td>{volunteer.email}</td>
                                </tr>
                                <tr className="row-gap"/>
                                <tr className="view volunteer-joined-date" hidden={isEditing}>
                                    <td>Joined</td>
                                    <td>{formatDate(volunteer.created_at)}</td>
                                </tr>
                                <tr className="view volunteer-location">
                                    <td hidden={isEditing}>Location</td>
                                    <td hidden={isEditing}>{volunteer.city && volunteer.province ? `${volunteer.city}, ${volunteer.province}` : 'No Location Set'}</td>
                                    {isEditing && (
                                        <>
                                            <td style={{
                                                'color': '#808080'
                                            }}>Province</td>
                                            <Select
                                                className="basic-single"
                                                classNamePrefix="select"
                                                defaultValue={mutableData.province ? {value: mutableData.province, label: mutableData.province} : null}
                                                options={provinces}
                                                isSearchable={true}
                                                components={
                                                    {
                                                        DropdownIndicator: () => 
                                                            <CgSelect className="select-icon"/>,
                                                        IndicatorSeparator: () => null,
                                                        Option: (props) => {
                                                            const {innerProps, innerRef} = props;
                                                            return (
                                                                <div {...innerProps} ref={innerRef} className="pronouns-item">
                                                                    {props.data.value}
                                                                </div>
                                                            )
                                                        },
                                                        Menu: (props) => {
                                                            const {innerProps, innerRef} = props;
                                                            return (
                                                                <div {...innerProps} ref={innerRef}
                                                                className="pronouns-menu">
                                                                    {props.children}
                                                                </div>
                                                            )
                                                        }
                                                    }
                                                }
                                                onChange={(option) => {
                                                    handleProvinceClick(option);
                                                }}
                                            />
                                        </>
                                    )}
                                </tr>
                                <tr hidden={!isEditing}>
                                    <td>City</td>
                                    <Select
                                        className="basic-single"
                                        classNamePrefix="select"
                                        defaultValue={mutableData.city ? {value: mutableData.city, label: mutableData.city} : null}
                                        options={cities}
                                        isSearchable={true}
                                        components={
                                            {
                                                DropdownIndicator: () => 
                                                    <CgSelect className="select-icon"/>,
                                                IndicatorSeparator: () => null,
                                                Option: (props) => {
                                                    const {innerProps, innerRef} = props;
                                                    return (
                                                        <div {...innerProps} ref={innerRef} className="pronouns-item">
                                                            {props.data.value}
                                                        </div>
                                                    )
                                                },
                                                Menu: (props) => {
                                                    const {innerProps, innerRef} = props;
                                                    return (
                                                        <div {...innerProps} ref={innerRef}
                                                        className="pronouns-menu">
                                                            {props.children}
                                                        </div>
                                                    )
                                                }
                                            }
                                        }
                                        onChange={(option) => {
                                            handleCityClick(option);
                                        }}
                                    />
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
      );
}

export default VolunteerDetailsCard;

================
File: src/contexts/authContext.js
================
import React, { createContext, useContext, useEffect, useState } from "react";
import api from "../api/api";
import { checkAuth } from "../api/authService";

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isVolunteer, setIsVolunteer] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [user, setUser] = useState(undefined);
  
  // Local state
  const [loading, setLoading] = useState(true);

  // Function to check authentication and update state
  const doCheckAuth = async () => {
    try {
      const authResponse = await checkAuth();

      switch (authResponse.user.role) {
        case "volunteer":
          setIsVolunteer(true);
          break;
        case "admin":
          setIsAdmin(true);
          break;
        default:
          break;
      }

      setUser(authResponse.user);
      setIsAuthenticated(true);
    } catch (error) {
      setUser(undefined);
      setIsVolunteer(false);
      setIsAdmin(false);
      setIsAuthenticated(false);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    doCheckAuth();
  }, []);

  const login = async (credentials) => {
    const response = await api.post("/auth/login", credentials)
      .catch(err => {
        setIsAuthenticated(false);
        throw err;
      });
  
    localStorage.setItem("neuronAuthToken", response.data.token);
    setTimeout(() => {
      doCheckAuth();
    }, 1500);
  };

  const logout = () => {
    localStorage.clear("neuronAuthToken");
    setIsAuthenticated(false);
    setIsAdmin(false);
    setIsVolunteer(false);
    setUser(undefined);
  };

  const updateUser = updatedUser => setUser(updatedUser);

  return (
    <AuthContext.Provider value={{ isVolunteer, isAdmin, user, updateUser, isAuthenticated, login, logout }}>
      {/* Loading state as to not lose url, TODO: make it prettier, use gmail as an example of a full page loader */}
      {loading ? <></> : children}
    </AuthContext.Provider>
  );
};

================
File: src/data/constants.js
================
export const backend = import.meta.env.PUBLIC_BACKEND_URL;

export const SHIFT_TYPES = {
    MY_SHIFTS: 'my-shifts',
    COVERAGE: 'coverage',
    MY_COVERAGE_REQUESTS: 'my-coverage-requests',
    DEFAULT: 'default',
};

// For 'my-coverage-requests', it'll only be either OPEN or RESOLVED
export const COVERAGE_STATUSES = {
    RESOLVED: 'resolved',
    PENDING: 'pending',
    OPEN: 'open',
};

export const appColors = {};

================
File: src/hooks/useComponentVisible.js
================
import { useState, useEffect, useRef } from 'react';

export default function useComponentVisible(initialIsVisible) {
    const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);
    const ref = useRef(null);

    const handleClickOutside = (event) => {
        if (ref.current && !ref.current.contains(event.target)) {
            setIsComponentVisible(false);
        }
    };

    useEffect(() => {
        document.addEventListener('click', handleClickOutside, true);
        return () => {
            document.removeEventListener('click', handleClickOutside, true);
        };
    });

    return { ref, isComponentVisible, setIsComponentVisible };
}

================
File: src/pages/AdminVerify - ToDelete/index.css
================
.table-data {
    padding-top: 1vw;
}

.verify-table {
    width: 80vw;
    margin: auto;
    border-collapse: collapse;
    border-spacing: 0;
    font-family: var(--font-secondary);
}   

.verify-table-head .verify-th {
    color: black;
    height: 2vw;
    font-family: var(--font-secondary);
}

.verify-table .verify-tr:hover {
    background-color: #f5f5f5;
}

.verify-table .verify-th, .verify-td {
    border: 1px solid #ddd;
    text-align: left;
    padding: 0.7vw;
}

.verify-table .verify-td {
    font-family: var(--font-tertiary);
}

.errorMsg {
    text-align: center;
}

.verify-heading {
    padding-top: 2vw;
    padding-left: 10vw;
    font-family: var(--font-secondary);
}

================
File: src/pages/AdminVerify - ToDelete/index.js
================
import "./index.css";
import { useEffect, useState } from "react";
import {
    getUnverifiedVolunteers,
    verifyVolunteer,
} from "../../api/adminService";
import { useNavigate } from "react-router-dom";
import notyf from "../../utils/notyf";

const AdminVerify = () => {
    const [volunteers, setVolunteers] = useState([]);
    const navigate = useNavigate();

    const getUnverifiedVolunteersAndSetVolunteers = async () => {
        getUnverifiedVolunteers()
            .then((response) => {
                if (response.volunteers === null) {
                    navigate("/auth/login");
                } else if (response.volunteers.length === 0) {
                    notyf.error("No unverified volunteers");
                    setVolunteers([]);
                } else {
                    setVolunteers(response.volunteers);
                    console.log("Volunteers: ", response.volunteers);
                }
            })
            .catch((error) => {
                if (error.response.status === 401 || 400) {
                    console.log("Error: ", error.response.data.message);
                    navigate("/auth/login");
                } else if (error.response.status === 500) {
                    console.log("Error: ", error.response.data.message);
                    notyf.error("Internal server error");
                }
            });
    };

    useEffect(() => {
        getUnverifiedVolunteersAndSetVolunteers();
        // eslint-disable-next-line
    }, []);

    return (
        <>
            <h1 className="verify-heading">Verify Volunteers</h1>
            <table className="verify-table">
                <thead className="verify-table-head">
                    <tr className="verify-tr">
                        <th className="verify-th">#</th>
                        <th className="verify-th">Volunteer ID</th>
                        <th className="verify-th">First Name</th>
                        <th className="verify-th">Last Name</th>
                        <th className="verify-th">Email</th>
                        <th className="verify-th">Verify</th>
                    </tr>
                </thead>
                {volunteers.length === 0 && (
                    <td colspan="6" className="verify-td errorMsg">
                        No unverified volunteers
                    </td>
                )}
                <tbody>
                    {volunteers.map((volunteer, index) => (
                        <tr key={index} className="verify-tr">
                            <td className="verify-td table-data">{index + 1}</td>
                            <td className="verify-td table-data">
                                {volunteer.volunteer_id}
                            </td>
                            <td className="verify-td table-data">{volunteer.f_name}</td>
                            <td className="verify-td table-data">{volunteer.l_name}</td>
                            <td className="verify-td table-data">{volunteer.email}</td>
                            <td className="verify-td">
                                <button
                                    className="btn btn-primary"
                                    onClick={() => {
                                        console.log(
                                            "Verify volunteer: ",
                                            volunteer.volunteer_id
                                        );
                                        verifyVolunteer(volunteer.volunteer_id)
                                            .then((response) => {
                                                if (response.error) {
                                                    notyf.error(response.error);
                                                } else {
                                                    notyf.success(
                                                        "Volunteer verified"
                                                    );
                                                    getUnverifiedVolunteersAndSetVolunteers();
                                                }
                                            })
                                            .catch((error) => {
                                                if (
                                                    error.response.status ===
                                                    401
                                                ) {
                                                    navigate("/auth/login");
                                                } else if (
                                                    error.response.status ===
                                                    500
                                                ) {
                                                    notyf.error(
                                                        "Internal server error"
                                                    );
                                                }
                                            });
                                    }}>
                                    Verify
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </>
    );
};

export default AdminVerify;

================
File: src/pages/AdminVolunterProfile/index.js
================
import ChangePasswordCard from "../../components/volunteerProfile/changePasswordCard";
import VolunteerDetailsCard from "../../components/volunteerProfile/volunteerDetailsCard";
import AvailabilityGrid from "../../components/volunteerProfile/availabilityGrid";
import { formatImageUrl } from '../../api/imageService';
import { useSearchParams } from "react-router-dom";
import { useEffect, useState } from "react";
import { fetchVolunteerData } from "../../api/volunteerService";
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import DashboardCoverage from "../../components/DashboardCoverage";
import Notifications from "../../components/Notifications";

const AdminVolunteerProfile = () => {
    const [searchParams] = useSearchParams();

    const [availability, setAvailability] = useState([]);
    const [volunteer, setVolunteer] = useState(null);

    useEffect(() => {
        const volunteer_id = searchParams.get("volunteer_id");
        if (!volunteer_id) return;
        fetchVolunteerData(volunteer_id)
            .then((data) => {
                console.log(data);
                setVolunteer(data);
            });
    }, [searchParams]);

    return (
        <main className="content-container" style={{
          overflowY: "auto",
        }}>
          <div className="content-heading">
            <h2 className="content-title">Volunteer Profile</h2>
            <Notifications />
          </div>
          {volunteer ?
            <div className="content">
                <div className="column-1">
                    <div className="volunteer-card">
                        <VolunteerDetailsCard volunteer={{
                            ...volunteer,
                            profile_picture: formatImageUrl(volunteer.fk_image_id)
                        }} type="admin" />
                    </div>
                    <div className="availability-card">
                        <AvailabilityGrid
                            volunteerId={volunteer.volunteer_id}
                            availability={availability}
                            setAvailability={setAvailability}
                            type="admin"
                        />
                    </div>
                </div>
                <div className="column-2">
                    <div className="dash-col-card dash-grid-item">
                        <div className="dash-card-title">Volunteer Hours </div>
                        <div className="dash-hours-container">
                            <div className="dash-hours">
                            <h1 className="dash-completed-hours">20</h1>
                            <p>Completed</p>
                            </div>
                            <div className="dash-hours">
                                <h1 className="dash-upcoming-hours">3</h1>
                                <p>Upcoming</p>
                            </div>
                        </div>
                    </div>

                    <div className="dash-col-card dash-grid-item">
                        <div className="dash-card-header">
                            <div className="dash-card-title">Coverage Hours </div>
                            <HelpOutlineIcon sx={{ color: "var(--primary-blue)" }} />
                        </div>
                        <DashboardCoverage future={false} />
                    </div>
                </div>
            </div>
            : <></> 
          }
        </main>
      );
}

export default AdminVolunteerProfile

================
File: src/pages/Classes/index.css
================
@import "../../styles.css";

.classes-page {
  font-family: var(--font-secondary);
  padding: 0 36px; 
  overflow-y: auto;
  height: 100%;
}

.main-category-header {
  display: flex;
  flex-wrap: nowrap;
  overflow-x: auto;
  background-color: transparent;
  border-bottom: 1px solid var(--grey);
  padding-left: 36px;
}

.category-button {
  position: relative;
  flex: 0 0 auto; /* prevent shrinking or growing */
  text-align: center;
  margin: 0 1.125rem 0 1.125rem;
  padding: 0 0 0.5rem 0;
  color: var(--dark-grey);
  border: none;
  white-space: nowrap;
  cursor: pointer;
  background-color: transparent;
  width: fit-content;
  min-width: 100px;
  text-align: center;
  align-content: center;
  font-family: inherit; /* Need to specify inherit or it will use user agent stylesheet */
}

.category-button:first-child {
  margin-left: 0;
}

.selected {
  color: var(--primary-blue);
}

/* Pseudo elements for the bottom border */
.category-button::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 3px;
  background-color: var(--secondary-blue);
  border-radius: 2px 2px 0 0;
  transition: transform 0.3s ease, opacity 0.3s ease;
  transform: scaleX(0);
  opacity: 0;
}

.category-button.selected::after {
  transform: scaleX(1);
  opacity: 1;
}

/* ----- */

/* additional padding for class content scroll */
.spacer {
  height: 36px;
  width: 100%;
}

================
File: src/pages/Classes/index.js
================
import React, { useEffect, useRef, useState } from "react";
import {
  getAllClasses,
  getAllClassSchedules
} from "../../api/classesPageService";
import { formatImageUrl } from "../../api/imageService";
import ClassCategoryContainer from "../../components/ClassCategoryContainer";
import DetailsPanel from "../../components/DetailsPanel";
import "./index.css";

function Classes() {
  const [completeClassData, setCompleteClassData] = useState(null);
  const [groupedByCategory, setGroupedByCategory] = useState({});
  const [selectedCategory, setSelectedCategory] = useState("Online Exercise");
  const [selectedClassId, setSelectedClassId] = useState(null);

  const sectionRefs = useRef({});
  const observer = useRef(null);

  useEffect(() => {
    const fetchClassesImagesAndSchedules = async () => {
      try {
        const [classData, classSchedules] = await Promise.all([
          getAllClasses(),
          getAllClassSchedules(),
        ]);

        const classesWithImagesAndSchedules = classData.map((classItem) => {
          const imageUrl = formatImageUrl(classItem.fk_image_id);
          const matchedSchedules = classSchedules.filter((schedule) => {
            return schedule.fk_class_id === classItem.class_id;
          });

          return {
            class_id: classItem.class_id,
            class_name: classItem.class_name,
            category: classItem.category,
            subcategory: classItem.subcategory,
            image_url: imageUrl,
            schedules: matchedSchedules,
          };
        });

        setCompleteClassData(classesWithImagesAndSchedules);
        // console.log(classesWithImages);
      } catch (error) {
        console.error(error);
      }
    };

    fetchClassesImagesAndSchedules();
  }, []);

  useEffect(() => {
    if (completeClassData) {
      const grouped = completeClassData.reduce((acc, classItem) => {
        if (!acc[classItem.category]) {
          acc[classItem.category] = [];
        }
        acc[classItem.category].push(classItem);
        return acc;
      }, {});
      setGroupedByCategory(grouped);
    }
  }, [completeClassData]);

  // TODO: Currently fixed categories for the header
  const categories = [
    "Online Exercise",
    "Creative & Expressive",
    "Care Partner Workshops",
    "Food & Nutrition",
    "Other Opportunities"
  ];

  categories.forEach((category) => {
    if (!sectionRefs.current[category]) {
      sectionRefs.current[category] = React.createRef();
    }
  });

  useEffect(() => {
    observer.current = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setSelectedCategory(entry.target.getAttribute("data-category"));
          }
        });
      },
      { threshold: 0.5 } // triggers when 50% of section is visible
    );

    // observe all section refs
    Object.entries(sectionRefs.current).forEach(([category, ref]) => {
      if (ref.current) {
        observer.current.observe(ref.current);
      }
    });

    return () => {
      if (observer.current) {
        observer.current.disconnect();
      }
    };
  }, [groupedByCategory]);

  const scrollToSection = (category) => {
    const sectionRef = sectionRefs.current[category];
    const catalog = document.querySelector(".classes-page");
  
    if (sectionRef && sectionRef.current && catalog) {
      const catalogTop = catalog.getBoundingClientRect().top;
      const sectionTop = sectionRef.current.getBoundingClientRect().top;
      const scrollOffset = sectionTop - catalogTop + catalog.scrollTop;
  
      catalog.scrollTo({
        top: scrollOffset,
        behavior: "smooth",
      });
    }
  };

  const handleClassSelection = (classData) => {
    setSelectedClassId(classData.class_id);
    console.log("Selected class data: ", classData);
  };

  return (
    <main className="content-container">
      <div className="content-heading">
        <h2 className="content-title">Classes</h2>
      </div>
      <div className="main-category-header">
        {categories.map((category) => {
          const isSelected = selectedCategory === category;
          return (
            <button
              key={category}
              className={`category-button ${isSelected ? "selected" : ""}`}
              onClick={() => {
                setSelectedCategory(category);
                scrollToSection(category);
              }}
            >
              {category}
            </button>
          );
        })}
      </div>
      <DetailsPanel
        classId={selectedClassId}
        classList={completeClassData}
        setClassId={setSelectedClassId}
      >
        <div className="classes-page">
          {Object.entries(groupedByCategory).map(([category, classData]) => {
            return (
              <ClassCategoryContainer
                key={category}
                ref={sectionRefs.current[category]}
                category={category}
                classData={classData}
                data-category={category}
                onClassSelect={handleClassSelection}
              />
            );
          })}
          <div className="spacer"></div>
        </div>
      </DetailsPanel>
    </main>
  );
}

export default Classes;

================
File: src/pages/ClassPreferences/index.css
================
@import '../../styles.css';  /*Imports custom fonts*/

.parent-container {
     padding: 32px;
     border-radius: 8px;
     border: 1px solid #D9D9D9;
     box-shadow: 0px 4px 16px 0px #0F11110D;
     margin: 0 32px;
     margin-bottom: 40px;
     overflow: auto;
}
.parent-container-header {
     display: flex;
}
.parent-container-title {
     margin-left: 0px;
     margin-right: auto;
     display: flex;
     align-items: center;
     font-family: 'Montserrat';
     font-size: 20px;
     font-weight: 600;
     line-height: 27px;
     text-align: left;
     text-underline-position: from-font;
     text-decoration-skip-ink: none;
}

.middle-button {
     margin-left: auto;
     margin-right: 16px;
}
.left-button {
     margin-right: 0px;
}
.rank-container {
     border: 1px solid #D9D9D9;
     padding: 20px;
     margin-top: 20px;
     border-radius: 8px;
     min-height: 180px;
     display: flex;
     flex-direction: row;
     height: auto;
     width: calc(100%-64px);
     align-items: center;
}
.rank-header {
     padding-right: 20px;
     width: 170px;
     max-width: 170px;
     min-width: 170px;
     display: flex;
     flex: 1;
     align-items: center;
     min-height: 140px;
}
.rank-name {
     color: #0F1111;
     font-family: Montserrat;
     font-size: 28px;
     font-weight: 500;
     line-height: 37.8px;
     text-align: left;
     width: 150px;
     padding: 10px 0;
     margin: 0px;
}
.edit-rank-button {
     margin: 0px;
     width: 150px; 
     height: 40px;
     display: flex;
     flex-direction: row;
     align-items: center;
     justify-content: center;
     border: 1px solid #4385AC;
     background-color: white;
     border-radius: 8px;
}
.edit-rank-button div {
     margin-left: 8px;
     font-family: "Roboto";
     font-weight: 400;
     font-size: 16px;
}
.edit-rank-button:hover {
     cursor: pointer;
     filter: brightness(0.7);
}
.class-preferences-card-container {
     width: calc(100% - 170px);
     padding-left: 32px;
     min-height: 180px;
     height: auto;
     border-left: 1px solid #D9D9D9;
     display: flex;
     align-items: center;
     flex-wrap: wrap;
     gap: 20px;
}

.modal-title {
     font-family: var(--font-secondary);
     font-size: 20px;
     font-weight: var(--semi-bold);
}

.search-bar-container {
     width: 100%;
     display: flex;
     height: 40px;
     padding: 0;
     margin-top: 28px;
     position: relative;
}

.search-bar {
     height: 40px;
     width: calc(100% - 48px - 8px);
     border-radius: 8px;
     border: 1px solid var(--dark-grey);
     background-color: transparent;
     display: flex;
}

.search-bar > button {
     border: none;
     padding: 0;
     margin: 0;
     cursor: pointer;
}

.search-button {
     background: transparent;
} 

.search-button:hover > img {
     transform: scale(1.5);
     filter: brightness(0.5);
} 

.search-button > img {
     width: 16px;
     height: 16px;
     margin:12px 8px 12px 12px;
     transition: 0.2s ease-in-out transform;
}

.search-bar > input {
     width: calc(100% - 32px);
     border: none;
     background: transparent; 
     margin: 0px;
     font-size: 16px;
     color: var(--dark-grey);
}


.filter-button {
     width: 48px;
     height: 42px;
     cursor: pointer;
     display: flex;
     justify-content: center;
     align-items: center;
     padding: 0;
     border-radius: 8px;
     border: 1px solid var(--primary-blue);
     margin-left: auto;
     margin-right: 0;
     background: var(--white);
}
.filter-button:hover {
     filter: brightness(0.8);
}

.filter-button > img {
     width: 16px;
     height: 16px;
}

.modal-info-bar {
     display: flex;
     margin-top: 20px;
     justify-content: space-between;
}

.modal-info-bar > div, .modal-info-bar > button {
     font-family: var(--font-primary);
     font-size: 16px;
     font-weight: 400;
     background: var(--white);
     border: none;
}

.modal-info-bar > button:hover {
     text-decoration: underline;
     font-weight: 500;
     cursor: pointer;
}

.class-cat {
     font-family: var(--font-primary);
     font-size: 16px;
     font-weight: 400;
     line-height: 21.6px;
     color: var(--dark-grey);
}

.seach-classes-container {
     position: relative;
     margin-top: 32px;
     margin-bottom: 32px;
     height: calc(90vh - 250px);
     overflow: scroll;
}

.class-container {
     width: auto;
     border: 1px solid var(--grey);
     margin: 14px 0;
     border-radius: 8px;
     padding: 12px 16px;
     display: flex;
     flex-direction: row;
}
.class-container > div {
     max-height: 42px;
     min-height: 42px;
}

.class-container-col1 {
     display: flex;
     align-items: center;
     margin-right: 16px;
}

.class-container-col2 {
     display: flex;
     flex-direction: column;
     justify-content: center;
     margin-right: 16px;
     width: 72px;
}

.class-container-col2 > h2 {
     margin: 0px;
     font-family: var(--font-primary);
     font-size: 16px;
     font-weight: 600;
}

.class-container-col2 > h3 {
     margin: 0px;
     font-family: var(--font-primary);
     font-size: 12px;
     font-weight: 400;
     color: var(--dark-grey);
}

.class-container-col3 {
     display: flex;
     flex-direction: column;
     justify-content: center;
}

.class-container-col3 > .class-container-col3-name {
     font-family: var(--font-primary);
     font-size: 16px;
     font-weight: 400;
     color: #0F1111;
     height: 22px;
}

.class-container-col3 > .class-container-col3-instr {
     font-family: var(--font-primary);
     font-size: 12px;
     font-weight: 400;
     color: var(--dark-grey);
}

.modal-save-button {
     position: absolute;
     width: calc(100% - 64px);
     bottom: 20px;
}

.confirm-modal-container {
     margin: 24px;
     margin-top: 32px;
     text-align: center;
}

.confirm-modal-container > div {
     margin-top: 16px;
     display: flex;
     justify-content: center;
     gap: 10px;
}

.alert-modal-content {
     padding: 32px;
     display: flex;
     flex-direction: column;
     justify-content: center;
     gap: 24px;
}

.filter-panel {
     position: absolute;
     width: auto;
     height: auto;
     max-height: 500px;
     overflow: scroll;
     top: calc(100% + 2px);
     right: 0;
     border-radius: 8px;
     border: 1px solid var(--primary-blue);
     padding: 16px;
     background-color: var(--white);
     z-index: 10;
}

.filter-item {
     display: flex;
     flex-direction: row;
     gap: 12px;
     padding: 16px;

}

================
File: src/pages/ClassPreferences/index.js
================
import "./index.css";
import React, {useEffect, useState, useRef} from 'react';
import edit_icon from "../../assets/edit-icon.png";
import filter_icon from "../../assets/filter-icon.png";
import search_icon from "../../assets/search-icon.png";
import { useAuth } from "../../contexts/authContext";
import { fetchUserPreferredClasses, fetchAllClassPreferences, updateUserPreferredClasses, fetchVolunteerAvailability} from "../../api/volunteerService";
import ClassPreferencesCard from "../../components/ClassPreferencesCard";
import Modal from "../../components/Modal";
import Checkbox from "../../components/Checkbox";

function ifFitAvailability(class_, availability) {
     return compareTime(availability.start_time, class_.start_time) && compareTime(class_.end_time, availability.end_time);
}

function compareTime (time1, time2) {
     const t1 = time1.split(":");
     const t2 = time2.split(":");
     if (Number(t1[0]) < Number(t2[0])) return true;
     else if (Number(t1[0]) === Number(t2[0]) && Number(t1[1]) <= Number(t2[1])) {
     return true;
     } else return false;
}

function ClassPreferences() {
     // Class Preferences page hooks
     const [volunteerId, setVolunteerId] = useState(null);
     const [preferredClasses, setPreferredClasses] = useState({1: [], 2: [], 3: []});
     const [allClasses, setAllClasses] = useState(null);
     const { user } = useAuth();
     const [userAvailability, setUserAvailability] = useState(null);
     const FIT_AVAILABILITY_TITLE = "Classes that Fit My Availability";

     // Modal hooks
     const [modalOpen, setModalOpen] = useState(false);
     const [modalTitle, setModalTitle] = useState("");
     const [chosenRank, setChosenRank] = useState(0);
     const [chosenNumClasses, setChosenNumClasses] = useState(null);
     const [numFilters, setNumFilters] = useState(0);
     const [confirmModalOpen, setConfirmModalOpen] = useState(false);
     const [alertModalOpen, setAlertModalOpen] = useState(false);
     const [displayClassPref, setDisplayClassPref] = useState(null);
     const [searchText, setSearchText] = useState("");
     const [showFilterPanel, setShowFilterPanel] = useState(false);
     const filterPanelRef = useRef(null);
     const filterButtonRef = useRef(null);
     const [filterSet, setFilterSet] = useState(new Set());
     const [ifFitAvailabilityShow, setIfFitAvailabilityShow] = useState(false);
     const [fitAvailabilityClasses, setFitAvailabilityClasses] = useState(null);

     const openModal = () => {
          setModalOpen(true);
     };

     const closeModal = (ifSave) => {
          setConfirmModalOpen(false);
          if (modalOpen) setModalOpen(false);
          else getCurrentUserPrefferedClasses();
          setChosenRank(0);
          resetFilter();
          if (!ifSave) getCurrentUserPrefferedClasses();
     };

     const timeDifference = (end, start) => {
          if (end === null || end === undefined || end ==="" || start === null || start === undefined || start === "") return "";

          // Assume classes are done within one day, end time > start time 
          const e = end.split(":");
          const s = start.split(":");
          if (e[1] < s[1]) {
              return `${Number(e[0]) - 1 - Number(s[0])} hr ${-(Number(e[1]) - Number(s[1]))} min`;
          } else if (e[1] > s[1]) {
              return `${Number(e[0]) - Number(s[0])} hr ${(Number(e[1]) - Number(s[1]))} min`;
          } else {
              return `${Number(e[0]) - Number(s[0])} hr`;
          }
     };
  
     const formatTime = (time) => {
          if (time === null || time === undefined || time === "") return "";
          const [hour, minute] = time.split(":").map(Number);
          const period = hour >= 12 ? "PM" : "AM";
          const formattedHour = hour % 12 || 12;
          return `${formattedHour}:${minute.toString().padStart(2, "0")} ${period}`;
     };

     useEffect(()=> {
          setModalTitle(rankName(chosenRank) + " (" + chosenNumClasses + ")");
     }, [chosenNumClasses, chosenRank]);

     useEffect(()=> {
          setIfFitAvailabilityShow(filterSet.has(FIT_AVAILABILITY_TITLE));
     }, [filterSet]);

     useEffect(()=> {
          if (numFilters === 0) {
               setDisplayClassPref(allClasses);
          } else {
               if (filterSet.has(FIT_AVAILABILITY_TITLE)) return;
               let tempMap = new Map();
               for (let [cat, classes] of allClasses.entries()) {
                    if (filterSet.has(cat)) tempMap.set(cat, classes);
               }
               setDisplayClassPref(new Map(tempMap));
          }
     }, [numFilters]);

     useEffect(() => {
          if (fitAvailabilityClasses || !allClasses || !userAvailability) return;
          let tempMap = new Map();
          for (let [cat, classes] of allClasses.entries()) {
               tempMap.set(cat, []);
               for (let i = 0; i < classes.length; i++) {
                    for ( let j = 0; j < userAvailability.get(classes[i].day).length; j++ ) {
                         if (ifFitAvailability(classes[i], userAvailability.get(classes[i].day)[j])) tempMap.get(cat).push(classes[i]);
                    }
               }
          }
          setFitAvailabilityClasses(new Map(tempMap));
     }, [allClasses, userAvailability, fitAvailabilityClasses]);

     const getCurrentUserPrefferedClasses = async () => {
          const volunteerID = user.volunteer.volunteer_id;
          setVolunteerId(volunteerID);

          const classes_p = await fetchUserPreferredClasses(volunteerID);
          let res = {};
          if (classes_p !== null && classes_p.length > 0) {
               let rank1 = [];
               let rank2 = [];
               let rank3 = [];
               for (let i = 0; i < classes_p.length; i++) {
                    if (classes_p[i].class_rank === 1) {
                         rank1.push(classes_p[i]);
                    } else if (classes_p[i].class_rank === 2) {
                         rank2.push(classes_p[i]);
                    } else {
                         rank3.push(classes_p[i]);
                    }
               }
               res[1] = rank1;
               res[2] = rank2;
               res[3] = rank3;
               setPreferredClasses(res);
          } 
          if (allClasses === null) {
               const allClassPreferences = await fetchAllClassPreferences();
               const classMap = new Map();
               allClassPreferences.forEach(element => {
                    const key = element.category ? element.category : "(Uncategorized Classes)";
                    if (!classMap.has(key)) {
                         classMap.set(key, [element]);
                    } else {
                         classMap.get(key).push(element);
                    }
               });
               setAllClasses(classMap);
               setDisplayClassPref(classMap);
          }

          const availability = await fetchVolunteerAvailability(volunteerID);
          let availabilityMap = new Map([[1, []], [2, []], [3, []], [4, []], [5, []], [6, []], [7, []]]);
          availability.sort((a, b) => {return compareTime(b.start_time, a.start_time) ? 1 : -1});
          
          for (let i = 0; i < availability.length; i++) {
               const day = availability[i].day;
               if (availabilityMap.get(day).length === 0) availabilityMap.get(day).push(availability[i]);
               else {
                    if (availabilityMap.get(day)[availabilityMap.get(day).length-1].end_time === availability[i].start_time) {
                         availabilityMap.get(day)[availabilityMap.get(day).length-1].end_time = availability[i].end_time;
                    } else {
                         availabilityMap.get(day).push(availability[i]);
                    }
               }
          }
          setUserAvailability(availabilityMap);
     }; 

     function ifMatch(class_) {
          if   (class_.class_name.toLowerCase().includes(searchText.toLowerCase().trim()) ||
               class_.f_name.toLowerCase().includes(searchText.toLowerCase().trim()) ||
               class_.l_name.toLowerCase().includes(searchText.toLowerCase().trim()) 
          ) return true;
          return false;
     }

     const onSearch = () => {
          if (searchText.length === 0) return;
          let tempMap = new Map();
          for (let [cat, classes] of allClasses.entries()) {
               tempMap.set(cat, []);
               for (let i = 0; i < classes.length; i++) {
                    if (ifMatch(classes[i])) {
                         tempMap.get(cat).push(classes[i]);
                    }
               }
          }
          setDisplayClassPref(tempMap);   
     };

     const onClassesAvailabity = () => {
          const tempSet = new Set();
          if (filterSet.has(FIT_AVAILABILITY_TITLE)) {
               tempSet.delete(FIT_AVAILABILITY_TITLE);
               setNumFilters(0);
               setFilterSet(tempSet);
               return;
          }
          tempSet.add(FIT_AVAILABILITY_TITLE);
          setNumFilters(1);
          setFilterSet(tempSet);
          setDisplayClassPref(fitAvailabilityClasses);   
     };

     const resetFilter = ()=> {
          setNumFilters(0);
          setFilterSet(new Set());
          setDisplayClassPref(allClasses);
          setSearchText("");
     };

     useEffect(() => {
          getCurrentUserPrefferedClasses();
     }, []);

     useEffect(() => {
          const handleClickOutside = (event) => {
               if ((filterPanelRef.current && !filterPanelRef.current.contains(event.target)) && (filterButtonRef.current && !filterButtonRef.current.contains(event.target))) {
                    setShowFilterPanel(false);
               }
          };
      
          document.addEventListener("mousedown", handleClickOutside);
          return () => {
               document.removeEventListener("mousedown", handleClickOutside);
          };
     }, []);

     function rankName(rank) {
          if (rank === 1) return "Most Preferred";
          else if (rank === 2) return "More Preferred";
          else return "Preferred";
     }


     function renderClasses(rank) {
          if (preferredClasses === null || preferredClasses[rank].length === 0) {
            return <>You have not chosen class preferences...</>;
          }
          return (
               <>
                    {preferredClasses[rank].map((class_, index) => (
                         <ClassPreferencesCard classData={class_} fullWith={false} key={index}></ClassPreferencesCard>
                    ))}
               </>
          );
     };

     async function handleEditClass(rank) {
          setChosenRank(rank);
          if (preferredClasses[rank] !== undefined){
               setChosenNumClasses(preferredClasses[rank].length);
          }
          else setChosenNumClasses(0);
          openModal();
     }

     function renderTitle() {
          return (<h2 className="modal-title">{modalTitle}</h2>);
     }


     function renderFilterItem(title) {
          return (
               <div className="filter-item" >
                    <Checkbox onClicked={()=> {
                         let tempSet = new Set(filterSet);
                         
                         if (filterSet.has(FIT_AVAILABILITY_TITLE)) {
                              tempSet.delete(FIT_AVAILABILITY_TITLE);
                         }

                         if (tempSet.has(title)) {
                              tempSet.delete(title);
                              setNumFilters(Math.max(0, numFilters-1));
                         } else {
                              tempSet.add(title);
                              setNumFilters(numFilters+1);
                         }
                         setFilterSet(tempSet);
                    }} active={filterSet.has(title)}/> {title}
               </div>
          );
     }

     function renderFilterPanel() {
          return <> 
               <div className="filter-item">
                    <Checkbox onClicked={onClassesAvailabity} active={ifFitAvailabilityShow}/> {FIT_AVAILABILITY_TITLE}
               </div>
               {([...allClasses.keys()].map((key) => {
                    return (<div key={key}> {renderFilterItem(key)} </div>)
               }))}
          </>
     }

     function renderSearchBar() {
          return (
               <>
                    <div className="search-bar-container">
                         <div className="search-bar">
                              <button className="search-button" onClick={onSearch}>
                                   <img src={search_icon} alt="Search Icon"/>
                              </button>
                              <input 
                                   placeholder="Search by class name or instructor"
                                   type="text"
                                   value={searchText}
                                   onChange={(e) => setSearchText(e.target.value)} 
                              />
                         </div>
                         <button ref={filterButtonRef} className="filter-button" onClick={()=> {setShowFilterPanel(!showFilterPanel)}}>
                              <img src={filter_icon} alt="Filter icon"/>
                         </button>
                         {showFilterPanel && (
                              <div className="filter-panel" ref={filterPanelRef}>
                                   {renderFilterPanel()}
                              </div>
                         )}
                    </div>

                    <div className="modal-info-bar">
                         <div>Selected ({chosenNumClasses})</div>
                         <button onClick={resetFilter}>Clear Filters ({numFilters})</button>
                    </div>
               </> 
          );
     }

     function renderClassCategory(cat) {
          return (<div className="class-cat">{cat}</div>);
     }

     const handleCheckboxClicked = async (class_) => {
          const tempSet = new Set(filterSet)
          tempSet.delete(FIT_AVAILABILITY_TITLE);
          setFilterSet(tempSet);
          for (let i = 0; i < preferredClasses[chosenRank].length; i++) {
               if (preferredClasses[chosenRank][i].schedule_id === class_.schedule_id) {
                    preferredClasses[chosenRank].splice(i, 1);
                    setChosenNumClasses(preferredClasses[chosenRank].length);
                    return;
               }
          }
          class_.class_rank = chosenRank;
          preferredClasses[chosenRank].push(class_);
          setChosenNumClasses(preferredClasses[chosenRank].length);
     }

     function ifClassIsPreferred(class_) {
          for (let i = 0; i < preferredClasses[chosenRank].length; i ++) {
               if (class_.schedule_id === preferredClasses[chosenRank][i].schedule_id) return true;
          }
          return false;
     }

     function renderClassesInCat(classes) {
          return (
               <>
                    {classes.map((class_, index) => (
                         <div className="class-container" key={index}>
                              <div className="class-container-col1">
                                   <Checkbox onClicked={()=>{handleCheckboxClicked(class_)}} active={ifClassIsPreferred(class_)}/>
                              </div>
                              <div className="class-container-col2">
                                   <h2>{formatTime(class_.start_time)}</h2>
                                   <h3>{timeDifference(class_.end_time, class_.start_time)}</h3>
                              </div>
                              <div className="class-container-col3">
                                   <div className="class-container-col3-name">{class_.class_name}</div>
                                   <div className="class-container-col3-instr">{class_.instructions}</div>
                              </div>
                         </div>
                    ))}
               </>
          );
     }

     const renderSearchClasses = () => {
          if (!displayClassPref) return null;
          return (
               <>
                    {[...displayClassPref.entries()].map(([key, value]) => (
                         (value && (Array.isArray(value) ? value.length > 0 : true)) ? (
                         <div key={key}>
                              <div>{renderClassCategory(key)}</div>
                              <div>{renderClassesInCat(value)}</div>
                         </div>
                         ) : null
                    ))}
               </>
          );
     }
        

     function handleOK () {
          closeModal(true);
     }

     function renderModal(rank) {
          if (rank === 0) return null;

          return (
               <>
                    {renderTitle()}       
                    {renderSearchBar()}  
                    <div className="seach-classes-container">
                         {renderSearchClasses()}
                    </div>
                    <div>
                         <button className="save-button modal-save-button" onClick={()=>handleOK()}>OK</button>
                    </div>
               </> 
          );
     }

     const handleConfirm = () => {
          setConfirmModalOpen(true);
     }

     const handleCancel = () => {
          setConfirmModalOpen(true);
     }

     const handleSave = async() => {
          let res = [];
          for (let j = 1; j < 4; j++) {
               for (let i = 0; i < preferredClasses[j].length; i++) {
                    res.push({schedule_id: preferredClasses[j][i].schedule_id, class_rank: preferredClasses[j][i].class_rank});
               }
          }
          await updateUserPreferredClasses(volunteerId, res);

          setAlertModalOpen(true);
     };

     return (
          <main className="content-container">
               <div className="content-heading">
                    <h2 className="content-title">Class - Schedule Preferences</h2>
                    <button className="logout-button" onClick={() => {
                         localStorage.removeItem("neuronAuthToken");
                         window.location.href = "/auth/login";
                    }}>
                    <i className="fa-solid fa-arrow-right-from-bracket"></i>&nbsp;&nbsp;Log Out
                    </button>
               </div>
               <div className="parent-container">
                    <div className="parent-container-header">
                         <div className="parent-container-title">My Preferences</div>
                         <button className="cancel-button middle-button" onClick={handleCancel}>Cancel</button>
                         <button className="save-button left-button" onClick={handleSave}>Save</button>
                    </div>
                    <div className="rank-container">
                         <div className="rank-header">
                              <div>
                                   <div className="rank-name">
                                        {rankName(1)}
                                   </div>
                                   <button type="button" className="edit-rank-button" onClick={()=> handleEditClass(1)}>
                                        <img src={edit_icon} alt="Edit Classes" height={20}/>{"  "}
                                        <div>Edit Classes</div>
                                   </button>
                              </div>

                         </div>
                         <div className="class-preferences-card-container">
                              {renderClasses(1)}
                         </div>
                    </div>

                    <div className="rank-container">
                         <div className="rank-header">
                              <div>
                                   <div className="rank-name">
                                        {rankName(2)}
                                   </div>
                                   <button type="button" className="edit-rank-button" onClick={() => handleEditClass(2)}>
                                        <img src={edit_icon} alt="Edit Classes" height={20}/>{"  "}
                                        <div>Edit Classes</div>
                                   </button>
                              </div>
                         </div>
                         <div className="class-preferences-card-container">
                              {renderClasses(2)}
                         </div>
                    </div>

                    <div className="rank-container">
                         <div className="rank-header">
                              <div>
                                   <div className="rank-name">
                                        {rankName(3)}
                                   </div>
                                   <button type="button" className="edit-rank-button" onClick={ () => handleEditClass(3)}>
                                        <img src={edit_icon} alt="Edit Classes" height={20}/>{"  "}
                                        <div>Edit Classes</div>
                                   </button>
                              </div>
                         </div>
                         <div className="class-preferences-card-container">
                              {renderClasses(3)}
                         </div>
                    </div>

               </div>
               <Modal isOpen={modalOpen} onClose={handleConfirm} width={"600px"} height={"90%"}>
                    {renderModal(chosenRank)}
               </Modal>

               <Modal isOpen={confirmModalOpen} onClose={()=> setConfirmModalOpen(false)} width={"fit-content"} height={"fit-content"}>
                    <div className="confirm-modal-container">
                    Your Progress will be lost. Are you sure? 
                    <div >
                         <button className="save-button" onClick={()=> closeModal(false)}>Yes</button>
                         <button className="cancel-button" onClick={()=> setConfirmModalOpen(false)}>No</button>
                    </div>
                    </div>
               </Modal>

               <Modal isOpen={alertModalOpen} width={"fit-content"} height={"fit-content"} onClose={() => {window.location.reload(true)}}>
                    <div className="alert-modal-content">Your preferences have been recorded!
                         <button className="save-button" onClick={()=> {window.location.reload(true)}}>Close</button>
                    </div>
               </Modal>
               </main>
               
     );
};

export default ClassPreferences;

================
File: src/pages/CoverageRequests/index.js
================
import "./index.css";

const CoverageRequests = () => {
    return (
        <main className="content-container">
            <div className="content-heading">
                <h2 className="content-title">Coverage Requests</h2>
            </div>
            {/* Add content here */}
        </main>
    );
};

export default CoverageRequests;

================
File: src/pages/Dashboard/index.css
================
@import '../../styles.css';

.dash-container {
    font-family: var(--font-secondary);
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: auto;
    gap: 1rem;
    margin: 36px;
    margin-top: 8px;
}

.dash-date-picker {
    width: fit-content;

    .MuiOutlinedInput-input {
        padding: 12px 16px;
    }
}

.dash-grid-item {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    box-sizing: border-box;
}

.dash-col-card {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 2rem;
    border: 1px solid var(--grey);
    border-radius: 0.5rem;
}

.dash-card-title {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    align-items: center;
    font-size: 20px;
    line-height: 28px;
    font-weight: 500;
    margin: 0px;
    width: fit-content;
    cursor: pointer;
}

.dash-card-title:hover {
    text-decoration: underline;
}

.dash-hours-container {
    display: flex;
    flex-direction: row;
}

.dash-hours {
    display: flex;
    flex-direction: column;
    width: 50%;
}

.dash-completed-hours {
    font-size: 72px;
    color: var(--primary-blue);
    margin: 0px;
}

.dash-upcoming-hours {
    font-size: 72px;
    color: #808080;
    margin: 0px;
}

.dash-card-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}
.dash-check-in {
    height: 240px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    border-radius: 0.5rem;
    background-color: var(--button-blue);
    color: white;
    padding: 2rem;
    box-sizing: border-box;
}

.dash-check-in-title {
    font-size: 40px;
}

.dash-next-check-in {
    height: 240px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    background-color: var(--grey);
    border-radius : 0.5rem;
}

.dash-next-title {
    font-size: 20px;
}

.dash-next-time-num {
    font-size: 40px;
    font-weight: 500;
}

================
File: src/pages/Dashboard/index.js
================
// home/ is the landing page of the application.
import HelpOutlineIcon from "@mui/icons-material/HelpOutline";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import dayjs from "dayjs";
import React, { useCallback, useEffect, useState } from "react";
import { getVolunteerShiftsForMonth } from "../../api/shiftService";
import CheckInCard from "../../components/CheckInCard";
import DashboardCoverage from "../../components/DashboardCoverage";
import DashCoverShifts from "../../components/DashCoverShifts";
import DashShifts from "../../components/DashShifts";
import Permission from "../../components/utils/Permission";
import { useAuth } from "../../contexts/authContext";
import { SHIFT_TYPES } from "../../data/constants";
import "./index.css";

function Dashboard() {
  const { user } = useAuth();
  const [shifts, setShifts] = useState([]);
  const monthDate = dayjs().date(1).hour(0).minute(0);
  const [selectedDate, setSelectedDate] = useState(dayjs());
  const [future, setFuture] = useState(false);
  var upcomingHours = 0;

  const fetchShifts = useCallback(async () => {
    const body = {
      volunteer_id: user?.volunteer?.volunteer_id,
      shiftDate: selectedDate.format("YYYY-MM-DD"),
    };
    const response = await getVolunteerShiftsForMonth(body).catch(() => {});

    const shiftMap = new Map();
    response?.forEach((shift) => {
      const existingShift = shiftMap.get(shift.shift_id);

      if (
        existingShift &&
        existingShift.shift_type === SHIFT_TYPES.MY_SHIFTS &&
        shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS
      ) {
        shiftMap.set(shift.shift_id, shift);
      } else if (!existingShift) {
        shiftMap.set(shift.shift_id, shift);
      }
    });

    setShifts(Array.from(shiftMap.values()));
  }, [selectedDate, user?.volunteer?.volunteer_id]);

  useEffect(() => {
    const fetchData = async () => {
      await fetchShifts();
    };
    fetchData();
  }, [fetchShifts]);

  const allShifts = shifts.reduce((acc, shift) => {
    const date = shift.shift_date;
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(shift);
    return acc;
  }, {});

  const upcomingShifts = shifts.filter((shift) => {
    return (
      shift.shift_type ===
        (SHIFT_TYPES.MY_SHIFTS || SHIFT_TYPES.MY_COVERAGE_REQUESTS) &&
      dayjs(shift.shift_date).isAfter(monthDate) &&
      dayjs(shift.shift_date).isAfter(dayjs())
    );
  });

  const groupedUpcomingShifts = upcomingShifts.reduce((acc, shift) => {
    const date = shift.shift_date;
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(shift);
    upcomingHours += shift.duration / 60;
    return acc;
  }, {});

  const groupedCoverShifts = shifts
    .filter((shift) => {
      const shiftDay = dayjs(shift.shift_date).format("YYYY-MM-DD");
      const shiftEnd = dayjs(`${shiftDay} ${shift.end_time}`);
      const pastShift = dayjs().isAfter(shiftEnd);

      return (
        (shift.shift_type === SHIFT_TYPES.MY_SHIFTS ||
          shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS) &&
        !pastShift
      );
    })
    .reduce((acc, shift) => {
      const date = shift.shift_date;
      if (!acc[date]) {
        acc[date] = [];
      }
      acc[date].push(shift);
      return acc;
    }, {});

  const completedHours = shifts
    .filter((shift) => {
      return (
        shift.shift_type === SHIFT_TYPES.MY_SHIFTS &&
        dayjs(shift.shift_date).isBefore(dayjs()) &&
        shift.checked_in
      );
    })
    .reduce((acc, shift) => {
      acc += shift.duration;
      return acc;
    }, 0);

  const coverageHours =
    shifts
      .filter((shift) => {
        return shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS;
      })
      .reduce((acc, shift) => {
        acc += shift.duration;
        return acc;
      }, 0) / 60;

  console.log(completedHours, coverageHours, upcomingHours);

  const handleShiftUpdate = () => {
    fetchShifts();
  };

  useEffect(() => {
    setFuture(selectedDate >= monthDate);
  }, [selectedDate, shifts]);

  return (
    <main className="content-container volunteer-dash">
      <div className="content-heading">
        <h2 className="content-title">Dashboard</h2>
        <div className="dash-date-picker">
          <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DatePicker
              views={["month", "year"]}
              sx={{
                fontSize: "16px",
                color: "var(--primary-blue)",
              }}
              value={selectedDate}
              onChange={(newValue) => setSelectedDate(newValue.date(1))}
            />
          </LocalizationProvider>
        </div>
      </div>
      <Permission permissions="volunteer">
        <div className="dash-container">
          <div className="dash-col-card dash-grid-item">
            <div className="dash-card-title">Volunteer Hours </div>
            <div className="dash-hours-container">
              <div className="dash-hours">
                <h1 className="dash-completed-hours">{completedHours}</h1>
                <p>Completed</p>
              </div>
              {future && (
                <div className="dash-hours">
                  <h1 className="dash-upcoming-hours">{upcomingHours}</h1>
                  <p>Upcoming</p>
                </div>
              )}
            </div>
          </div>
          <div className="dash-col-card dash-grid-item">
            <div className="dash-card-header">
              <div className="dash-card-title">Coverage Hours </div>
              <HelpOutlineIcon sx={{ color: "var(--primary-blue)" }} />
            </div>
            <DashboardCoverage
              completed={completedHours}
              upcoming={upcomingHours}
              requested={coverageHours}
              future={future}
            />
          </div>
          <div className="dash-col-card dash-grid-item">
            <DashShifts
              groupedShifts={future ? groupedUpcomingShifts : allShifts}
              future={future}
              handleShiftUpdate={handleShiftUpdate}
              volunteerID={user?.volunteer?.volunteer_id}
            />
          </div>

          <div className="dash-bottom-right dash-grid-item">
            <div className="dash-col-card">
              <DashCoverShifts
                future={future}
                groupedShifts={groupedCoverShifts}
                handleShiftUpdate={handleShiftUpdate}
                volunteerID={user?.volunteer?.volunteer_id}
              />
            </div>
            {upcomingShifts.length > 0 && (
              <CheckInCard shift={upcomingShifts[0]} />
            )}
          </div>
        </div>
      </Permission>
    </main>
  );
}

export default Dashboard;

================
File: src/pages/ForgotPassword/index.css
================
.forgotPassPage{
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    display: flex;
}

================
File: src/pages/ForgotPassword/index.js
================
import RightSideWithForm from "../../components/AuthenticationFormWrapper";
import LeftSideBarWithLogo from "../../components/LeftSideBarWithLogo";
import "./index.css";

const ForgotPassword = () => {
    return (
        <div className="forgotPassPage">
            <LeftSideBarWithLogo />
            <RightSideWithForm
                type={"forgotPass"}
                heading={"Reset your password"}
                subHeading={
                    "Enter the email address you used to register with."
                }
            />
        </div>
    );
};

export default ForgotPassword;

================
File: src/pages/Login/index.css
================
.loginPage{
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    display: flex;
}

================
File: src/pages/Login/index.js
================
import RightSideWithForm from "../../components/AuthenticationFormWrapper";
import LeftSideBarWithLogo from "../../components/LeftSideBarWithLogo";
import "./index.css";

const Login = () => {
    return (
        <div className="loginPage">
            <LeftSideBarWithLogo />
            <RightSideWithForm type={"login"} heading={"Welcome!"} />
        </div>
    );
};

export default Login;

================
File: src/pages/MemberManagement/index.css
================
.tabs {
    width: 75vw;
    display: flex;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    margin: auto;
    margin-bottom: 1.5vw;
}

.tab {
    flex: 1;
    padding: 0.6vw;
    border: none;
    background: none;
    cursor: pointer;
    font-size: 1vw;
}

.tab:first-child {
    border-radius: 8px 0 0 8px;
}

.tab:nth-child(2) {
    border-right: 1px solid #e0e0e0;
    border-left: 1px solid #e0e0e0;
}

.tab:last-child {
    border-radius: 0 8px 8px 0;
}

.tab.active {
    font-weight: bold;
    background-color: var(--light-grey);
    border: 2px solid var(--primary-blue);
    z-index: 1;
}

.member-search-bar {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin: auto;
    width: 75.5vw;
}

.member-search-input {
    flex: 1;
    padding: 8px 1vw 8px 2.5vw;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    font-size: 14px;
    background: transparent url("../../assets/search-icon.png") no-repeat 10px;
    background-size: 16px;
}

.member-search-input:focus {
    outline: none;
    border-color: #2196f3;
}

.filter-button {
    background: url("../../assets/filter-icon.png") no-repeat center/contain;
    background-size: 16px;
    width: 40px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
}

.add-instructor-button {
    background-color: var(--button-blue);
    color: white;
    padding: 8px 16px 8px 12px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 2px;
}

.unverified {
    display: flex;
    justify-content: center;
    align-items: center;
}

.badge-count {
    width: 1.2vw;
    height: 1.2vw;
    display: grid;
    place-items: center;
    padding: 0.15vw;
    font-size: 13px;
    background-color: var(--inactive-red);
    border-radius: 50%;
    color: white;
    margin-left: 7px;
}

================
File: src/pages/MemberManagement/index.js
================
import { useEffect, useState } from "react";
import { getVolunteers, getInstructors } from "../../api/adminService";
import "./index.css";
import Notifications from "../../components/Notifications";
import MemberList from "../../components/MemberList";
import AddRoundedIcon from '@mui/icons-material/AddRounded';
import Modal from "../../components/Modal";
import AddEditInstructorModal from "../../components/AddEditInstructorModal";

const MemberManagement = () => {
    const [data, setData] = useState([]);
    const [mainData, setMainData] = useState([]);
    const [activeTab, setActiveTab] = useState("volunteers");
    const [type, setType] = useState("volunteers");
    const [showAddInstructorModal, setShowAddInstructorModal] = useState(false);

    useEffect(() => {
        fetchData();
        // eslint-disable-next-line
    }, [activeTab]);

    async function fetchData() {
        let data = {};
        try {
            if (activeTab === "volunteers") {
                data = await getVolunteers();
            } else if (activeTab === "instructors") {
                data = await getInstructors();
            }

            setData(data);
            setMainData(data);
            setType(activeTab);
        }
        catch (error) {
            console.error(error);
        }
    }

    const searchVolunteers = (searchTerm) => {
        if (!searchTerm) {
            setData(mainData);
            return;
        }
        const words = searchTerm.toLowerCase().split(/\s+/); // Split query into words

        const filteredData = mainData.filter(user =>
            words.every(word => {
                const pattern = word.split("").join(".*");
                const regex = new RegExp(pattern, "i");

                return [user.f_name, user.l_name, user.email].some(field =>
                    regex.test(field)
                );
            })
        );

        setData(filteredData);
    }
    return (
        <main className="content-container">
            <div className="content-heading">
                <h2 className="content-title">Member Management</h2>
                <Notifications />
            </div>

            <nav className="tabs">
                <button onClick={() => {
                    setActiveTab("volunteers")
                }} className={activeTab === "volunteers" ? "tab active" : "tab"}>Volunteers</button>
                <button onClick={() => {
                    setActiveTab("instructors")
                }} className={activeTab === "instructors" ? "tab active" : "tab"}>Instructors</button>
                <button onClick={() => {
                    setActiveTab("unverified")
                }} className={activeTab === "unverified" ? "tab active unverified" : "tab unverified"}>
                    Unverified <div className="badge-count">2</div>
                </button>
            </nav>

            <div className="member-search-bar">
                <input type="search" placeholder="Search" className="member-search-input" onChange={(e) => {
                    searchVolunteers(e.target.value);
                }} />
                {type === "volunteers" && (
                    <button className="filter-button"></button>
                )}
                {type === "instructors" && (
                    <button className="add-instructor-button" onClick={() => setShowAddInstructorModal(true)}><AddRoundedIcon />Add Instructor</button>
                )}
            </div>
            
            <Modal title="Add instructor" isOpen={showAddInstructorModal} onClose={() => setShowAddInstructorModal(false)} width="500px" height="fit-content">
                <AddEditInstructorModal closeEvent={() => {
                        setShowAddInstructorModal(false)
                        fetchData();
                    }} />
            </Modal>

            <MemberList data={data} fetchData={fetchData} type={type} />
        </main>
    )
}

export default MemberManagement;

================
File: src/pages/ResetPassword/index.js
================
import RightSideWithForm from "../../components/AuthenticationFormWrapper";
import LeftSideBarWithLogo from "../../components/LeftSideBarWithLogo";
import "./index.css";

const ResetPassword = () => {
    return (
        <div className="forgotPassPage">
            <LeftSideBarWithLogo />
            <RightSideWithForm
                type={"resetPass"}
                heading={"Set your new password"}
            />
        </div>
    );
};

export default ResetPassword;

================
File: src/pages/Schedule/index.css
================
/* Header Styling */
.date-header {
    font-weight: 600;
    font-family: var(--font-secondary);
    font-size: var(--large-text);
}

/* Date Styling */
.selected-date {
    color: var(--primary-blue);
}

.non-selected-date {
    color: var(--dark);
}

.schedule-page {
    width: 100%;
    height: 100%;
}

/* Container Styling */
.schedule-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    overflow-y: auto; /* Allow vertical scroll */
    max-height: 10vh;
    padding-bottom: 70vh;
}

.shifts-container {
    padding-top: 2rem;
    width: 70%;
}

/* List Styling */
.shift-list {
    display: flex; 
    flex-direction: column;
    align-items: center;
}

/* Border Styling */
hr {
    margin: 0;                
    border: none;            
    height: 1px;            
    background-color: var(--grey); 
}

================
File: src/pages/Schedule/index.js
================
import dayjs from "dayjs";
import { useCallback, useEffect, useRef, useState } from "react";
import { useWeekView } from "react-weekview";
import { getVolunteerShiftsForMonth } from "../../api/shiftService";
import CalendarView from "../../components/CalendarView";
import DateToolbar from "../../components/DateToolbar";
import DetailsPanel from "../../components/DetailsPanel";
import ShiftCard from "../../components/ShiftCard";
import ShiftStatusToolbar from "../../components/ShiftStatusToolbar";
import { useAuth } from "../../contexts/authContext";
import { COVERAGE_STATUSES, SHIFT_TYPES } from "../../data/constants";
import { getButtonConfig } from "../../utils/buttonConfig";
import "./index.css";

function Schedule() {
    const { user } = useAuth();
    const currentDate = dayjs();
    const [selectedDate, setSelectedDate] = useState(dayjs());
    const [shifts, setShifts] = useState([]);
    const [filter, setFilter] = useState("all-shifts");
    const [selectedClassId, setSelectedClassId] = useState(null);
    const [selectedShiftButtons, setSelectedShiftButtons] = useState([]);
    const [selectedShiftDetails, setShiftDetails] = useState(null);
    const [viewMode, setViewMode] = useState("list");
    const { days, initialDate, nextWeek, previousWeek, goToToday } = useWeekView();

    // Create a ref object to store references to each shifts-container for scrolling
    const shiftRefs = useRef({});
    const scheduleContainerRef = useRef(null);

    const fetchShifts = useCallback(async () => {
        const body = {
            volunteer_id: user?.volunteer.volunteer_id,
            shiftDate: selectedDate.format("YYYY-MM-DD"),
        };
        const response = await getVolunteerShiftsForMonth(body);

        // Filter out duplicated shifts and past coverage requests
        const shiftMap = new Map();
        response.forEach((shift) => {
            const existingShift = shiftMap.get(shift.shift_id);
            const shiftDay = dayjs(shift.shift_date).format("YYYY-MM-DD");
            const shiftEnd = dayjs(`${shiftDay} ${shift.end_time}`);
            const pastShift = currentDate.isAfter(shiftEnd);

            // Prioritize showing coverage shifts over my shifts
            if (existingShift && existingShift.shift_type === SHIFT_TYPES.MY_SHIFTS && shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS) {
                shiftMap.set(shift.shift_id, shift);

                // Don't show past shifts that are open for coverage
            } else if (shift.shift_type === SHIFT_TYPES.COVERAGE && pastShift) {
                // skip shift
            } else if (!existingShift) {
                shiftMap.set(shift.shift_id, shift);
            }
        });

        const uniqueShifts = Array.from(shiftMap.values());

        // Filter shifts based on selected filter type
        const filteredShifts = uniqueShifts.filter((shift) => {
            if (filter === "all-shifts") {
                return true; // No filtering for 'all-shifts'
            }
            return shift.shift_type === filter;
        });
        setShifts(filteredShifts);
    }, [selectedDate, filter, user?.volunteer.volunteer_id]);

    // Fetch shifts for the selected date and filter
    useEffect(() => {
        const fetchData = async () => {
            await fetchShifts();
        };
        fetchData();
    }, [fetchShifts]);

    // map of shifts grouped by date { date: [shift1, shift2, ...] }
    const groupedShifts = shifts.reduce((acc, shift) => {
        const date = shift.shift_date;
        if (!acc[date]) {
            acc[date] = [];
        }
        acc[date].push(shift);
        return acc;
    }, {});

    // Creates the buttons for the details panel based on the shift type
    const generateButtonsForDetailsPanel = (shift) => {
        const shiftDay = dayjs(shift.shift_date).format("YYYY-MM-DD");
        const shiftEnd = dayjs(`${shiftDay} ${shift.end_time}`);
        const pastShift = currentDate.isAfter(shiftEnd);

        const buttons = [];
        const buttonConfig = getButtonConfig(shift, handleShiftUpdate, user?.volunteer.volunteer_id);
        const primaryButton = buttonConfig[shift.shift_type] || buttonConfig[SHIFT_TYPES.DEFAULT];

        buttons.push(primaryButton);

        if (shift.shift_type === SHIFT_TYPES.MY_SHIFTS && !shift.checked_in && !pastShift) {
            buttons.push(buttonConfig.REQUEST_COVERAGE);
        } else if (shift.shift_type === SHIFT_TYPES.COVERAGE && shift.coverage_status === COVERAGE_STATUSES.PENDING) {
            buttons.push(buttonConfig.CANCEL);
        } else if (shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS && shift.coverage_status === COVERAGE_STATUSES.OPEN) {
            buttons.push(buttonConfig.CANCEL);
        }

        return buttons;
    };

    // Update state when we update a shift
    const handleShiftUpdate = (updatedShift) => {
        setShifts((staleShifts) => {
            return staleShifts.map((shift) => {
                if (shift.shift_id === updatedShift.shift_id) {
                    return updatedShift;
                }
                return shift;
            });
        });

        // Triggers a re-render of the details panel
        handleShiftSelection(updatedShift);
    };

    // Update details panel when a shift is selected
    const handleShiftSelection = (classData) => {
        console.log("Selected shift: ", classData);
        setSelectedClassId(classData._class_id);
        setSelectedShiftButtons(generateButtonsForDetailsPanel(classData));
        console.log(selectedShiftButtons);
        setShiftDetails(classData);
    };

    const scrollToTop = useCallback(() => {
        const targetDate = selectedDate.format("YYYY-MM-DD");
        const scheduleContainer = scheduleContainerRef.current;
        const targetElement = shiftRefs.current[targetDate];

        if (scheduleContainer && targetElement) {
            // Calculate the offset of the target element within scheduleContainerRef
            const offsetTop = targetElement.offsetTop - scheduleContainer.offsetTop;
            scheduleContainer.scrollTo({
                top: offsetTop,
                behavior: "smooth",
            });
        }
    }, [selectedDate]); // Scroll to top when selectedDate changes

    useEffect(() => {
        scrollToTop();
    }, [scrollToTop, groupedShifts]);

    return (
        <main className="content-container">
            <div className="content-heading">
                <h2 className="content-title">Schedule</h2>
            </div>
            <div className="content-heading">
                <DateToolbar
                    selectedDate={selectedDate}
                    setSelectedDate={setSelectedDate}
                    viewMode={viewMode}
                    setViewMode={setViewMode}
                    nextWeek={nextWeek}
                    previousWeek={previousWeek}
                    goToToday={goToToday}
                />
            </div>
            <hr />
            <DetailsPanel classId={selectedClassId} classList={shifts} setClassId={setSelectedClassId} shiftDetails={selectedShiftDetails} dynamicShiftButtons={selectedShiftButtons}>
                <div className="schedule-page">
                    {viewMode === "list" ? (
                        <>
                            <ShiftStatusToolbar setFilter={setFilter} filter={filter} />
                            <hr />
                            <div ref={scheduleContainerRef} className="schedule-container">
                                {Object.keys(groupedShifts).length > 0 ? (
                                    Object.keys(groupedShifts).map((date) => (
                                        <div key={date} className="shifts-container" ref={(el) => (shiftRefs.current[dayjs(date).format("YYYY-MM-DD")] = el)}>
                                            {/* Date Header */}
                                            <h2 className={`date-header ${dayjs(date).isSame(selectedDate, "day") ? "selected-date" : "non-selected-date"}`}>
                                                {dayjs(date).format("ddd, D")}
                                                {dayjs(date).isSame(currentDate, "day") && " | Today"}
                                            </h2>

                                            {/* Shift List for this date */}
                                            <div className="shift-list">
                                                {groupedShifts[date].map((shift) => (
                                                    <ShiftCard
                                                        key={shift.fk_schedule_id}
                                                        shift={shift}
                                                        shiftType={shift.shift_type}
                                                        onShiftSelect={handleShiftSelection}
                                                        buttonConfig={getButtonConfig(shift, handleShiftUpdate, user?.volunteer.volunteer_id)}
                                                    />
                                                ))}
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <p>No shifts to display for this month.</p>
                                )}
                            </div>
                        </>
                    ) : (
                        <CalendarView days={days} shifts={shifts} initialDate={initialDate} onShiftSelect={handleShiftSelection} />
                    )}
                </div>
            </DetailsPanel>
        </main>
    );
}

export default Schedule;

================
File: src/pages/Settings/index.js
================
import "./index.css";

const Settings = () => {
    return (
        <main className="content-container">
            <div className="content-heading">
                <h2 className="content-title">Settings</h2>
            </div>
            {/* Add content here */}
        </main>
    );
};

export default Settings;

================
File: src/pages/Signup/index.css
================
.signUpPage{
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    display: flex;
}

================
File: src/pages/Signup/index.js
================
import RightSideWithForm from "../../components/AuthenticationFormWrapper";
import LeftSideBarWithLogo from "../../components/LeftSideBarWithLogo";
import "./index.css";

const Signup = () => {
    return (
        <div className="signUpPage">
            <LeftSideBarWithLogo />
            <RightSideWithForm type={"signup"} heading={"Welcome!"} />
        </div>
    );
};

export default Signup;

================
File: src/pages/VolunteerProfile/index.css
================
@import '../../styles.css';

.content {
    display: flex;
    font-family: var(--font-secondary);
    margin-bottom: 4vh;
    padding: 0 36px;
    gap: 20px;
}

.column-1,
.column-2 {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

================
File: src/pages/VolunteerProfile/index.js
================
// volunteer profile page
import React, { useState } from 'react';
import { formatImageUrl } from '../../api/imageService';
import AvailabilityGrid from "../../components/volunteerProfile/availabilityGrid";
import ChangePasswordCard from "../../components/volunteerProfile/changePasswordCard";
import ClassPreferencesCardMP from "../../components/volunteerProfile/classPreferencesCard";
import VolunteerDetailsCard from "../../components/volunteerProfile/volunteerDetailsCard";
import { useAuth } from '../../contexts/authContext';
import "./index.css";

function VolunteerProfile() {
    const [availability, setAvailability] = useState([]);

    const { user, logout } = useAuth();

    return (
      <main className="content-container" style={{
        overflowY: "auto",
      }}>
        <div className="content-heading">
          <h2 className="content-title">My Profile</h2>
          <button className="logout-button" onClick={logout}>
            <i className="fa-solid fa-arrow-right-from-bracket"></i>&nbsp;&nbsp;Log Out
          </button>
        </div>
        { user?.volunteer ?
        <div className="content">
          <div className="column-1">
            <div className="volunteer-card">
              <VolunteerDetailsCard volunteer={{
                  ...user.volunteer,
                  profile_picture: formatImageUrl(user?.fk_image_id)
                }} />
            </div>
            <div className="availability-card">
              <AvailabilityGrid
                volunteerId={user.volunteer.volunteer_id}
                availability={availability}
                setAvailability={setAvailability}
              />
            </div>
          </div>
          <div className="column-2">
            <div className="password-card">
              <ChangePasswordCard volunteer={user.volunteer} />
            </div>
            <div >
              <ClassPreferencesCardMP volunteer={user.volunteer} />
            </div>
          </div>
        </div>
        : <></> 
        }
      </main>
    );
};

export default VolunteerProfile;

================
File: src/utils/buttonConfig.js
================
import dayjs from 'dayjs';
import { COVERAGE_STATUSES, SHIFT_TYPES } from '../data/constants';
import { requestToCoverShift, requestShiftCoverage, cancelCoverShift, cancelCoverRequest, checkInShift } from '../api/shiftService';
import CheckInIcon from '../assets/images/button-icons/clock-icon.svg';
import PlusIcon from '../assets/images/button-icons/plus-icon.svg';
import RequestCoverageIcon from '../assets/request-coverage.png'
import CancelIcon from "../assets/images/button-icons/x-icon.svg";

const handleCheckInClick = async (shift, handleShiftUpdate) => {
    try {
        if (!shift.checked_in) {
            // console.log(`Checking in for shift ${shift.shift_id}`);
            await checkInShift(shift.shift_id);
            handleShiftUpdate({ ...shift, checked_in: 1 });
        } 

    } catch (error) {
        console.error('Error checking in for shift:', error);
    }
};

const handleCoverShiftClick = async (shift, handleShiftUpdate, volunteerID) => {
    try {
        const body = {
            request_id: shift.request_id,
            volunteer_id: volunteerID,
        };
        // console.log(`Requesting to cover shift ${shift.shift_id}`);
        await requestToCoverShift(body);
        handleShiftUpdate({ ...shift, coverage_status: COVERAGE_STATUSES.PENDING });

    } catch (error) {
        console.error('Error generating request to cover shift:', error);
    }
};

const handleRequestCoverageClick = async (shift, handleShiftUpdate) => {
    try {
        const body = {
            shift_id: shift.shift_id,
        }
        // console.log(`Requesting coverage for shift ${shift.shift_id}`);
        let data = await requestShiftCoverage(body);
        handleShiftUpdate({ ...shift, shift_type: SHIFT_TYPES.MY_COVERAGE_REQUESTS, coverage_status: COVERAGE_STATUSES.OPEN, request_id: data.insertId });
         
    } catch (error) {
        console.error('Error requesting for shift coverage: ', error);
    }
};

const handleCancelClick = async (shift, handleShiftUpdate, volunteerID) => {

    if (shift.shift_type === SHIFT_TYPES.COVERAGE) {

        try {
            // console.log("Canceling coverage for shift ID: ", shift.shift_id);
            const body = {
                request_id: shift.request_id,
                volunteer_id: volunteerID
            };
            await cancelCoverShift(body);
            handleShiftUpdate({ ...shift, coverage_status: COVERAGE_STATUSES.OPEN });

        } catch (error) {
            console.error('Error canceling coverage:', error);
        }
    
    } else if (shift.shift_type === SHIFT_TYPES.MY_COVERAGE_REQUESTS) {

        try {
            // console.log("Canceling coverage request for shift ID: ", shift.shift_id);
            const body = {
                request_id: shift.request_id,
                shift_id: shift.shift_id,
            };
            await cancelCoverRequest(body);
            handleShiftUpdate({ ...shift, shift_type: SHIFT_TYPES.MY_SHIFTS, coverage_status: null, request_id: null });

        } catch (error) {
            console.error('Error canceling coverage request:', error);
        }
    }
}

// Returns the button configuration for the shift based on the shift type
export const getButtonConfig = (shift, handleShiftUpdate, volunteerID) => {

    const shiftDay = dayjs(shift.shift_date).format('YYYY-MM-DD');
    const shiftStart = dayjs(`${shiftDay} ${shift.start_time}`);
    const shiftEnd = dayjs(`${shiftDay} ${shift.end_time}`);
    const currentDate = dayjs();
    
    // Accounts for a 30 minute window before and after the shift
    const pastShift = currentDate.isAfter(shiftEnd.add(30, 'minutes'));
    const currentShift = currentDate.isBetween(
        shiftStart.subtract(30, 'minutes'),
        shiftEnd.add(30, 'minutes'),
        'minute',
        '[]'
    );

    return {
        [SHIFT_TYPES.MY_SHIFTS]: {
            lineColor: 'var(--green)',  // Line color for the shift card
            label: shift.checked_in 
                ? 'Checked In' 
                    : currentShift 
                    ? 'Check In' 
                        : pastShift
                        ? 'Missed Shift'
                            : 'Upcoming',
            icon: shift.checked_in ? null : currentShift ? CheckInIcon : null,
            iconColourClass: shift.checked_in ? null : currentShift ? 'icon-white' : null, // Icon colour classes defined in styles.css
            disabled: shift.checked_in || !currentShift || pastShift,
            buttonClass: shift.checked_in ? 'checked-in' : currentShift ? 'primary-action' : '',
            onClick: () => handleCheckInClick(shift, handleShiftUpdate),
        },
        [SHIFT_TYPES.COVERAGE]: {
            lineColor: 'var(--red)',
            label: shift.coverage_status === COVERAGE_STATUSES.PENDING
                ? 'Pending Approval'
                : 'Cover',
            icon: shift.coverage_status === COVERAGE_STATUSES.OPEN ? PlusIcon : null,
            iconColourClass: shift.coverage_status === COVERAGE_STATUSES.OPEN ? 'icon-white' : null,
            disabled: shift.coverage_status === COVERAGE_STATUSES.PENDING,
            buttonClass: shift.coverage_status === COVERAGE_STATUSES.OPEN ? 'primary-action' : '',
            onClick: () => handleCoverShiftClick(shift, handleShiftUpdate, volunteerID),
        },
        [SHIFT_TYPES.MY_COVERAGE_REQUESTS]: {
            lineColor: 'var(--yellow)',
            label: shift.coverage_status === COVERAGE_STATUSES.OPEN
                ? 'Requested Coverage'
                : 'Shift Filled',
            icon: null,
            disabled: true,
            onClick: () => {}, // No action for this state
        },
        [SHIFT_TYPES.DEFAULT]: {
            lineColor: 'var(--grey)',
            label: 'View Details',
            icon: null,
            disabled: false,
        },
        REQUEST_COVERAGE: {
            lineColor: 'var(--yellow)',
            label: 'Request Coverage',
            icon: RequestCoverageIcon,
            disabled: false,
            onClick: () => handleRequestCoverageClick(shift, handleShiftUpdate),
        },
        CANCEL: {
            label: 'Cancel',
            icon: CancelIcon,
            iconColourClass: 'icon-white',
            disabled: false,
            buttonClass: 'cancel-action',
            onClick: () => handleCancelClick(shift, handleShiftUpdate, volunteerID),
        }
    };
}

================
File: src/utils/cleanInitials.js
================
function cleanInitials(initials) {
  return initials.replace(/[^A-Z]/g, '').toUpperCase();
}

export default cleanInitials;

================
File: src/utils/notyf.js
================
import { Notyf } from "notyf";

const notyf = new Notyf({
    duration: 2500,
    position: {
        x: "center",
        y: "top",
    },
});

export default notyf;

================
File: src/App.js
================
// src/App.js
import "notyf/notyf.min.css";
import { useEffect } from "react";
import { BrowserRouter, Navigate, Outlet, Route, Routes } from "react-router-dom";
import api from "./api/api";
import SidebarLayout from "./components/SidebarLayout";
import { useAuth } from "./contexts/authContext";
import Classes from "./pages/Classes";
import ClassPreferences from "./pages/ClassPreferences";
import CoverageRequests from "./pages/CoverageRequests";
import Dashboard from "./pages/Dashboard";
import ForgotPassword from "./pages/ForgotPassword";
import Login from "./pages/Login";
import MemberManagement from "./pages/MemberManagement";
import ResetPassword from "./pages/ResetPassword";
import Schedule from "./pages/Schedule";
import Settings from "./pages/Settings";
import Signup from "./pages/Signup";
import VolunteerProfile from "./pages/VolunteerProfile";
import AdminVolunteerProfile from "./pages/AdminVolunterProfile";

function App() {
  const { isAuthenticated, isAdmin, isVolunteer, logout } = useAuth();

  const RouteGuard = ({ fallback, valid }) => {
    return valid ? <Outlet /> : <Navigate to={fallback} replace />;
  };

  // Register logout handler on api error
  useEffect(() => {
    api.interceptors.response.use(
      (response) => response,
      (error) => {
          if (error?.response && error.response.status === 401) {
              logout();
          }
          return Promise.reject(error);
      }
    );
  })

  return (
    <div className="App">
      <BrowserRouter>
        <Routes>
          {/* Public Routes */}
          <Route path="auth" element={<RouteGuard fallback={"/"} valid={!isAuthenticated} />}>
            <Route path="signup" element={<Signup />} />
            <Route path="login" element={<Login />} />
            <Route path="forgot-password" element={<ForgotPassword />} />
            <Route path="reset-password" element={<ResetPassword />} />
          </Route>

          {/* Auth Protected Routes */}
          <Route element={<RouteGuard fallback="/auth/login" valid={isAuthenticated} />}>
            <Route element={<SidebarLayout />}>
              <Route index element={<Dashboard />} />
              <Route path="classes" element={<Classes />} />
              <Route path="schedule" element={<Schedule />} />
              <Route path="settings" element={<Settings />} />

              <Route element={<RouteGuard fallback="/" valid={isVolunteer} />}>
                <Route path="profile" element={<VolunteerProfile />} />
                <Route path="profile/preferences" element={<ClassPreferences />} />
              </Route>

              <Route element={<RouteGuard fallback="/" valid={isAdmin} />}>
                <Route path="management" element={<MemberManagement />} />
                <Route path="requests" element={<CoverageRequests />} />
                <Route path="volunteer-profile" element={<AdminVolunteerProfile />} />
              </Route>
            </Route>
          </Route>

          {/* Catch-all Route for Undefined Paths */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { AuthProvider } from './contexts/authContext';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <AuthProvider>
      <App />
  </AuthProvider>
);

================
File: src/styles.css
================
/* Import Fonts */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@200;400;500;600;700&family=Karla:ital,wght@1,200&family=Kumbh+Sans:wght@400;700&family=Lora:ital,wght@0,400;0,500;1,400;1,500&family=Mulish:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700&family=Playfair+Display:ital,wght@0,400;0,500;0,600;1,400&family=Raleway:wght@100;200;300&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@200;400;500;600;700&family=Karla:ital,wght@1,200&family=Kumbh+Sans:wght@400;700&family=Lora:ital,wght@0,400;0,500;1,400;1,500&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Mulish:wght@300;400;500;600&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700&family=Playfair+Display:ital,wght@0,400;0,500;0,600;1,400&family=Raleway:wght@100;200;300&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");

/* Font families */
:root {
  --font-primary: "Roboto", sans-serif;
  --font-secondary: "Montserrat", sans-serif;
  --font-tertiary: "Inter", sans-serif;
  /* Add more fonts as needed */
}

/* Color Variables */
:root {
  --primary-blue: #4385ac;
  --secondary-blue: #59a5d5;
  --dark-blue: #59a5d514;
  --grey: #d9d9d9;
  --dark: #0f1111;
  --light-grey: #f0faff;
  --white: #ffffff;

  /* Button-specific Colors */
  --dark-grey: #808080;
  --green: #28a745;
  --yellow: #cb8324;
  --red: #952018;
  --red-hover: #7a1a14;
  --button-blue: #1a7db7;
  --button-blue-hover: #0f6e9c;
  --error-red: #952018;

  /* Badge Colors */
  --active-green: #157F2A;
  --inactive-red: #952018;
  --regular-volunteer: #802E9B;
  --coverage-volunteer: #99631D;
}

:root {
  --small-text: 12px;
  --medium-text: 16px;
  --large-text: 22px;
  --title-text: 20px;
  --page-title-text: 28px;
}

:root {
  --regular: 400;
  --semi-bold: 600;
  --bold: 700;
}

body {
  margin: 0;
  padding: 0;
}

.notyf {
  font-family: var(--font-primary);
}

.icon-white {
  filter: brightness(0) saturate(100%) invert(100%) sepia(4%) saturate(550%) hue-rotate(258deg) brightness(119%) contrast(100%);
}
.save-button {
  background: #1687CA;
  padding: 10px 16px;
  border: none;
  border-radius: 8px;
  color: white;
  font-size: 14px;
  font-weight: 400;
}
.save-button:hover, .cancel-button:hover {
  filter: brightness(0.7);
  cursor: pointer;
}
.cancel-button {
  background-color: white;
  color: black;
  padding: 10px 16px;
  border: 1px solid #1687CA ;
  border-radius: 8px ;
}

================
File: .example.env
================
REACT_APP_BACKEND = REPLACE_VALUE_WITH_NO_QUOTATIONS

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

.env
package-lock.json
.prettierignore

================
File: .prettierrc
================
{
  "singleQuote": true
}

================
File: docker-compose.yml
================
services:
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - PORT=3000
    restart: always
    env_file:
      - .env
    ports:
      - "3000:3000"
    command: npx serve -s build

volumes:
  db:

================
File: Dockerfile
================
# Stage 1: Build the static site with RsBuild
FROM rust:latest AS builder
WORKDIR /app

# Copy your project files into the container
COPY . .

# (Optional) Install RsBuild if it isn’t already available in your project
RUN cargo install rsbuild

# Build your static site (this command should generate your build files)
RUN rsbuild build

# Stage 2: Serve the built static site using Nginx
FROM nginx:stable-alpine

# Copy the built files from the builder stage into Nginx's default directory
# Adjust the path (/app/build/) if your build output folder is different
COPY --from=builder /app/build/ /usr/share/nginx/html/

# (Optional) Copy a custom Nginx config to support client-side routing (e.g., for React Router)
# Uncomment the next two lines if you have a custom nginx.conf file in your project root
# COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

================
File: eslint.config.mjs
================
import { fixupConfigRules } from '@eslint/compat';
import js from '@eslint/js';
import reactHooks from 'eslint-plugin-react-hooks';
import reactJsx from 'eslint-plugin-react/configs/jsx-runtime.js';
import react from 'eslint-plugin-react/configs/recommended.js';
import globals from 'globals';

export default [
  { languageOptions: { globals: globals.browser } },
  js.configs.recommended,
  ...fixupConfigRules([
    {
      ...react,
      settings: {
        react: { version: 'detect' },
      },
    },
    reactJsx,
  ]),
  {
    plugins: {
      'react-hooks': reactHooks,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
    },
  },
  { ignores: ['dist/'] },
];

================
File: package.json
================
{
  "name": "frontend",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "rsbuild build",
    "dev": "rsbuild dev --open",
    "format": "prettier --write .",
    "lint": "eslint .",
    "preview": "rsbuild preview"
  },
  "dependencies": {
    "@emotion/react": "^11.13.5",
    "@emotion/styled": "^11.13.5",
    "@lordicon/react": "^1.10.0",
    "@mui/icons-material": "^6.1.6",
    "@mui/material": "^6.1.6",
    "@mui/x-date-pickers": "^7.22.0",
    "axios": "^1.7.5",
    "bootstrap": "^5.3.3",
    "country-state-city": "^3.2.1",
    "dayjs": "^1.11.13",
    "formik": "^2.4.6",
    "notyf": "^3.10.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.5",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.26.1",
    "react-schedule-selector": "^2.0.0",
    "react-select": "^5.10.0",
    "react-timer-hook": "^3.0.8",
    "react-weekview": "^0.0.15",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@eslint/compat": "^1.2.7",
    "@eslint/js": "^9.21.0",
    "@rsbuild/core": "^1.2.16",
    "@rsbuild/plugin-react": "^1.1.1",
    "@rsbuild/plugin-svgr": "^1.0.7",
    "eslint": "^9.21.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.2.0",
    "globals": "^16.0.0",
    "prettier": "^3.5.2"
  }
}

================
File: rsbuild.config.mjs
================
import { defineConfig } from '@rsbuild/core';
import { pluginReact } from '@rsbuild/plugin-react';
import { pluginSvgr } from '@rsbuild/plugin-svgr';

export default defineConfig({
  plugins: [
    pluginReact(),
    pluginSvgr({ mixedImport: true })
  ],
  html: {
    template: './public/index.html',
  },
  source: {
    // Compile all JS files and exclude core-js
    include: [{ not: /[\\/]core-js[\\/]/ }],
  },
});
